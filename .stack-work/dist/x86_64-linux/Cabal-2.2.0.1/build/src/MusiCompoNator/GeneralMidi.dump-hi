
==================== FINAL INTERFACE ====================
2019-05-14 04:09:24.642712456 UTC

interface MusiCompoNator-0.1.0.0-E8TyBQY57o81uUM72HIoHR:MusiCompoNator.GeneralMidi 8042
  interface hash: 351dcebd366ae2f3416d4ded0879cfa1
  ABI hash: 561657f783f283ec27db201ed360714a
  export-list hash: 968cfc7fd65aef5df592e3c76ee63393
  orphan hash: 7da0fd18c51c2627f407e811fdf8a825
  flag hash: 143387bc014fa91eaf47e3cef9e808eb
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  MusiCompoNator.GeneralMidi.allPitch
  MusiCompoNator.GeneralMidi.allocCh
  MusiCompoNator.GeneralMidi.beatSize
  MusiCompoNator.GeneralMidi.bendw14
  MusiCompoNator.GeneralMidi.closeMC
  MusiCompoNator.GeneralMidi.collectPitches
  MusiCompoNator.GeneralMidi.defaultMidiPlayerState
  MusiCompoNator.GeneralMidi.depPhrasing
  MusiCompoNator.GeneralMidi.durationOf
  MusiCompoNator.GeneralMidi.endPitch
  MusiCompoNator.GeneralMidi.events
  MusiCompoNator.GeneralMidi.freeCh
  MusiCompoNator.GeneralMidi.getPb
  MusiCompoNator.GeneralMidi.handleEvent
  MusiCompoNator.GeneralMidi.hit
  MusiCompoNator.GeneralMidi.keyPress
  MusiCompoNator.GeneralMidi.lockUntil
  MusiCompoNator.GeneralMidi.midiVoice
  MusiCompoNator.GeneralMidi.mis
  MusiCompoNator.GeneralMidi.moveHead
  MusiCompoNator.GeneralMidi.notes
  MusiCompoNator.GeneralMidi.pbSteps
  MusiCompoNator.GeneralMidi.pbValue
  MusiCompoNator.GeneralMidi.phrase2eventMidi
  MusiCompoNator.GeneralMidi.putChannels
  MusiCompoNator.GeneralMidi.putCursor
  MusiCompoNator.GeneralMidi.resolveDep
  MusiCompoNator.GeneralMidi.resolvePhrasing
  MusiCompoNator.GeneralMidi.runMidiComposition
  MusiCompoNator.GeneralMidi.setBend
  MusiCompoNator.GeneralMidi.setSounding
  MusiCompoNator.GeneralMidi.startPitch
  MusiCompoNator.GeneralMidi.ticks
  MusiCompoNator.GeneralMidi.ve
  MusiCompoNator.GeneralMidi.writeEvent
  MusiCompoNator.GeneralMidi.writeEvents
  MusiCompoNator.GeneralMidi.writeOff
  MusiCompoNator.GeneralMidi.writeOn
  MusiCompoNator.GeneralMidi.Duration
  MusiCompoNator.GeneralMidi.EffectMidi{MusiCompoNator.GeneralMidi.MidiBend MusiCompoNator.GeneralMidi.MidiCut MusiCompoNator.GeneralMidi.MidiNotes MusiCompoNator.GeneralMidi.MidiTie MusiCompoNator.GeneralMidi.MidiVolume}
  MusiCompoNator.GeneralMidi.EventMidi{MusiCompoNator.GeneralMidi.Event}
  MusiCompoNator.GeneralMidi.MidiComposition
  MusiCompoNator.GeneralMidi.MidiInstrument{MusiCompoNator.GeneralMidi.Percussion MusiCompoNator.GeneralMidi.Piano}
  MusiCompoNator.GeneralMidi.MidiState{MusiCompoNator.GeneralMidi.MPS bank channels cursorB midi_events pb_sense pending quater sounding subdivision title velocity}
module dependencies: MusiCompoNator.Composition MusiCompoNator.Core
package dependencies: array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 mtl-2.2.2 transformers-0.5.5.0
                      zmidi-core-0.9.0
orphans: bytestring-0.10.8.2:Data.ByteString.Builder
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
import  -/  MusiCompoNator.Composition b21d70ccd796a5014e9ffee5fd2bbf7d
  exports: d05cd25b681bedd89324a7b29c828f51
  BendNext f2ea0e07b986acdd4382af0f9b465c0f
  Legato f7e03a44979f86138b759132dc1a0e49
  Phrase2 124d3f3727e1ad8ad5eb8f9dc96630a7
  PhraseControl 85fae9d2688e4ec7e08e97002afb85d3
  Staccato 047cb45384df39291f63cdb23b343676
  TieNext 071a6f32302772a979bb50bd8d5d1778
  Voice bd57b41b7e9e1a84e65bdc037451b8de
  Volume c0742fd49e8291235502cc97a683c787
  runVoice cf20f86ab4a9d6704404f84ae7134776
  unPhrase e4ddd7b28b943d64abf3f9064ba30a6d
import  -/  MusiCompoNator.Core 0631fb42d0503391855a8d29ed176cfe
  exports: d45b9d07e52ce24e9881247f257e90db
  :=: b3d767d3373448389fc2236a74864317
  Beat 6cc984b2474b861828e2b4831939749a
  Measurable 79753825d2a046796db4f100dfde3a97
  Pitch ff40311ff49845e5dc11100868906f5f
  Scale 8d34a5f41714f4008ca3d921c79f0642
  Silence 85b6fbc6cab2ae0b4a42ef98dd39c2c7
  Sound cc85b1c112f7e7c9014a464061b896f5
  unmeasure c12698571626245dbb34a00ad8288a7a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Ratio acb0672c59d23785fefce42d4e5a363f
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:Data.Word 22a60783baa8ba4f33c4588b366fade3
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  mtl-2.2.2:Control.Monad.RWS a3099e62b8ff17a6812f6373b37f588b
import  -/  mtl-2.2.2:Control.Monad.Reader.Class a5ac59953d953ab8532b5c11f5e8e0b0
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  transformers-0.5.5.0:Control.Monad.Trans.RWS.Lazy c78772f5675813463c5ba23d357e40e8
import  -/  zmidi-core-0.9.0:ZMidi.Core e73ce2056b6f0298082e2b2166e8dd58
import  -/  zmidi-core-0.9.0:ZMidi.Core.Datatypes 5f34c5f6c9e66999b9d63dc3b72dcbf3
421b969d57af89cdef5f8c3a4f8b04e4
  $fFunctorEventMidi ::
    GHC.Base.Functor MusiCompoNator.GeneralMidi.EventMidi
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.GeneralMidi.EventMidi
                  MusiCompoNator.GeneralMidi.$fFunctorEventMidi_$cfmap
                  MusiCompoNator.GeneralMidi.$fFunctorEventMidi_$c<$ -}
421b969d57af89cdef5f8c3a4f8b04e4
  $fFunctorEventMidi_$c<$ ::
    a
    -> MusiCompoNator.GeneralMidi.EventMidi b
    -> MusiCompoNator.GeneralMidi.EventMidi a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,A,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (x1 :: a)
                   (ds :: MusiCompoNator.GeneralMidi.EventMidi b) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.Event b1 a1 e ->
                 MusiCompoNator.GeneralMidi.Event @ a b1 x1 e }) -}
421b969d57af89cdef5f8c3a4f8b04e4
  $fFunctorEventMidi_$cfmap ::
    (a -> b)
    -> MusiCompoNator.GeneralMidi.EventMidi a
    -> MusiCompoNator.GeneralMidi.EventMidi b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f :: a -> b)
                   (ds :: MusiCompoNator.GeneralMidi.EventMidi a) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.Event b1 a1 e ->
                 MusiCompoNator.GeneralMidi.Event @ b b1 (f a1) e }) -}
fb8296e26a727f6eaaadcebf1b86140a
  $fShowEffectMidi ::
    GHC.Show.Show MusiCompoNator.GeneralMidi.EffectMidi
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.GeneralMidi.EffectMidi
                  MusiCompoNator.GeneralMidi.$fShowEffectMidi_$cshowsPrec
                  MusiCompoNator.GeneralMidi.$fShowEffectMidi_$cshow
                  MusiCompoNator.GeneralMidi.$fShowEffectMidi_$cshowList -}
fb8296e26a727f6eaaadcebf1b86140a
  $fShowEffectMidi1 ::
    MusiCompoNator.GeneralMidi.EffectMidi -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: MusiCompoNator.GeneralMidi.EffectMidi)
                   (w1 :: GHC.Base.String) ->
                 MusiCompoNator.GeneralMidi.$w$cshowsPrec 0# w w1) -}
57b18398fb492fd88c6d50ddf72f0aec
  $fShowEffectMidi2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
fb8296e26a727f6eaaadcebf1b86140a
  $fShowEffectMidi_$cshow ::
    MusiCompoNator.GeneralMidi.EffectMidi -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x1 :: MusiCompoNator.GeneralMidi.EffectMidi) ->
                 MusiCompoNator.GeneralMidi.$fShowEffectMidi_$cshowsPrec
                   MusiCompoNator.GeneralMidi.$fShowEffectMidi2
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
fb8296e26a727f6eaaadcebf1b86140a
  $fShowEffectMidi_$cshowList ::
    [MusiCompoNator.GeneralMidi.EffectMidi] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MusiCompoNator.GeneralMidi.EffectMidi])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MusiCompoNator.GeneralMidi.EffectMidi
                   MusiCompoNator.GeneralMidi.$fShowEffectMidi1
                   ls
                   s) -}
fb8296e26a727f6eaaadcebf1b86140a
  $fShowEffectMidi_$cshowsPrec ::
    GHC.Types.Int
    -> MusiCompoNator.GeneralMidi.EffectMidi -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MusiCompoNator.GeneralMidi.EffectMidi)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MusiCompoNator.GeneralMidi.$w$cshowsPrec ww1 w1 w2 }) -}
421b969d57af89cdef5f8c3a4f8b04e4
  $fShowEventMidi ::
    GHC.Show.Show a =>
    GHC.Show.Show (MusiCompoNator.GeneralMidi.EventMidi a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (MusiCompoNator.GeneralMidi.EventMidi a)
                  (MusiCompoNator.GeneralMidi.$fShowEventMidi_$cshowsPrec @ a v)
                  (MusiCompoNator.GeneralMidi.$fShowEventMidi_$cshow @ a v)
                  (MusiCompoNator.GeneralMidi.$fShowEventMidi_$cshowList @ a v) -}
8f46d590e82f559b94168aa98b8ddbca
  $fShowEventMidi1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MusiCompoNator.GeneralMidi.$fShowEventMidi2) -}
5c1039a00d497a1aff1649f964fc5032
  $fShowEventMidi2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Event "#) -}
e7acc2aefd5d00ad2012c47eccf2fe01
  $fShowEventMidi3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
421b969d57af89cdef5f8c3a4f8b04e4
  $fShowEventMidi_$cshow ::
    GHC.Show.Show a =>
    MusiCompoNator.GeneralMidi.EventMidi a -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(U(U,U),U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x1 :: MusiCompoNator.GeneralMidi.EventMidi a) ->
                 MusiCompoNator.GeneralMidi.$fShowEventMidi_$cshowsPrec
                   @ a
                   $dShow
                   MusiCompoNator.GeneralMidi.$fShowEffectMidi2
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
421b969d57af89cdef5f8c3a4f8b04e4
  $fShowEventMidi_$cshowList ::
    GHC.Show.Show a =>
    [MusiCompoNator.GeneralMidi.EventMidi a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [MusiCompoNator.GeneralMidi.EventMidi a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (MusiCompoNator.GeneralMidi.EventMidi a)
                   (MusiCompoNator.GeneralMidi.$fShowEventMidi_$cshowsPrec
                      @ a
                      $dShow
                      MusiCompoNator.GeneralMidi.$fShowEffectMidi2)
                   ls
                   s) -}
421b969d57af89cdef5f8c3a4f8b04e4
  $fShowEventMidi_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> MusiCompoNator.GeneralMidi.EventMidi a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U(U,U),U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: MusiCompoNator.GeneralMidi.EventMidi a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { MusiCompoNator.GeneralMidi.Event ww3 ww4 ww5 ->
                 MusiCompoNator.GeneralMidi.$w$cshowsPrec1
                   @ a
                   w
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
2b8ee21b871cedf8c9f41aba58f3455c
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Base.Maybe GHC.Word.Word8)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe GHC.Word.Word8)
                  (\ (ds :: GHC.Base.Maybe GHC.Word.Word8)
                     (ds1 :: GHC.Base.Maybe GHC.Word.Word8) ->
                   case ds of wild {
                     GHC.Base.Nothing
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a1
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1 -> GHC.Word.eqWord8 a1 b1 } })
                  MusiCompoNator.GeneralMidi.$s$fEqMaybe_$s$fEqMaybe_$c/= -}
c982dfbe4639aa243b56c6458e14f69b
  $s$fEqMaybe_$s$fEqMaybe_$c/= ::
    GHC.Base.Maybe GHC.Word.Word8
    -> GHC.Base.Maybe GHC.Word.Word8 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x1 :: GHC.Base.Maybe GHC.Word.Word8)
                   (y :: GHC.Base.Maybe GHC.Word.Word8) ->
                 case x1 of wild {
                   GHC.Base.Nothing
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a1
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case GHC.Word.eqWord8 a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
ed114183087dfe93d72e4d486ff92c5a
  $s^1 :: GHC.Types.Double
  {- Strictness: x -}
eacae7f066a4ec2456cc01170b775227
  $s^2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
e888a50e2ee90452ec7e1ff910f46497
  $seven1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
a6f5d7f17186281e3e77edf29fc36eb7
  $smaximum1 :: MusiCompoNator.Core.Pitch
  {- Strictness: x -}
75200eff93086464a0a055f298ae9c37
  $tc'Event :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10102079942739887341##
                   1039382597514701609##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'Event2
                   1#
                   MusiCompoNator.GeneralMidi.$tc'Event1) -}
6cef71669b514378be3c3b46c41e5991
  $tc'Event1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ce1f3c72db79900e9b210ddb575ad746
  $tc'Event2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'Event3) -}
cc912cfe8ac020dd83891ffca70415c5
  $tc'Event3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Event"#) -}
4b45ffd275423d444a2e47621f581cd5
  $tc'MPS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11906790519038299684##
                   16723777039028475145##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'MPS2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'MPS1) -}
1073391d6acbc92506a8933750066325
  $tc'MPS1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4614f191dd6d5e6ca3ec26b5938defbb
  $tc'MPS2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'MPS3) -}
c7ec4131c6d18554b55ed05d120ee855
  $tc'MPS3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MPS"#) -}
cc7dc86cc1f93baede3ffd71e5f53520
  $tc'MidiBend :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13553732932448567861##
                   7058614296219365111##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'MidiBend2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'MidiBend1) -}
448244f6d8d1eca2571aa78d6d64123b
  $tc'MidiBend1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
258ff82deb77adafa2e246a7c0a8fb41
  $tc'MidiBend2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'MidiBend3) -}
288f53e97b47255a50c936d319bd1d24
  $tc'MidiBend3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MidiBend"#) -}
fe62edcd4bf3ef38071d4fcc73191475
  $tc'MidiCut :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15453160724958837618##
                   2175469338314164743##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'MidiCut2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'MidiCut1) -}
523a59ec5d5bee0cef1c897da750b069
  $tc'MidiCut1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
31fb6804fcc6c021648788e3302174e9
  $tc'MidiCut2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'MidiCut3) -}
553bc90556e1d99851704ffe6bdca672
  $tc'MidiCut3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MidiCut"#) -}
a7ab2df10168bb4ba9beecf1298efa7d
  $tc'MidiNotes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13341205407292316199##
                   16638835086167490597##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'MidiNotes2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'MidiNotes1) -}
b5aa8ec7361d2cb85b3e5b0b04f3703a
  $tc'MidiNotes1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6e3eecb8d9e789009c0d3f32e38028eb
  $tc'MidiNotes2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'MidiNotes3) -}
d67e45d3fb45a52c6cb6ecd053243fa9
  $tc'MidiNotes3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MidiNotes"#) -}
5ac202c3600f19be7676d25f5c492692
  $tc'MidiTie :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12272143378164587327##
                   12077220450101112233##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'MidiTie1
                   0#
                   MusiCompoNator.GeneralMidi.$tc'MidiBend1) -}
d4af2e5851c4210783f7998e2966616f
  $tc'MidiTie1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'MidiTie2) -}
d411eafcc91b1921ac0382243e5987f6
  $tc'MidiTie2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MidiTie"#) -}
187dd5473686b1f0076cfaab4279add7
  $tc'MidiVolume :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6126548516573244430##
                   3127523340137470925##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'MidiVolume2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'MidiVolume1) -}
1158eae27baa05a26d5237d84e580162
  $tc'MidiVolume1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
02edcd545ebc2734fee2ccfc2312175e
  $tc'MidiVolume2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'MidiVolume3) -}
79fbee3e36a3e04be82a07778250971b
  $tc'MidiVolume3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MidiVolume"#) -}
9dd89216590bb2d8b0e84aaa47412a5d
  $tc'Percussion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16899752645282002798##
                   7358510544846558263##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'Percussion2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'Percussion1) -}
00a1fce1303c0c18dedfad05a0fc995a
  $tc'Percussion1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3eabdc8e74c367f4d1a0467ea3a7ace1
  $tc'Percussion2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'Percussion3) -}
c2f4bbda8e9e9c1d4985584be349b2e5
  $tc'Percussion3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Percussion"#) -}
fe2085b45a4b9237255614ed386ccd2e
  $tc'Piano :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10576980041811566021##
                   11440123112347589957##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'Piano2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'Piano1) -}
d9ad0761b85c8e9d08f126526b46ee4a
  $tc'Piano1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3a10ca0546a4bdc2cfe988eafee9b264
  $tc'Piano2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'Piano3) -}
c671addbd92053ffe6c09e2e288c22a1
  $tc'Piano3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Piano"#) -}
9f18332820479827b3216d4d2e54b2e4
  $tcEffectMidi :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17735355486596772527##
                   17426996734731033368##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tcEffectMidi1
                   0#
                   GHC.Types.krep$*) -}
03d1eb31d45c1952929bcdaf949a4cb1
  $tcEffectMidi1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tcEffectMidi2) -}
a8e4cea86efbc52650f383fbb89f2f91
  $tcEffectMidi2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EffectMidi"#) -}
a23fc451bf48120e057df3333e1f106a
  $tcEventMidi :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8447369215918954255##
                   12654397995342636228##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tcEventMidi1
                   0#
                   GHC.Types.krep$*Arr*) -}
00abea804b73770fe202297ed454a66a
  $tcEventMidi1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tcEventMidi2) -}
b82bdb6aec167fdfb7f6dc5e9f857c8c
  $tcEventMidi2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EventMidi"#) -}
b7e3d46dd74a555a91447b67437f3daf
  $tcMidiInstrument :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6378639651081517118##
                   6257971211835104617##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tcMidiInstrument1
                   0#
                   GHC.Types.krep$*) -}
3e8b345b81b12c18f3ac77d9debacdb6
  $tcMidiInstrument1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tcMidiInstrument2) -}
aba5bf9e2869ed825cf77de966927a9a
  $tcMidiInstrument2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MidiInstrument"#) -}
326c101cea3ad29e0197c7cc122259c5
  $tcMidiState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6540262680708768439##
                   2553889741042027345##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tcMidiState1
                   0#
                   GHC.Types.krep$*) -}
0d07bf87e14f031e255b4ea7c0127998
  $tcMidiState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tcMidiState2) -}
339fb7fd39fd6c8623a22bb7dcc63727
  $tcMidiState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MidiState"#) -}
d559adc4c0088bf031d57a4a88be4b9b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MusiCompoNator.GeneralMidi.$trModule3
                   MusiCompoNator.GeneralMidi.$trModule1) -}
017d17352c79f2982af97d7f1815586c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$trModule2) -}
1c05ae03a582c337a645940a48391665
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MusiCompoNator.GeneralMidi"#) -}
31604c038628d7bb9e62b7494fd2ba19
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$trModule4) -}
815fc6b2bb4f89a97e5264ead5038f14
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("MusiCompoNator-0.1.0.0-E8TyBQY57o81uUM72HIoHR"#) -}
fb8296e26a727f6eaaadcebf1b86140a
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> MusiCompoNator.GeneralMidi.EffectMidi
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
3b4f41f2100aebc02f04746adb909b91
  $w$cshowsPrec1 ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> MusiCompoNator.Core.Beat
    -> a
    -> MusiCompoNator.GeneralMidi.EffectMidi
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U(U,U)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: MusiCompoNator.Core.Beat)
                   (ww2 :: a)
                   (ww3 :: MusiCompoNator.GeneralMidi.EffectMidi) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       MusiCompoNator.GeneralMidi.$fShowEventMidi3
                       ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x1 :: GHC.Base.String) ->
                     case ww1 of ww4 { GHC.Real.:% ww5 ww6 ->
                     case GHC.Real.$w$s$cshowsPrec
                            11#
                            ww5
                            ww6
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (f (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showSpace1
                                     (MusiCompoNator.GeneralMidi.$w$cshowsPrec
                                        11#
                                        ww3
                                        x1)))) of ww7 { (#,#) ww8 ww9 ->
                     GHC.Types.: @ GHC.Types.Char ww8 ww9 } }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        MusiCompoNator.GeneralMidi.$fShowEventMidi1
                        (g x1)
                   1#
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           MusiCompoNator.GeneralMidi.$fShowEventMidi1
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) }) -}
14d832f95b1ed87ad1a6160c2ba9f9c7
  $w$s^ ::
    GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Double)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger#
                        w1
                        MusiCompoNator.GeneralMidi.$s^2 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.eqInteger#
                             w1
                             MusiCompoNator.GeneralMidi.$s^2 of wild1 {
                        DEFAULT
                        -> case w of ww { GHC.Types.D# ww1 ->
                           MusiCompoNator.GeneralMidi.$wf ww1 w1 }
                        1# -> 1.0## }
                   1#
                   -> case MusiCompoNator.GeneralMidi.$s^1
                      ret_ty GHC.Prim.Double#
                      of {} }) -}
9361c606f994962d935477e675edaba2
  $wallocCh ::
    MusiCompoNator.GeneralMidi.Duration
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# GHC.Base.Maybe GHC.Word.Word8,
          MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 2,
     Strictness: <L,1*U(U,U)><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ (w :: MusiCompoNator.GeneralMidi.Duration)
                   (w1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 let {
                   ds1 :: Data.Functor.Identity.Identity
                            (GHC.Base.Maybe GHC.Word.Word8,
                             MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
                   = case w1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                     case ds of wild1 {
                       []
                       -> (GHC.Base.Nothing @ GHC.Word.Word8, wild,
                           GHC.Types.[]
                             @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))
                            `cast`
                          (Sym (Data.Functor.Identity.N:Identity[0]
                                    <(GHC.Base.Maybe GHC.Word.Word8,
                                      MusiCompoNator.GeneralMidi.MidiState,
                                      [(GHC.Integer.Type.Integer,
                                        ZMidi.Core.Datatypes.MidiEvent)])>_R))
                       : ch rest
                       -> (GHC.Base.Just @ GHC.Word.Word8 ch,
                           MusiCompoNator.GeneralMidi.MPS
                             rest
                             (GHC.Types.:
                                @ (MusiCompoNator.Core.Beat, GHC.Word.Word8)
                                (GHC.Real.$fEnumRatio_$s$c+ ds5 w, ch)
                                ds2)
                             ds3
                             ds4
                             ds5
                             ds6
                             ds7
                             ds8
                             ds9
                             ds10
                             ds11,
                           GHC.Types.[]
                             @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))
                            `cast`
                          (Sym (Data.Functor.Identity.N:Identity[0]
                                    <(GHC.Base.Maybe GHC.Word.Word8,
                                      MusiCompoNator.GeneralMidi.MidiState,
                                      [(GHC.Integer.Type.Integer,
                                        ZMidi.Core.Datatypes.MidiEvent)])>_R)) } }
                 } in
                 (# case ds1
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(GHC.Base.Maybe GHC.Word.Word8,
                                MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                    b1 },
                    case ds1
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(GHC.Base.Maybe GHC.Word.Word8,
                                MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                    s'' },
                    case ds1
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(GHC.Base.Maybe GHC.Word.Word8,
                                MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                    w' } #)) -}
c7531988e99558b0d81a4ab793f5a1f8
  $wf ::
    GHC.Prim.Double# -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
14248f5f56eed21dbb492d1acf26f4bc
  $wkeyPress ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Prim.Word#
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger#
                        ww1
                        MusiCompoNator.GeneralMidi.$s^2 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.integerToWord
                             (GHC.Integer.Type.divInteger ww ww1) of wild1 { DEFAULT ->
                      GHC.Prim.narrow8Word# wild1 }
                   1# -> case GHC.Real.divZeroError ret_ty GHC.Prim.Word# of {} }) -}
fd99d288c89d6cb8d00ae49a96bfbfbc
  $wmidiVoice ::
    MusiCompoNator.GeneralMidi.MidiInstrument
    -> MusiCompoNator.Composition.Voice a
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# (), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 4,
     Strictness: <L,U><L,1*C1(U(1*U,1*U(1*U,1*U,A)))><L,U><L,1*U(U,U,U,U,U,U,U,U,U,U,1*U)>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: MusiCompoNator.GeneralMidi.MidiInstrument)
                   (w1 :: MusiCompoNator.Composition.Voice a)
                   (w2 :: [MusiCompoNator.Core.Pitch])
                   (w3 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (# GHC.Tuple.(),
                    case w3 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                    let {
                      phs :: [MusiCompoNator.Composition.Phrase2]
                      = case MusiCompoNator.Composition.$wrunVoice
                               @ a
                               w1
                               w2 of ww { (#,,#) ww1 ww2 ww3 ->
                        ww2 }
                    } in
                    MusiCompoNator.GeneralMidi.MPS
                      ds
                      ds1
                      ds2
                      ds3
                      ds4
                      ds5
                      ds6
                      (case GHC.Base.map
                              @ (MusiCompoNator.Composition.Phrase
                                   MusiCompoNator.Composition.PhraseControl
                                   (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                                   MusiCompoNator.Core.Beat)
                              @ GHC.Integer.Type.Integer
                              MusiCompoNator.GeneralMidi.beatSize_$sbeatSize
                              phs of wild1 {
                         [] -> GHC.List.maximum1
                         : ipv ipv1
                         -> GHC.Integer.Type.lcmInteger
                              ds7
                              (GHC.List.maximum_go ipv1 ipv) })
                      ds8
                      ds9
                      (GHC.Base.++
                         @ (MusiCompoNator.GeneralMidi.EventMidi
                              (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int))
                         (MusiCompoNator.GeneralMidi.phrase2eventMidi
                            @ MusiCompoNator.GeneralMidi.MidiInstrument
                            w
                            phs)
                         ds10) },
                    GHC.Types.[]
                      @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent) #)) -}
5690fbd1ebeecb0ede573b6f94c8e934
  $wmoveHead ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# (), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 let {
                   ds1 :: Data.Functor.Identity.Identity
                            ((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
                   = case w1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                     letrec {
                       $wgo2 :: [(MusiCompoNator.Core.Beat, GHC.Word.Word8)]
                                -> MusiCompoNator.GeneralMidi.MidiState
                                -> (# (), MusiCompoNator.GeneralMidi.MidiState,
                                      [(GHC.Integer.Type.Integer,
                                        ZMidi.Core.Datatypes.MidiEvent)] #)
                         {- Arity: 2, Strictness: <S,1*U><L,U(U,U,U,U,U,U,U,U,U,U,U)>,
                            Inline: [0] -}
                       = \ (w2 :: [(MusiCompoNator.Core.Beat, GHC.Word.Word8)])
                           (w3 :: MusiCompoNator.GeneralMidi.MidiState) ->
                         case w2 of wild1 {
                           []
                           -> (# GHC.Tuple.(), w3,
                                 GHC.Types.[]
                                   @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent) #)
                           : y ys
                           -> case y of wild2 { (,) b' ch ->
                              case b' of ww { GHC.Real.:% ww1 ww2 ->
                              case ds5 of ww3 { GHC.Real.:% ww4 ww5 ->
                              case GHC.Integer.Type.leInteger#
                                     (GHC.Integer.Type.timesInteger ww1 ww5)
                                     (GHC.Integer.Type.timesInteger ww4 ww2) of wild3 {
                                DEFAULT -> $wgo2 ys w3
                                1#
                                -> let {
                                     ds12 :: Data.Functor.Identity.Identity
                                               ((), MusiCompoNator.GeneralMidi.MidiState,
                                                [(GHC.Integer.Type.Integer,
                                                  ZMidi.Core.Datatypes.MidiEvent)])
                                     = case $wgo2
                                              ys
                                              (case w3 of wild4 { MusiCompoNator.GeneralMidi.MPS ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                                               MusiCompoNator.GeneralMidi.MPS
                                                 (GHC.Types.: @ GHC.Word.Word8 ch ds13)
                                                 ds14
                                                 ds15
                                                 ds16
                                                 ds17
                                                 ds18
                                                 ds19
                                                 ds20
                                                 ds21
                                                 ds22
                                                 ds23 }) of ww7 { (#,,#) ww8 ww9 ww10 ->
                                       (ww8, ww9, ww10)
                                         `cast`
                                       (Sym (Data.Functor.Identity.N:Identity[0]
                                                 <((), MusiCompoNator.GeneralMidi.MidiState,
                                                   [(GHC.Integer.Type.Integer,
                                                     ZMidi.Core.Datatypes.MidiEvent)])>_R)) }
                                   } in
                                   (# case ds12
                                             `cast`
                                           (Data.Functor.Identity.N:Identity[0]
                                                <((), MusiCompoNator.GeneralMidi.MidiState,
                                                  [(GHC.Integer.Type.Integer,
                                                    ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild4 { (,,) b1 s'' w' ->
                                      b1 },
                                      case ds12
                                             `cast`
                                           (Data.Functor.Identity.N:Identity[0]
                                                <((), MusiCompoNator.GeneralMidi.MidiState,
                                                  [(GHC.Integer.Type.Integer,
                                                    ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild4 { (,,) b1 s'' w' ->
                                      s'' },
                                      case ds12
                                             `cast`
                                           (Data.Functor.Identity.N:Identity[0]
                                                <((), MusiCompoNator.GeneralMidi.MidiState,
                                                  [(GHC.Integer.Type.Integer,
                                                    ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild4 { (,,) b1 s'' w' ->
                                      w' } #) } } } } }
                     } in
                     case $wgo2
                            ds2
                            (MusiCompoNator.GeneralMidi.MPS
                               ds
                               (letrec {
                                  go :: [(MusiCompoNator.Core.Beat, GHC.Word.Word8)]
                                        -> [(MusiCompoNator.Core.Beat, GHC.Word.Word8)]
                                    {- Arity: 1, Strictness: <S,1*U> -}
                                  = \ (ds12 :: [(MusiCompoNator.Core.Beat, GHC.Word.Word8)]) ->
                                    case ds12 of wild1 {
                                      []
                                      -> GHC.Types.[] @ (MusiCompoNator.Core.Beat, GHC.Word.Word8)
                                      : y ys
                                      -> case y of wild2 { (,) b' ch ->
                                         case b' of ww { GHC.Real.:% ww1 ww2 ->
                                         case ds5 of ww3 { GHC.Real.:% ww4 ww5 ->
                                         case GHC.Real.$w$s$ccompare ww1 ww2 ww4 ww5 of wild3 {
                                           DEFAULT -> go ys
                                           GHC.Types.GT
                                           -> GHC.Types.:
                                                @ (MusiCompoNator.Core.Beat, GHC.Word.Word8)
                                                wild2
                                                (go ys) } } } } }
                                } in
                                go ds2)
                               ds3
                               ds4
                               w
                               ds6
                               ds7
                               ds8
                               ds9
                               ds10
                               ds11) of ww { (#,,#) ww1 ww2 ww3 ->
                     (ww1, ww2, ww3)
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <((), MusiCompoNator.GeneralMidi.MidiState,
                                 [(GHC.Integer.Type.Integer,
                                   ZMidi.Core.Datatypes.MidiEvent)])>_R)) } }
                 } in
                 (# case ds1
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <((), MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                    b1 },
                    case ds1
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <((), MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                    s'' },
                    case ds1
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <((), MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                    w' } #)) -}
61045d6578feed2757df2ff2b83ad9df
  $wnotes ::
    MusiCompoNator.Core.Beat
    -> [MusiCompoNator.Composition.PhraseControl]
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.Core.Beat
    -> (# MusiCompoNator.Core.Beat, GHC.Types.Int,
          MusiCompoNator.GeneralMidi.EffectMidi #)
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><L,U>, Inline: [0] -}
fe82630a995635d99230129db0273b27
  $wpbValue ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Prim.Word#
  {- Arity: 4, Strictness: <S,U><S,U><S,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.wordToInteger ww of dt1 { DEFAULT ->
                 case GHC.Real.$w$s$c-
                        ww2
                        ww3
                        dt1
                        GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                 case GHC.Real.$w$s$cfromRational
                        MusiCompoNator.GeneralMidi.pbValue2
                        (GHC.Integer.Type.smallInteger
                           (GHC.Prim.word2Int# ww1)) of ww4 { (#,#) ww5 ww9 ->
                 case GHC.Real.$w$sreduce
                        (GHC.Integer.Type.timesInteger ww7 ww5)
                        (GHC.Integer.Type.timesInteger
                           ww8
                           ww9) of ww10 { (#,#) ww11 ww12 ->
                 case GHC.Integer.Type.eqInteger#
                        ww12
                        MusiCompoNator.GeneralMidi.$s^2 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.integerToWord
                             (GHC.Integer.Type.modInteger
                                (GHC.Integer.Type.plusInteger
                                   (GHC.Integer.Type.divInteger ww11 ww12)
                                   MusiCompoNator.GeneralMidi.pbValue1)
                                ZMidi.Core.Datatypes.$fNumWord2) of wild1 { DEFAULT ->
                      GHC.Prim.narrow16Word# wild1 }
                   1#
                   -> case GHC.Real.divZeroError
                      ret_ty GHC.Prim.Word#
                      of {} } } } } }) -}
be74e9cc665a596a6d098deda58b3d25
  $wresolveDep ::
    [MusiCompoNator.Composition.PhraseControl]
    -> MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int
    -> [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]
    -> (# MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int,
          [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,U(U,U(U),U)><S,1*U>, Inline: [0] -}
3836b875d17c84d64add4fdab6a51b71
  $wrunMidiComposition ::
    MusiCompoNator.Core.Scale
    -> MusiCompoNator.GeneralMidi.MidiComposition a
    -> (# ZMidi.Core.Datatypes.MidiFile, a #)
  {- Arity: 2,
     Strictness: <L,U><L,1*C1(C1(U(1*U,1*U(A,A,A,A,A,A,A,U,1*U,1*U(U),A),1*U)))>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: MusiCompoNator.Core.Scale)
                   (w1 :: MusiCompoNator.GeneralMidi.MidiComposition a) ->
                 let {
                   ds :: Data.Functor.Identity.Identity
                           (a, MusiCompoNator.GeneralMidi.MidiState,
                            [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
                   = w1
                       `cast`
                     (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                          <MusiCompoNator.Core.Scale>_R
                          <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                          <MusiCompoNator.GeneralMidi.MidiState>_N
                          <Data.Functor.Identity.Identity>_R
                          <a>_N)
                       w
                       MusiCompoNator.GeneralMidi.defaultMidiPlayerState
                 } in
                 let {
                   ms :: MusiCompoNator.GeneralMidi.MidiState
                   = case ds
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <(a, MusiCompoNator.GeneralMidi.MidiState,
                                 [(GHC.Integer.Type.Integer,
                                   ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) a1 ms1 w2 ->
                     ms1 }
                 } in
                 (# ZMidi.Core.Datatypes.MidiFile
                      (ZMidi.Core.Datatypes.MidiHeader
                         ZMidi.Core.Datatypes.MF1
                         MusiCompoNator.GeneralMidi.runMidiComposition10
                         (ZMidi.Core.Datatypes.TPB
                            (case MusiCompoNator.GeneralMidi.runMidiComposition9 of ww { GHC.Real.:% ww1 ww2 ->
                             case ms of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                             case GHC.Integer.Type.integerToWord
                                    (MusiCompoNator.GeneralMidi.$wticks
                                       ds8
                                       ww1
                                       ww2) of wild1 { DEFAULT ->
                             GHC.Word.W16# (GHC.Prim.narrow16Word# wild1) } } })))
                      (GHC.Types.:
                         @ ZMidi.Core.Datatypes.MidiTrack
                         (GHC.Types.:
                            @ (ZMidi.Core.Datatypes.DeltaTime, ZMidi.Core.Datatypes.MidiEvent)
                            (MusiCompoNator.GeneralMidi.runMidiComposition4
                               `cast`
                             (Sym (ZMidi.Core.Datatypes.N:DeltaTime[0])),
                             ZMidi.Core.Datatypes.MetaEvent
                               (ZMidi.Core.Datatypes.TextEvent
                                  ZMidi.Core.Datatypes.SEQUENCE_NAME
                                  (case ms of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                   ds9 })))
                            (GHC.Types.:
                               @ (ZMidi.Core.Datatypes.DeltaTime, ZMidi.Core.Datatypes.MidiEvent)
                               (MusiCompoNator.GeneralMidi.runMidiComposition4
                                  `cast`
                                (Sym (ZMidi.Core.Datatypes.N:DeltaTime[0])),
                                ZMidi.Core.Datatypes.MetaEvent
                                  (ZMidi.Core.Datatypes.SetTempo
                                     (case MusiCompoNator.GeneralMidi.runMidiComposition6 of wild { GHC.Types.D# x1 ->
                                      case ms of wild1 { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                      case ds10 of wild2 { GHC.Types.I# i ->
                                      case GHC.Prim./##
                                             (GHC.Prim.*## x1 60.0##)
                                             (GHC.Prim.int2Double# i) of wild3 { DEFAULT ->
                                      let {
                                        n :: GHC.Prim.Int# = GHC.Prim.double2Int# wild3
                                      } in
                                      case GHC.Prim.<## wild3 (GHC.Prim.int2Double# n) of lwild {
                                        DEFAULT
                                        -> GHC.Word.W32#
                                             (GHC.Prim.narrow32Word# (GHC.Prim.int2Word# n))
                                        1#
                                        -> GHC.Word.W32#
                                             (GHC.Prim.narrow32Word#
                                                (GHC.Prim.int2Word#
                                                   (GHC.Prim.-# n 1#))) } } } } })))
                               (case ds
                                       `cast`
                                     (Data.Functor.Identity.N:Identity[0]
                                          <(a, MusiCompoNator.GeneralMidi.MidiState,
                                            [(GHC.Integer.Type.Integer,
                                              ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) a1 ms1 w2 ->
                                GHC.Base.++
                                  @ (ZMidi.Core.Datatypes.DeltaTime, ZMidi.Core.Datatypes.MidiEvent)
                                  (MusiCompoNator.GeneralMidi.runMidiComposition_deltaTime
                                     MusiCompoNator.GeneralMidi.$s^2
                                     (Data.OldList.sortBy
                                        @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)
                                        MusiCompoNator.GeneralMidi.runMidiComposition5
                                        w2))
                                  MusiCompoNator.GeneralMidi.runMidiComposition1 })))
                           `cast`
                         (Sym (ZMidi.Core.Datatypes.N:MidiTrack[0]))
                         (GHC.Types.[] @ ZMidi.Core.Datatypes.MidiTrack)),
                    case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a, MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) a1 ms1 w2 ->
                    a1 } #)) -}
ce18508c41185f1a3d8c59e5f9af0cd9
  $wsetBend ::
    MusiCompoNator.Core.Beat
    -> GHC.Word.Word8
    -> GHC.Base.Maybe GHC.Word.Word8
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# (), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 4,
     Strictness: <L,U(U,U)><L,U><S,1*U><L,U(U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: GHC.Word.Word8)
                   (w2 :: GHC.Base.Maybe GHC.Word.Word8)
                   (w3 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case w2 of wild {
                   GHC.Base.Nothing
                   -> (# GHC.Tuple.(), w3,
                         GHC.Types.[]
                           @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent) #)
                   GHC.Base.Just c
                   -> (# GHC.Tuple.(), w3,
                         GHC.Types.:
                           @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)
                           (case w of ww { GHC.Real.:% ww1 ww2 ->
                            case w3 of wild1 { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                            MusiCompoNator.GeneralMidi.$wticks ds7 ww1 ww2 } },
                            ZMidi.Core.Datatypes.VoiceEvent
                              ZMidi.Core.Datatypes.RS_OFF
                              (ZMidi.Core.Datatypes.Controller
                                 c
                                 MusiCompoNator.GeneralMidi.setBend4
                                 MusiCompoNator.GeneralMidi.defaultMidiPlayerState5))
                           (GHC.Types.:
                              @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)
                              (case w of ww { GHC.Real.:% ww1 ww2 ->
                               case w3 of wild1 { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                               MusiCompoNator.GeneralMidi.$wticks ds7 ww1 ww2 } },
                               ZMidi.Core.Datatypes.VoiceEvent
                                 ZMidi.Core.Datatypes.RS_OFF
                                 (ZMidi.Core.Datatypes.Controller
                                    c
                                    MusiCompoNator.GeneralMidi.setBend3
                                    MusiCompoNator.GeneralMidi.defaultMidiPlayerState5))
                              (GHC.Types.:
                                 @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)
                                 (case w of ww { GHC.Real.:% ww1 ww2 ->
                                  case w3 of wild1 { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                                  MusiCompoNator.GeneralMidi.$wticks ds7 ww1 ww2 } },
                                  ZMidi.Core.Datatypes.VoiceEvent
                                    ZMidi.Core.Datatypes.RS_OFF
                                    (ZMidi.Core.Datatypes.Controller
                                       c
                                       MusiCompoNator.GeneralMidi.setBend2
                                       w1))
                                 (GHC.Types.[]
                                    @ (GHC.Integer.Type.Integer,
                                       ZMidi.Core.Datatypes.MidiEvent)))) #) }) -}
3d838b2014c5f57fe5d4512b7c9a9c3b
  $wsetSounding ::
    GHC.Word.Word8
    -> GHC.Word.Word8
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# (), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U)><L,U><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Word.Word8)
                   (w1 :: GHC.Word.Word8)
                   (w2 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (# GHC.Tuple.(),
                    case w2 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                    MusiCompoNator.GeneralMidi.MPS
                      ds
                      ds1
                      (let {
                         z :: [(GHC.Word.Word8, [GHC.Word.Word8])]
                         = letrec {
                             go :: [(GHC.Word.Word8, [GHC.Word.Word8])]
                                   -> [(GHC.Word.Word8, [GHC.Word.Word8])]
                               {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (ds11 :: [(GHC.Word.Word8, [GHC.Word.Word8])]) ->
                               case ds11 of wild1 {
                                 [] -> GHC.Types.[] @ (GHC.Word.Word8, [GHC.Word.Word8])
                                 : y ys
                                 -> case y of wild2 { (,) ch' xs ->
                                    case ch' of wild3 { GHC.Word.W8# x1 ->
                                    case w of wild4 { GHC.Word.W8# y1 ->
                                    case GHC.Prim.neWord# x1 y1 of lwild {
                                      DEFAULT -> go ys
                                      1#
                                      -> GHC.Types.:
                                           @ (GHC.Word.Word8, [GHC.Word.Word8])
                                           wild2
                                           (go ys) } } } } }
                           } in
                           go ds2
                       } in
                       letrec {
                         go :: [(GHC.Word.Word8, [GHC.Word.Word8])]
                               -> [(GHC.Word.Word8, [GHC.Word.Word8])]
                           {- Arity: 1, Strictness: <S,1*U> -}
                         = \ (ds11 :: [(GHC.Word.Word8, [GHC.Word.Word8])]) ->
                           case ds11 of wild1 {
                             [] -> z
                             : y ys
                             -> case y of wild2 { (,) ch' xs ->
                                case ch' of wild3 { GHC.Word.W8# x1 ->
                                case w of wild4 { GHC.Word.W8# y1 ->
                                case GHC.Prim.eqWord# x1 y1 of lwild {
                                  DEFAULT -> go ys
                                  1#
                                  -> GHC.Types.:
                                       @ (GHC.Word.Word8, [GHC.Word.Word8])
                                       (wild3, GHC.Types.: @ GHC.Word.Word8 w1 xs)
                                       (go ys) } } } } }
                       } in
                       go ds2)
                      ds3
                      ds4
                      ds5
                      ds6
                      ds7
                      ds8
                      ds9
                      ds10 },
                    GHC.Types.[]
                      @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent) #)) -}
9ef3095616c2b59236d3fdf9c662ef2f
  $wticks ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Integer.Type.Integer)
                   (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger#
                        ww1
                        MusiCompoNator.GeneralMidi.$s^2 of wild {
                   DEFAULT
                   -> GHC.Integer.Type.timesInteger
                        (GHC.Integer.Type.divInteger w ww1)
                        ww
                   1#
                   -> case GHC.Real.divZeroError
                      ret_ty GHC.Integer.Type.Integer
                      of {} }) -}
9e00780cbebf3503eb1ea4c07e472bb9
  $wwriteEvent ::
    MusiCompoNator.Core.Beat
    -> [GHC.Base.Maybe GHC.Word.Word8]
    -> MusiCompoNator.GeneralMidi.EffectMidi
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3, Strictness: <L,U(U,U)><S,1*U><L,U>, Inline: [0] -}
be5e6338ca75ea1fae91d93a42f499ec
  $wwriteEvents ::
    [MusiCompoNator.GeneralMidi.EventMidi
       (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)]
    -> MusiCompoNator.Core.Scale
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# (), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 3,
     Strictness: <S,1*U><L,U><L,U(U,U,U,U,U(U,U),U,U,U,U,U,U)>,
     Inline: [0] -}
03d3a07f3278452c333f78df09b74d7c
  $wwriteOff ::
    MusiCompoNator.Core.Beat
    -> [GHC.Base.Maybe GHC.Word.Word8]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# (), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 3,
     Strictness: <L,U(U,U)><S,1*U><L,U(U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [0] -}
7bae13086f367958b22a39131e47c460
  type Duration = MusiCompoNator.Core.Beat
fb8296e26a727f6eaaadcebf1b86140a
  data EffectMidi
    = MidiBend MusiCompoNator.GeneralMidi.EffectMidi
               MusiCompoNator.GeneralMidi.EffectMidi
    | MidiTie MusiCompoNator.GeneralMidi.EffectMidi
              MusiCompoNator.GeneralMidi.EffectMidi
    | MidiVolume GHC.Word.Word8 MusiCompoNator.GeneralMidi.EffectMidi
    | MidiCut MusiCompoNator.Core.Beat
              MusiCompoNator.GeneralMidi.EffectMidi
    | MidiNotes MusiCompoNator.Core.Beat [MusiCompoNator.Core.Pitch]
421b969d57af89cdef5f8c3a4f8b04e4
  data EventMidi a
    = Event MusiCompoNator.Core.Beat
            a
            MusiCompoNator.GeneralMidi.EffectMidi
292056182740a363e59ca6d8c2706223
  type MidiComposition =
    Control.Monad.Trans.RWS.Lazy.RWS
      MusiCompoNator.Core.Scale
      [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]
      MusiCompoNator.GeneralMidi.MidiState
    :: * -> *
02d4a4abf54807927d38e50f5d894258
  data MidiInstrument
    = Piano GHC.Word.Word8 | Percussion GHC.Word.Word8 GHC.Word.Word8
7b8baca1265d83b8cb5735a52cf69d4f
  data MidiState
    = MPS {channels :: [GHC.Word.Word8],
           pending :: [(MusiCompoNator.Core.Beat, GHC.Word.Word8)],
           sounding :: [(GHC.Word.Word8, [GHC.Word.Word8])],
           pb_sense :: [(GHC.Word.Word8, GHC.Word.Word8)],
           cursorB :: MusiCompoNator.Core.Beat,
           bank :: GHC.Word.Word8,
           velocity :: GHC.Word.Word8,
           subdivision :: GHC.Integer.Type.Integer,
           title :: GHC.Base.String,
           quater :: GHC.Types.Int,
           midi_events :: [MusiCompoNator.GeneralMidi.EventMidi
                             (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)]}
b866ee9c6c3403ea55df2bcce51f9915
  allPitch ::
    MusiCompoNator.GeneralMidi.EffectMidi
    -> [MusiCompoNator.Core.Pitch]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c061c72a15477cd7c47796b8487d3868
  allocCh ::
    MusiCompoNator.GeneralMidi.Duration
    -> MusiCompoNator.GeneralMidi.MidiComposition
         (GHC.Base.Maybe GHC.Word.Word8)
  {- Arity: 3,
     Strictness: <L,1*U(U,U)><L,A><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.allocCh1
                  `cast`
                (<MusiCompoNator.GeneralMidi.Duration>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <[MusiCompoNator.Core.Pitch]>_R
                               <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                               <MusiCompoNator.GeneralMidi.MidiState>_N
                               <Data.Functor.Identity.Identity>_R
                               <GHC.Base.Maybe GHC.Word.Word8>_N)) -}
423f4ddfaa94ad8b23958fa844070e51
  allocCh1 ::
    MusiCompoNator.GeneralMidi.Duration
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> Data.Functor.Identity.Identity
         (GHC.Base.Maybe GHC.Word.Word8,
          MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3,
     Strictness: <L,1*U(U,U)><L,A><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: MusiCompoNator.GeneralMidi.Duration)
                   (w1 :: [MusiCompoNator.Core.Pitch])
                   (w2 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wallocCh
                        w
                        w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(GHC.Base.Maybe GHC.Word.Word8,
                             MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer,
                               ZMidi.Core.Datatypes.MidiEvent)])>_R)) }) -}
7b8baca1265d83b8cb5735a52cf69d4f
  bank :: MusiCompoNator.GeneralMidi.MidiState -> GHC.Word.Word8
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLL),1*U(A,A,A,A,A,1*U(U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds6 }) -}
95978171169e5e7f0d1c2fe2dbcbcacf
  beatSize ::
    MusiCompoNator.Core.Measurable m =>
    m MusiCompoNator.Core.Beat -> GHC.Integer.Type.Integer
  {- Arity: 2,
     Strictness: <S(LLLC(C(C(S)))),1*U(A,A,A,1*C1(C1(C1(U))))><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMeasurable :: MusiCompoNator.Core.Measurable m)
                   (m1 :: m MusiCompoNator.Core.Beat) ->
                 MusiCompoNator.GeneralMidi.beatSize_go
                   (MusiCompoNator.Core.unmeasure
                      @ m
                      $dMeasurable
                      @ MusiCompoNator.Core.Beat
                      GHC.Real.$fFractionalRatio_$s$fNumRatio
                      GHC.Real.$fOrdRatio_$s$fOrdRatio
                      m1)
                   MusiCompoNator.GeneralMidi.beatSize1) -}
5d4e1c4997fb3f92dce552ae8ca51d08
  beatSize1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
1945f0337cec0d5705bdc88cabef800d
  beatSize_$sbeatSize ::
    MusiCompoNator.Composition.Phrase
      MusiCompoNator.Composition.PhraseControl
      (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
      MusiCompoNator.Core.Beat
    -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (m :: MusiCompoNator.Composition.Phrase
                           MusiCompoNator.Composition.PhraseControl
                           (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                           MusiCompoNator.Core.Beat) ->
                 case MusiCompoNator.Composition.$wunPhrase
                        @ MusiCompoNator.Core.Beat
                        @ MusiCompoNator.Composition.PhraseControl
                        @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                        GHC.Real.$fFractionalRatio_$s$fNumRatio
                        GHC.Real.$fOrdRatio_$s$fOrdRatio
                        m of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.GeneralMidi.beatSize_go
                   (MusiCompoNator.Core.$w$cunmeasure
                      @ MusiCompoNator.Core.Beat
                      GHC.Real.$fFractionalRatio_$s$fNumRatio
                      ww3)
                   MusiCompoNator.GeneralMidi.beatSize1 }) -}
497ba2808a2ba42161dc643a9308af4b
  beatSize_go ::
    [GHC.Real.Ratio GHC.Integer.Type.Integer]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
b7c3cdc0e74307b3a7afba8a22cce6c5
  bendw14 ::
    GHC.Word.Word8
    -> MusiCompoNator.Core.Pitch -> ZMidi.Core.Datatypes.Word14
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(SS),1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (sense :: GHC.Word.Word8) (p :: MusiCompoNator.Core.Pitch) ->
                 MusiCompoNator.GeneralMidi.pbValue
                   (MusiCompoNator.GeneralMidi.keyPress p)
                   sense
                   p) -}
7b8baca1265d83b8cb5735a52cf69d4f
  channels ::
    MusiCompoNator.GeneralMidi.MidiState -> [GHC.Word.Word8]
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds1 }) -}
413512339761ea8bf774493fad0bef6b
  closeMC :: MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.closeMC1
                  `cast`
                (Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                          <[MusiCompoNator.Core.Pitch]>_R
                          <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                          <MusiCompoNator.GeneralMidi.MidiState>_N
                          <Data.Functor.Identity.Identity>_R
                          <()>_N)) -}
21333c09484a34525ccac52f7acc05e7
  closeMC1 ::
    [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> Data.Functor.Identity.Identity
         ((), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [MusiCompoNator.Core.Pitch])
                   (w1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 let {
                   ds1 :: Data.Functor.Identity.Identity
                            ((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
                   = case w1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                     case MusiCompoNator.GeneralMidi.$wwriteEvents
                            (Data.OldList.sortBy
                               @ (MusiCompoNator.GeneralMidi.EventMidi
                                    (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int))
                               MusiCompoNator.GeneralMidi.closeMC2
                               ds11)
                            w
                            wild of ww { (#,,#) ww1 ww2 ww3 ->
                     (ww1, ww2, ww3)
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <((), MusiCompoNator.GeneralMidi.MidiState,
                                 [(GHC.Integer.Type.Integer,
                                   ZMidi.Core.Datatypes.MidiEvent)])>_R)) } }
                 } in
                 (case ds1
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <((), MusiCompoNator.GeneralMidi.MidiState,
                              [(GHC.Integer.Type.Integer,
                                ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                  b1 },
                  case ds1
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <((), MusiCompoNator.GeneralMidi.MidiState,
                              [(GHC.Integer.Type.Integer,
                                ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                  s'' },
                  case ds1
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <((), MusiCompoNator.GeneralMidi.MidiState,
                              [(GHC.Integer.Type.Integer,
                                ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                  w' })
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer,
                               ZMidi.Core.Datatypes.MidiEvent)])>_R))) -}
c37093a06d4734bb2b639be12bd1e0c5
  closeMC2 ::
    MusiCompoNator.GeneralMidi.EventMidi
      (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)
    -> MusiCompoNator.GeneralMidi.EventMidi
         (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)
    -> GHC.Types.Ordering
  {- Arity: 2,
     Strictness: <S(S(SS)LL),1*U(1*U(U,U),A,A)><S(S(SS)LL),1*U(1*U(U,U),A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.EventMidi
                            (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int))
                   (ds1 :: MusiCompoNator.GeneralMidi.EventMidi
                             (MusiCompoNator.GeneralMidi.MidiInstrument,
                              GHC.Types.Int))[OneShot] ->
                 case ds of wild { MusiCompoNator.GeneralMidi.Event b ds2 ds3 ->
                 case ds1 of wild1 { MusiCompoNator.GeneralMidi.Event b' ds4 ds5 ->
                 GHC.Real.$fEnumRatio_$s$ccompare b b' } }) -}
5db8a3ebc7e297f26c5f333ca173f27e
  collectPitches ::
    [MusiCompoNator.GeneralMidi.EventMidi a]
    -> [MusiCompoNator.Core.Pitch]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (es :: [MusiCompoNator.GeneralMidi.EventMidi a]) ->
                 MusiCompoNator.GeneralMidi.collectPitches1 @ a es) -}
788639267d4c6211a0d681732bccddf8
  collectPitches1 ::
    [MusiCompoNator.GeneralMidi.EventMidi a]
    -> [MusiCompoNator.Core.Pitch]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
7b8baca1265d83b8cb5735a52cf69d4f
  cursorB ::
    MusiCompoNator.GeneralMidi.MidiState -> MusiCompoNator.Core.Beat
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLL),1*U(A,A,A,A,1*U(U,U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds5 }) -}
7e0a79811d9e31c3ff53c00a76bac778
  defaultMidiPlayerState :: MusiCompoNator.GeneralMidi.MidiState
  {- Unfolding: (MusiCompoNator.GeneralMidi.MPS
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState10
                   (GHC.Types.[] @ (MusiCompoNator.Core.Beat, GHC.Word.Word8))
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState8
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState7
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState6
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState5
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState4
                   MusiCompoNator.GeneralMidi.beatSize1
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState2
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState1
                   (GHC.Types.[]
                      @ (MusiCompoNator.GeneralMidi.EventMidi
                           (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)))) -}
1e28c0a69ae3ac95a7be65423bb1026b
  defaultMidiPlayerState1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 120#) -}
bf16698e7e372005ff83afc002a2a3b3
  defaultMidiPlayerState10 :: [GHC.Word.Word8]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Word.Word8
                   (GHC.Word.$w$cenumFromTo2 0## 8##)
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState11) -}
e1d2fd2ed3ecbd9590d23d29f2ce2a03
  defaultMidiPlayerState11 :: [GHC.Word.Word8]
  {- Unfolding: (GHC.Word.$w$cenumFromTo2 10## 15##) -}
c131c351639da1ca33206b606e36fae7
  defaultMidiPlayerState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState3) -}
859648bbfea0344f82a4c7c93dfde826
  defaultMidiPlayerState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("untitled"#) -}
dbed69763a20b1b322a29fbc481e7d76
  defaultMidiPlayerState4 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 127##) -}
95a84ef23cc54b04de48b38eae411724
  defaultMidiPlayerState5 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 0##) -}
e07eabae43729778ae58e21b7c018d4c
  defaultMidiPlayerState6 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   MusiCompoNator.GeneralMidi.$s^2
                   GHC.Real.$fEnumRatio1) -}
f408ad0ff4c969f22b1ece347c140146
  defaultMidiPlayerState7 :: [(GHC.Word.Word8, GHC.Word.Word8)]
  {- Unfolding: (GHC.List.zip
                   @ GHC.Word.Word8
                   @ GHC.Word.Word8
                   (GHC.Word.$w$cenumFromTo2 0## 15##)
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState_xs) -}
41c722d86e1279f35cea91d0455cad85
  defaultMidiPlayerState8 :: [(GHC.Word.Word8, [GHC.Word.Word8])]
  {- Unfolding: (GHC.List.zip
                   @ GHC.Word.Word8
                   @ [GHC.Word.Word8]
                   (GHC.Word.$w$cenumFromTo2 0## 15##)
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState9) -}
de2e0001d34a01952d6955ccfabedb1c
  defaultMidiPlayerState9 :: [[GHC.Word.Word8]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Word.Word8]
                   (GHC.Types.[] @ GHC.Word.Word8)
                   (GHC.Types.[] @ [GHC.Word.Word8])) -}
d7f617b00134538234c3e49a4e8977de
  defaultMidiPlayerState_xs :: [GHC.Word.Word8]
  {- HasNoCafRefs, Strictness: m2 -}
36e3bb94ca7cbe5cf79a28b37c4aea91
  depPhrasing ::
    [MusiCompoNator.Composition.PhraseControl]
    -> ([MusiCompoNator.Composition.PhraseControl],
        [MusiCompoNator.Composition.PhraseControl])
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (cs :: [MusiCompoNator.Composition.PhraseControl]) ->
                 (GHC.Base.build
                    @ MusiCompoNator.Composition.PhraseControl
                    (\ @ b
                       (c :: MusiCompoNator.Composition.PhraseControl -> b -> b)[OneShot]
                       (n :: b)[OneShot] ->
                     GHC.Base.foldr
                       @ MusiCompoNator.Composition.PhraseControl
                       @ b
                       (GHC.List.filterFB
                          @ MusiCompoNator.Composition.PhraseControl
                          @ b
                          c
                          MusiCompoNator.GeneralMidi.depPhrasing2)
                       n
                       cs),
                  GHC.Base.build
                    @ MusiCompoNator.Composition.PhraseControl
                    (\ @ b
                       (c :: MusiCompoNator.Composition.PhraseControl -> b -> b)[OneShot]
                       (n :: b)[OneShot] ->
                     GHC.Base.foldr
                       @ MusiCompoNator.Composition.PhraseControl
                       @ b
                       (GHC.List.filterFB
                          @ MusiCompoNator.Composition.PhraseControl
                          @ b
                          c
                          MusiCompoNator.GeneralMidi.depPhrasing1)
                       n
                       cs))) -}
f2ebf1c2f9f9e669b95956c9d7dabf80
  depPhrasing1 ::
    MusiCompoNator.Composition.PhraseControl -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: MusiCompoNator.Composition.PhraseControl) ->
                 case c of wild {
                   DEFAULT -> GHC.Types.False
                   MusiCompoNator.Composition.Volume a1 -> GHC.Types.True
                   MusiCompoNator.Composition.Legato -> GHC.Types.True
                   MusiCompoNator.Composition.Staccato a1 -> GHC.Types.True }) -}
3c8599a0ab83392c2eaf1bd0d7bcea93
  depPhrasing2 ::
    MusiCompoNator.Composition.PhraseControl -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: MusiCompoNator.Composition.PhraseControl) ->
                 case c of wild {
                   DEFAULT -> GHC.Types.True
                   MusiCompoNator.Composition.Volume a1 -> GHC.Types.False
                   MusiCompoNator.Composition.Legato -> GHC.Types.False
                   MusiCompoNator.Composition.Staccato a1 -> GHC.Types.False }) -}
2cb4c79358acc8b5c2a252489511db4f
  durationOf ::
    MusiCompoNator.GeneralMidi.EffectMidi -> GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
f3e85103f69a5eb05ba59d3915ad9050
  endPitch ::
    MusiCompoNator.GeneralMidi.EffectMidi
    -> [MusiCompoNator.Core.Pitch]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
95bc5db8a2006469051169e89af80e68
  events ::
    MusiCompoNator.Composition.Phrase2
    -> [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ph :: MusiCompoNator.Composition.Phrase2) ->
                 case MusiCompoNator.Composition.$wunPhrase
                        @ MusiCompoNator.Core.Beat
                        @ MusiCompoNator.Composition.PhraseControl
                        @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                        GHC.Real.$fFractionalRatio_$s$fNumRatio
                        GHC.Real.$fOrdRatio_$s$fOrdRatio
                        ph of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.GeneralMidi.resolvePhrasing
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState6
                   (GHC.List.zip3
                      @ [MusiCompoNator.Composition.PhraseControl]
                      @ [MusiCompoNator.Core.Pitch]
                      @ MusiCompoNator.Core.Beat
                      ww1
                      (GHC.Base.map
                         @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                         @ [MusiCompoNator.Core.Pitch]
                         MusiCompoNator.GeneralMidi.events_l
                         ww2)
                      (MusiCompoNator.Core.$w$cunmeasure
                         @ MusiCompoNator.Core.Beat
                         GHC.Real.$fFractionalRatio_$s$fNumRatio
                         ww3)) }) -}
7ed659b69cb59aa3cd8691b6b48d9481
  events_l ::
    MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch
    -> [MusiCompoNator.Core.Pitch]
  {- Arity: 1, Strictness: <S,1*U> -}
aa6cb1f072879d25f45fa6a5118ce0d9
  freeCh ::
    GHC.Word.Word8 -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.freeCh1
                  `cast`
                (<GHC.Word.Word8>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((), MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <()>_N)) -}
83cf26da208ac0946d857e16331b9e87
  freeCh1 ::
    GHC.Word.Word8
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> ((), MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (ch :: GHC.Word.Word8)
                   (eta :: [MusiCompoNator.Core.Pitch])
                   (eta1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (GHC.Tuple.(),
                  case eta1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                  MusiCompoNator.GeneralMidi.MPS
                    (GHC.Types.: @ GHC.Word.Word8 ch ds)
                    ds1
                    ds2
                    ds3
                    ds4
                    ds5
                    ds6
                    ds7
                    ds8
                    ds9
                    ds10 },
                  GHC.Types.[]
                    @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))) -}
28c277f139de9ffc0c10cbe3e7cee6fb
  getPb ::
    GHC.Word.Word8
    -> MusiCompoNator.GeneralMidi.MidiComposition GHC.Word.Word8
  {- Arity: 3,
     Strictness: <L,U(U)><L,A><L,U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.getPb1
                  `cast`
                (<GHC.Word.Word8>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <(GHC.Word.Word8, MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <GHC.Word.Word8>_N)) -}
207bed4e8c5b67b65f9c0fd57876bfdd
  getPb1 ::
    GHC.Word.Word8
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (GHC.Word.Word8, MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3,
     Strictness: <L,U(U)><L,A><L,U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (ch :: GHC.Word.Word8)
                   (eta :: [MusiCompoNator.Core.Pitch])
                   (eta1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (case eta1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                  letrec {
                    go :: [(GHC.Word.Word8, GHC.Word.Word8)] -> GHC.Word.Word8
                      <join 1> {- Arity: 1 -}
                    = \ (ds11 :: [(GHC.Word.Word8, GHC.Word.Word8)]) ->
                      case ds11 of wild1 {
                        [] -> GHC.List.badHead @ GHC.Word.Word8
                        : y ys
                        -> case y of wild2 { (,) ch' pb ->
                           case ch of wild3 { GHC.Word.W8# x1 ->
                           case ch' of wild4 { GHC.Word.W8# y1 ->
                           case GHC.Prim.eqWord# x1 y1 of lwild {
                             DEFAULT -> go ys 1# -> pb } } } } }
                  } in
                  go ds3 },
                  eta1,
                  GHC.Types.[]
                    @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))) -}
d4bd7f197759c40b44fca09398f5df04
  handleEvent ::
    MusiCompoNator.GeneralMidi.MidiInstrument
    -> [GHC.Base.Maybe GHC.Word.Word8]
    -> MusiCompoNator.GeneralMidi.EffectMidi
    -> MusiCompoNator.GeneralMidi.MidiComposition
         MusiCompoNator.Core.Beat
  {- Arity: 3, Strictness: <L,A><L,A><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiInstrument)
                   (ds1 :: [GHC.Base.Maybe GHC.Word.Word8])
                   (e :: MusiCompoNator.GeneralMidi.EffectMidi) ->
                 let {
                   eta :: GHC.Real.Rational = MusiCompoNator.GeneralMidi.durationOf e
                 } in
                 (\ (eta1 :: [MusiCompoNator.Core.Pitch])
                    (eta2 :: MusiCompoNator.GeneralMidi.MidiState) ->
                  (eta, eta2,
                   GHC.Types.[]
                     @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)))
                   `cast`
                 ((<[MusiCompoNator.Core.Pitch]>_R
                   ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                   ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                 <(GHC.Real.Rational, MusiCompoNator.GeneralMidi.MidiState,
                                   [(GHC.Integer.Type.Integer,
                                     ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                       <[MusiCompoNator.Core.Pitch]>_R
                                                                                       <[(GHC.Integer.Type.Integer,
                                                                                          ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                       <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                       <GHC.Real.Rational>_N))) -}
24c2623db50092f893117b2fbbc98d87
  hit :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: MusiCompoNator.Core.Scale) ->
                 MusiCompoNator.GeneralMidi.defaultMidiPlayerState6) -}
732f31bd0b51f54183f0061eddf21909
  keyPress :: GHC.Real.Rational -> GHC.Word.Word8
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Real.Rational) ->
                 case w of ww { GHC.Real.:% ww1 ww2 ->
                 case MusiCompoNator.GeneralMidi.$wkeyPress
                        ww1
                        ww2 of ww3 { DEFAULT ->
                 GHC.Word.W8# ww3 } }) -}
d76253316faac9eb1329492eccc77fab
  lockUntil ::
    GHC.Word.Word8
    -> MusiCompoNator.Core.Beat
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,U><L,A><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.lockUntil1
                  `cast`
                (<GHC.Word.Word8>_R
                 ->_R <MusiCompoNator.Core.Beat>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((), MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <()>_N)) -}
bf3b6a9a71150aab4191415bda026663
  lockUntil1 ::
    GHC.Word.Word8
    -> MusiCompoNator.Core.Beat
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> ((), MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,U><L,A><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (4, True, False)
                (\ (ch :: GHC.Word.Word8)
                   (b :: MusiCompoNator.Core.Beat)
                   (eta :: [MusiCompoNator.Core.Pitch])
                   (eta1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (GHC.Tuple.(),
                  case eta1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                  MusiCompoNator.GeneralMidi.MPS
                    ds
                    (GHC.Types.:
                       @ (MusiCompoNator.Core.Beat, GHC.Word.Word8)
                       (b, ch)
                       ds1)
                    ds2
                    ds3
                    ds4
                    ds5
                    ds6
                    ds7
                    ds8
                    ds9
                    ds10 },
                  GHC.Types.[]
                    @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))) -}
01f7304eb40c6ac426b80de1a60ad4ef
  midiVoice ::
    MusiCompoNator.GeneralMidi.MidiInstrument
    -> MusiCompoNator.Composition.Voice a
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 4,
     Strictness: <L,U><L,1*C1(U(1*U,1*U(1*U,1*U,A)))><L,U><L,1*U(U,U,U,U,U,U,U,U,U,U,1*U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.midiVoice1
                  `cast`
                (forall (a :: <*>_N).
                 <MusiCompoNator.GeneralMidi.MidiInstrument>_R
                 ->_R <MusiCompoNator.Composition.Voice a>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((), MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <()>_N)) -}
87032ede955d3c94b2d95f31991650d9
  midiVoice1 ::
    MusiCompoNator.GeneralMidi.MidiInstrument
    -> MusiCompoNator.Composition.Voice a
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> ((), MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 4,
     Strictness: <L,U><L,1*C1(U(1*U,1*U(1*U,1*U,A)))><L,U><L,1*U(U,U,U,U,U,U,U,U,U,U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (w :: MusiCompoNator.GeneralMidi.MidiInstrument)
                   (w1 :: MusiCompoNator.Composition.Voice a)
                   (w2 :: [MusiCompoNator.Core.Pitch])
                   (w3 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wmidiVoice
                        @ a
                        w
                        w1
                        w2
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
7b8baca1265d83b8cb5735a52cf69d4f
  midi_events ::
    MusiCompoNator.GeneralMidi.MidiState
    -> [MusiCompoNator.GeneralMidi.EventMidi
          (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)]
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds11 }) -}
d85bc7fc4cfac10943b789de24253745
  mis :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: MusiCompoNator.Core.Scale) ->
                 MusiCompoNator.GeneralMidi.mis_x) -}
c248c6db4ff1945a9b59c5d89c0a38a8
  mis_dt :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-120) -}
8403cc0bc9e68f37bfe304dcbfdbcb03
  mis_x :: MusiCompoNator.Core.Pitch
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   MusiCompoNator.GeneralMidi.mis_dt
                   GHC.Real.$fEnumRatio1) -}
e308ba8f6652b83b0f3e7d5992828a9d
  moveHead ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.moveHead1
                  `cast`
                (<MusiCompoNator.Core.Beat>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <[MusiCompoNator.Core.Pitch]>_R
                               <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                               <MusiCompoNator.GeneralMidi.MidiState>_N
                               <Data.Functor.Identity.Identity>_R
                               <()>_N)) -}
3b8c4f674a7b6f4f112ad5b9d4db7f75
  moveHead1 ::
    MusiCompoNator.Core.Beat
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> Data.Functor.Identity.Identity
         ((), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: [MusiCompoNator.Core.Pitch])
                   (w2 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wmoveHead
                        w
                        w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer,
                               ZMidi.Core.Datatypes.MidiEvent)])>_R)) }) -}
c70834708687fc2290ffafb4e9d0d387
  notes ::
    MusiCompoNator.Core.Beat
    -> [MusiCompoNator.Composition.PhraseControl]
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.Core.Beat
    -> MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: [MusiCompoNator.Composition.PhraseControl])
                   (w2 :: [MusiCompoNator.Core.Pitch])
                   (w3 :: MusiCompoNator.Core.Beat) ->
                 case MusiCompoNator.GeneralMidi.$wnotes
                        w
                        w1
                        w2
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.GeneralMidi.Event @ GHC.Types.Int ww1 ww2 ww3 }) -}
efa288b322c683096536f4b6e402f081
  pbSteps ::
    GHC.Integer.Type.Integer
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> MusiCompoNator.Core.Pitch
    -> [ZMidi.Core.Datatypes.Word14]
  {- Arity: 4, Strictness: <L,1*U><L,U(U)><L,U(U)><L,1*U(U,U)>,
     Unfolding: (\ (n :: GHC.Integer.Type.Integer)
                   (key :: GHC.Word.Word8)
                   (sense :: GHC.Word.Word8)
                   (value :: MusiCompoNator.Core.Pitch) ->
                 let {
                   m :: GHC.Real.Ratio GHC.Integer.Type.Integer
                   = case GHC.Real.$w$s$cfromRational
                            n
                            MusiCompoNator.GeneralMidi.pbSteps1 of ww { (#,#) ww1 ww2 ->
                     GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }
                 } in
                 let {
                   pivot :: MusiCompoNator.Core.Pitch
                   = case key of wild { GHC.Word.W8# x# ->
                     case GHC.Integer.Type.wordToInteger x# of dt1 { DEFAULT ->
                     GHC.Real.:%
                       @ GHC.Integer.Type.Integer
                       dt1
                       GHC.Real.$fEnumRatio1 } }
                 } in
                 let {
                   lvl14 :: GHC.Real.Ratio GHC.Integer.Type.Integer
                   = case value of ww { GHC.Real.:% ww1 ww2 ->
                     case pivot of ww3 { GHC.Real.:% ww4 ww5 ->
                     case GHC.Real.$w$s$c- ww1 ww2 ww4 ww5 of ww6 { (#,#) ww7 ww8 ->
                     GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } } }
                 } in
                 letrec {
                   $wgo2 :: [GHC.Real.Ratio GHC.Integer.Type.Integer]
                            -> [ZMidi.Core.Datatypes.Word14]
                     {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                   = \ (w :: [GHC.Real.Ratio GHC.Integer.Type.Integer]) ->
                     case w of wild {
                       [] -> GHC.Types.[] @ ZMidi.Core.Datatypes.Word14
                       : y ys
                       -> GHC.Types.:
                            @ ZMidi.Core.Datatypes.Word14
                            (case key of ww { GHC.Word.W8# ww1 ->
                             case sense of ww2 { GHC.Word.W8# ww3 ->
                             case lvl14 of ww4 { GHC.Real.:% ww5 ww6 ->
                             case y of ww7 { GHC.Real.:% ww8 ww9 ->
                             case m of ww10 { GHC.Real.:% ww11 ww12 ->
                             case GHC.Real.$w$s$c/
                                    ww8
                                    ww9
                                    ww11
                                    ww12 of ww13 { (#,#) ww14 ww15 ->
                             case GHC.Real.$w$sreduce
                                    (GHC.Integer.Type.timesInteger ww5 ww14)
                                    (GHC.Integer.Type.timesInteger
                                       ww6
                                       ww15) of ww16 { (#,#) ww17 ww18 ->
                             case pivot of ww19 { GHC.Real.:% ww20 ww21 ->
                             case GHC.Real.$w$s$c+
                                    ww17
                                    ww18
                                    ww20
                                    ww21 of ww22 { (#,#) ww23 ww24 ->
                             case MusiCompoNator.GeneralMidi.$wpbValue
                                    ww1
                                    ww3
                                    ww23
                                    ww24 of ww25 { DEFAULT ->
                             (GHC.Word.W16# ww25)
                               `cast`
                             (Sym (ZMidi.Core.Datatypes.N:Word14[0])) } } } } } } } } } })
                            ($wgo2 ys) }
                 } in
                 $wgo2
                   (GHC.Real.$w$snumericEnumFromTo
                      MusiCompoNator.GeneralMidi.pbSteps1
                      GHC.Real.$fEnumRatio1
                      m)) -}
95766ccaa47e4427116abf054c0d692b
  pbSteps1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
ddbf73b5cca8c9d3aaf4180920be29b7
  pbValue ::
    GHC.Word.Word8
    -> GHC.Word.Word8
    -> MusiCompoNator.Core.Pitch
    -> ZMidi.Core.Datatypes.Word14
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SS),1*U(U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Word.Word8)
                   (w1 :: GHC.Word.Word8)
                   (w2 :: MusiCompoNator.Core.Pitch) ->
                 case w of ww { GHC.Word.W8# ww1 ->
                 case w1 of ww2 { GHC.Word.W8# ww3 ->
                 case w2 of ww4 { GHC.Real.:% ww5 ww6 ->
                 case MusiCompoNator.GeneralMidi.$wpbValue
                        ww1
                        ww3
                        ww5
                        ww6 of ww7 { DEFAULT ->
                 (GHC.Word.W16# ww7)
                   `cast`
                 (Sym (ZMidi.Core.Datatypes.N:Word14[0])) } } } }) -}
29afa041e0524f06851c84474073651d
  pbValue1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (8192) -}
7fc19805f3328516c1c8bfe9113986b6
  pbValue2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (8191) -}
7b8baca1265d83b8cb5735a52cf69d4f
  pb_sense ::
    MusiCompoNator.GeneralMidi.MidiState
    -> [(GHC.Word.Word8, GHC.Word.Word8)]
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds4 }) -}
7b8baca1265d83b8cb5735a52cf69d4f
  pending ::
    MusiCompoNator.GeneralMidi.MidiState
    -> [(MusiCompoNator.Core.Beat, GHC.Word.Word8)]
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds2 }) -}
ac0c69fcc02fd0abcb6cfb9f6fc31674
  phrase2eventMidi ::
    i
    -> [MusiCompoNator.Composition.Phrase2]
    -> [MusiCompoNator.GeneralMidi.EventMidi (i, GHC.Types.Int)]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ i
                   (i1 :: i)
                   (phs :: [MusiCompoNator.Composition.Phrase2]) ->
                 letrec {
                   go :: [MusiCompoNator.Composition.Phrase
                            MusiCompoNator.Composition.PhraseControl
                            (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                            MusiCompoNator.Core.Beat]
                         -> [MusiCompoNator.GeneralMidi.EventMidi (i, GHC.Types.Int)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [MusiCompoNator.Composition.Phrase
                                 MusiCompoNator.Composition.PhraseControl
                                 (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                                 MusiCompoNator.Core.Beat]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.[]
                            @ (MusiCompoNator.GeneralMidi.EventMidi (i, GHC.Types.Int))
                       : y ys
                       -> let {
                            ys1 :: [MusiCompoNator.GeneralMidi.EventMidi (i, GHC.Types.Int)]
                            = go ys
                          } in
                          letrec {
                            go1 :: [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]
                                   -> [MusiCompoNator.GeneralMidi.EventMidi (i, GHC.Types.Int)]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds1 :: [MusiCompoNator.GeneralMidi.EventMidi
                                           GHC.Types.Int]) ->
                              case ds1 of wild1 {
                                [] -> ys1
                                : y1 ys2
                                -> GHC.Types.:
                                     @ (MusiCompoNator.GeneralMidi.EventMidi (i, GHC.Types.Int))
                                     (case y1 of wild2 { MusiCompoNator.GeneralMidi.Event b a e ->
                                      MusiCompoNator.GeneralMidi.Event
                                        @ (i, GHC.Types.Int)
                                        b
                                        (i1, a)
                                        e })
                                     (go1 ys2) }
                          } in
                          go1 (MusiCompoNator.GeneralMidi.events y) }
                 } in
                 go phs) -}
21823e16dc315dcfa39a474bf01ba26a
  putChannels ::
    [GHC.Word.Word8] -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(A,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.putChannels1
                  `cast`
                (<[GHC.Word.Word8]>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((), MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <()>_N)) -}
c286b926a797e33037626680215332d4
  putChannels1 ::
    [GHC.Word.Word8]
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> ((), MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(A,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (chs :: [GHC.Word.Word8])
                   (eta :: [MusiCompoNator.Core.Pitch])
                   (eta1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (GHC.Tuple.(),
                  case eta1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                  MusiCompoNator.GeneralMidi.MPS
                    chs
                    ds1
                    ds2
                    ds3
                    ds4
                    ds5
                    ds6
                    ds7
                    ds8
                    ds9
                    ds10 },
                  GHC.Types.[]
                    @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))) -}
b041dfca2eece66f645d0333a6639879
  putCursor ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,A,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.putCursor1
                  `cast`
                (<MusiCompoNator.Core.Beat>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((), MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <()>_N)) -}
c51b832c65abc9ad5342b1a0097eed83
  putCursor1 ::
    MusiCompoNator.Core.Beat
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> ((), MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,A,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (b :: MusiCompoNator.Core.Beat)
                   (eta :: [MusiCompoNator.Core.Pitch])
                   (eta1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (GHC.Tuple.(),
                  case eta1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                  MusiCompoNator.GeneralMidi.MPS
                    ds
                    ds1
                    ds2
                    ds3
                    b
                    ds5
                    ds6
                    ds7
                    ds8
                    ds9
                    ds10 },
                  GHC.Types.[]
                    @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))) -}
7b8baca1265d83b8cb5735a52cf69d4f
  quater :: MusiCompoNator.GeneralMidi.MidiState -> GHC.Types.Int
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds10 }) -}
9b70e25f215d026937a790f66a228de9
  resolveDep ::
    [MusiCompoNator.Composition.PhraseControl]
    -> MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int
    -> [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]
    -> [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,U(U,U(U),U)><S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [MusiCompoNator.Composition.PhraseControl])
                   (w1 :: MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int)
                   (w2 :: [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]) ->
                 case MusiCompoNator.GeneralMidi.$wresolveDep
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int)
                   ww1
                   ww2 }) -}
e775179c817f167b322a590ce01a205f
  resolvePhrasing ::
    MusiCompoNator.Core.Beat
    -> [([MusiCompoNator.Composition.PhraseControl],
         [MusiCompoNator.Core.Pitch], MusiCompoNator.Core.Beat)]
    -> [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]
  {- Arity: 2, Strictness: <L,U(U,U)><S,1*U> -}
f446f7576028c35b376bdc622c948d26
  runMidiComposition ::
    MusiCompoNator.Core.Scale
    -> MusiCompoNator.GeneralMidi.MidiComposition a
    -> (ZMidi.Core.Datatypes.MidiFile, a)
  {- Arity: 2,
     Strictness: <L,U><L,1*C1(C1(U(1*U,1*U(A,A,A,A,A,A,A,U,1*U,1*U(U),A),1*U)))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: MusiCompoNator.Core.Scale)
                   (w1 :: MusiCompoNator.GeneralMidi.MidiComposition a) ->
                 case MusiCompoNator.GeneralMidi.$wrunMidiComposition
                        @ a
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
cfbacccfa1394ed5fafb7d6ed0738cb7
  runMidiComposition1 ::
    [(ZMidi.Core.Datatypes.DeltaTime, ZMidi.Core.Datatypes.MidiEvent)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (ZMidi.Core.Datatypes.DeltaTime, ZMidi.Core.Datatypes.MidiEvent)
                   MusiCompoNator.GeneralMidi.runMidiComposition2
                   (GHC.Types.[]
                      @ (ZMidi.Core.Datatypes.DeltaTime,
                         ZMidi.Core.Datatypes.MidiEvent))) -}
878ee8c321a16f7086c6efce55d80e6b
  runMidiComposition10 :: GHC.Word.Word16
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W16# 1##) -}
c30baabfcd29d103e322e63497e238ac
  runMidiComposition2 ::
    (ZMidi.Core.Datatypes.DeltaTime, ZMidi.Core.Datatypes.MidiEvent)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((MusiCompoNator.GeneralMidi.runMidiComposition4
                    `cast`
                  (Sym (ZMidi.Core.Datatypes.N:DeltaTime[0])),
                  MusiCompoNator.GeneralMidi.runMidiComposition3)) -}
fe4406c296606d928935383ae3823ea7
  runMidiComposition3 :: ZMidi.Core.Datatypes.MidiEvent
  {- HasNoCafRefs, Strictness: m6,
     Unfolding: (ZMidi.Core.Datatypes.MetaEvent
                   ZMidi.Core.Datatypes.EndOfTrack) -}
8df360761a83e48c2a573b3494cf28e5
  runMidiComposition4 :: GHC.Word.Word32
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W32# 0##) -}
5b177c993531f3df313a71d64c8114a6
  runMidiComposition5 ::
    (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)
    -> (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x1 :: (GHC.Integer.Type.Integer,
                           ZMidi.Core.Datatypes.MidiEvent))
                   (y :: (GHC.Integer.Type.Integer,
                          ZMidi.Core.Datatypes.MidiEvent))[OneShot] ->
                 case x1 of wild { (,) x2 ds1 ->
                 case y of wild1 { (,) x3 ds2 ->
                 GHC.Integer.Type.compareInteger x2 x3 } }) -}
dcae0feda731db897ec391b554cf07a4
  runMidiComposition6 :: GHC.Types.Double
  {- Unfolding: (case MusiCompoNator.GeneralMidi.$w$s^
                        MusiCompoNator.GeneralMidi.runMidiComposition8
                        MusiCompoNator.GeneralMidi.runMidiComposition7 of ww { DEFAULT ->
                 GHC.Types.D# ww }) -}
e5ac94e5e20c91c4d36f5d93a2cd26c0
  runMidiComposition7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (6) -}
35be2380661592b4c0eee3398570c18e
  runMidiComposition8 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 10.0##) -}
7a5d0100e1c41620544e0e76a039f326
  runMidiComposition9 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- Unfolding: (case GHC.Real.$w$s$cfromRational
                        MusiCompoNator.GeneralMidi.pbSteps1
                        MusiCompoNator.GeneralMidi.beatSize1 of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
a1b51b8ea537969d9963d73ad4315358
  runMidiComposition_deltaTime ::
    GHC.Integer.Type.Integer
    -> [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]
    -> [(ZMidi.Core.Datatypes.DeltaTime,
         ZMidi.Core.Datatypes.MidiEvent)]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
10574104707197bb838feab5dc925847
  setBend ::
    MusiCompoNator.Core.Beat
    -> GHC.Word.Word8
    -> GHC.Base.Maybe GHC.Word.Word8
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 5,
     Strictness: <L,U(U,U)><L,U><S,1*U><L,A><L,U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.setBend1
                  `cast`
                (<MusiCompoNator.Core.Beat>_R
                 ->_R <GHC.Word.Word8>_R
                 ->_R <GHC.Base.Maybe GHC.Word.Word8>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <MusiCompoNator.Core.Scale>_R
                               <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                               <MusiCompoNator.GeneralMidi.MidiState>_N
                               <Data.Functor.Identity.Identity>_R
                               <()>_N)) -}
b4cec35c89126f8e5d9cec50cb5ce9a4
  setBend1 ::
    MusiCompoNator.Core.Beat
    -> GHC.Word.Word8
    -> GHC.Base.Maybe GHC.Word.Word8
    -> MusiCompoNator.Core.Scale
    -> MusiCompoNator.GeneralMidi.MidiState
    -> Data.Functor.Identity.Identity
         ((), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 5,
     Strictness: <L,U(U,U)><L,U><S,1*U><L,A><L,U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: GHC.Word.Word8)
                   (w2 :: GHC.Base.Maybe GHC.Word.Word8)
                   (w3 :: MusiCompoNator.Core.Scale)
                   (w4 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wsetBend
                        w
                        w1
                        w2
                        w4 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer,
                               ZMidi.Core.Datatypes.MidiEvent)])>_R)) }) -}
d6b961074550b4dd9bc9fbd3722bff2f
  setBend2 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 6##) -}
ab5bea771da301564f2f207f15508b44
  setBend3 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 100##) -}
f14ced5b66e1178a367b96f6ce3d6e23
  setBend4 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 101##) -}
b50ebecb1a38596e657fbf120cc786cf
  setSounding ::
    GHC.Word.Word8
    -> GHC.Word.Word8 -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U)><L,U><L,A><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.setSounding1
                  `cast`
                (<GHC.Word.Word8>_R
                 ->_R <GHC.Word.Word8>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((), MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <()>_N)) -}
34d891a278ac220cb7318284eaeaf976
  setSounding1 ::
    GHC.Word.Word8
    -> GHC.Word.Word8
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> ((), MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U)><L,U><L,A><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Word.Word8)
                   (w1 :: GHC.Word.Word8)
                   (w2 :: [MusiCompoNator.Core.Pitch])
                   (w3 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wsetSounding
                        w
                        w1
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
7b8baca1265d83b8cb5735a52cf69d4f
  sounding ::
    MusiCompoNator.GeneralMidi.MidiState
    -> [(GHC.Word.Word8, [GHC.Word.Word8])]
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds3 }) -}
b8ece9c6aa0d351af5e0466161722955
  startPitch ::
    MusiCompoNator.GeneralMidi.EffectMidi
    -> [MusiCompoNator.Core.Pitch]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
7b8baca1265d83b8cb5735a52cf69d4f
  subdivision ::
    MusiCompoNator.GeneralMidi.MidiState -> GHC.Integer.Type.Integer
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds8 }) -}
fd1252e95f984d07277ea79166ec7219
  ticks ::
    GHC.Integer.Type.Integer
    -> MusiCompoNator.Core.Beat -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,U><S(SS),1*U(U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Integer.Type.Integer)
                   (w1 :: MusiCompoNator.Core.Beat) ->
                 case w1 of ww { GHC.Real.:% ww1 ww2 ->
                 MusiCompoNator.GeneralMidi.$wticks w ww1 ww2 }) -}
7b8baca1265d83b8cb5735a52cf69d4f
  title :: MusiCompoNator.GeneralMidi.MidiState -> GHC.Base.String
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds9 }) -}
b95ae08279102721f4132331a04d7f33
  ve ::
    ZMidi.Core.Datatypes.MidiVoiceEvent
    -> ZMidi.Core.Datatypes.MidiEvent
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (ZMidi.Core.Datatypes.VoiceEvent
                   ZMidi.Core.Datatypes.RS_OFF) -}
7b8baca1265d83b8cb5735a52cf69d4f
  velocity :: MusiCompoNator.GeneralMidi.MidiState -> GHC.Word.Word8
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLL),1*U(A,A,A,A,A,A,1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds7 }) -}
15f7fdb17d04ac3f11fe5456d3da7fa6
  writeEvent ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.GeneralMidi.MidiInstrument
    -> [GHC.Base.Maybe GHC.Word.Word8]
    -> MusiCompoNator.GeneralMidi.EffectMidi
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 4, Strictness: <L,U(U,U)><L,A><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: MusiCompoNator.GeneralMidi.MidiInstrument)
                   (w2 :: [GHC.Base.Maybe GHC.Word.Word8])
                   (w3 :: MusiCompoNator.GeneralMidi.EffectMidi) ->
                 MusiCompoNator.GeneralMidi.$wwriteEvent w w2 w3) -}
dbdd3b13c54aacdf5ab0d7cfddbfed55
  writeEvents ::
    [MusiCompoNator.GeneralMidi.EventMidi
       (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)]
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3,
     Strictness: <S,1*U><L,U><L,U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.writeEvents1
                  `cast`
                (<[MusiCompoNator.GeneralMidi.EventMidi
                     (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)]>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <MusiCompoNator.Core.Scale>_R
                               <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                               <MusiCompoNator.GeneralMidi.MidiState>_N
                               <Data.Functor.Identity.Identity>_R
                               <()>_N)) -}
65c744ef5fa107f28c48bb74cfcbcf63
  writeEvents1 ::
    [MusiCompoNator.GeneralMidi.EventMidi
       (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)]
    -> MusiCompoNator.Core.Scale
    -> MusiCompoNator.GeneralMidi.MidiState
    -> Data.Functor.Identity.Identity
         ((), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3,
     Strictness: <S,1*U><L,U><L,U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [MusiCompoNator.GeneralMidi.EventMidi
                            (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)])
                   (w1 :: MusiCompoNator.Core.Scale)
                   (w2 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wwriteEvents
                        w
                        w1
                        w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer,
                               ZMidi.Core.Datatypes.MidiEvent)])>_R)) }) -}
b1febe9e9b8be4c0398b13dbff25fb2d
  writeOff ::
    MusiCompoNator.Core.Beat
    -> [GHC.Base.Maybe GHC.Word.Word8]
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 4,
     Strictness: <L,U(U,U)><S,1*U><L,A><L,U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.writeOff1
                  `cast`
                (<MusiCompoNator.Core.Beat>_R
                 ->_R <[GHC.Base.Maybe GHC.Word.Word8]>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <MusiCompoNator.Core.Scale>_R
                               <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                               <MusiCompoNator.GeneralMidi.MidiState>_N
                               <Data.Functor.Identity.Identity>_R
                               <()>_N)) -}
94fcfacdfb3413eda7b1cb0f4dcf8e27
  writeOff1 ::
    MusiCompoNator.Core.Beat
    -> [GHC.Base.Maybe GHC.Word.Word8]
    -> MusiCompoNator.Core.Scale
    -> MusiCompoNator.GeneralMidi.MidiState
    -> Data.Functor.Identity.Identity
         ((), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 4,
     Strictness: <L,U(U,U)><S,1*U><L,A><L,U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: [GHC.Base.Maybe GHC.Word.Word8])
                   (w2 :: MusiCompoNator.Core.Scale)
                   (w3 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wwriteOff
                        w
                        w1
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer,
                               ZMidi.Core.Datatypes.MidiEvent)])>_R)) }) -}
fcc28216b6c0725d6cad09c1904e52ba
  writeOn ::
    MusiCompoNator.Core.Beat
    -> [MusiCompoNator.Core.Pitch]
    -> [GHC.Base.Maybe GHC.Word.Word8]
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3, Strictness: <L,U(U,U)><S,1*U><L,1*U> -}
instance GHC.Base.Functor [MusiCompoNator.GeneralMidi.EventMidi]
  = MusiCompoNator.GeneralMidi.$fFunctorEventMidi
instance GHC.Show.Show [MusiCompoNator.GeneralMidi.EffectMidi]
  = MusiCompoNator.GeneralMidi.$fShowEffectMidi
instance GHC.Show.Show [MusiCompoNator.GeneralMidi.EventMidi]
  = MusiCompoNator.GeneralMidi.$fShowEventMidi
"SPEC beatSize @ (Phrase PhraseControl (Simultanity Pitch))" forall ($dMeasurable :: MusiCompoNator.Core.Measurable
                                                                                       (MusiCompoNator.Composition.Phrase
                                                                                          MusiCompoNator.Composition.PhraseControl
                                                                                          (MusiCompoNator.Core.Simultanity
                                                                                             MusiCompoNator.Core.Pitch)))
  MusiCompoNator.GeneralMidi.beatSize @ (MusiCompoNator.Composition.Phrase
                                           MusiCompoNator.Composition.PhraseControl
                                           (MusiCompoNator.Core.Simultanity
                                              MusiCompoNator.Core.Pitch))
                                      $dMeasurable
  = MusiCompoNator.GeneralMidi.beatSize_$sbeatSize
"SPEC/MusiCompoNator.GeneralMidi $fEqMaybe @ Word8" [orphan] forall (v :: GHC.Classes.Eq
                                                                            GHC.Word.Word8)
  GHC.Base.$fEqMaybe @ GHC.Word.Word8 v
  = MusiCompoNator.GeneralMidi.$s$fEqMaybe
"SPEC/MusiCompoNator.GeneralMidi $fEqMaybe_$c/= @ Word8" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                    GHC.Word.Word8)
  GHC.Base.$fEqMaybe_$c/= @ GHC.Word.Word8 $dEq
  = MusiCompoNator.GeneralMidi.$s$fEqMaybe_$s$fEqMaybe_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

