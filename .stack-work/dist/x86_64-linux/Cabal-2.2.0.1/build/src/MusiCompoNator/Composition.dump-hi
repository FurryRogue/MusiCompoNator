
==================== FINAL INTERFACE ====================
2019-05-14 04:09:23.085466481 UTC

interface MusiCompoNator-0.1.0.0-E8TyBQY57o81uUM72HIoHR:MusiCompoNator.Composition 8042
  interface hash: cdea3ac5f6cc9f7fe83f3fee2c5a4170
  ABI hash: b21d70ccd796a5014e9ffee5fd2bbf7d
  export-list hash: d05cd25b681bedd89324a7b29c828f51
  orphan hash: cc4358af75c32112a6435e8ff7155867
  flag hash: a2798e994542cfa97404afe7777a8fe9
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  MusiCompoNator.Composition.absPitch
  MusiCompoNator.Composition.appLast
  MusiCompoNator.Composition.applyMode
  MusiCompoNator.Composition.arpeggio
  MusiCompoNator.Composition.bendInto
  MusiCompoNator.Composition.chord
  MusiCompoNator.Composition.derive
  MusiCompoNator.Composition.emptyVS
  MusiCompoNator.Composition.getPhrases
  MusiCompoNator.Composition.getScale
  MusiCompoNator.Composition.getTime
  MusiCompoNator.Composition.inKey
  MusiCompoNator.Composition.legato
  MusiCompoNator.Composition.liftL
  MusiCompoNator.Composition.line
  MusiCompoNator.Composition.mode
  MusiCompoNator.Composition.moreV
  MusiCompoNator.Composition.note
  MusiCompoNator.Composition.phrase
  MusiCompoNator.Composition.pitch
  MusiCompoNator.Composition.putPhrases
  MusiCompoNator.Composition.putScale
  MusiCompoNator.Composition.putTime
  MusiCompoNator.Composition.rest
  MusiCompoNator.Composition.runVoice
  MusiCompoNator.Composition.shift
  MusiCompoNator.Composition.silence
  MusiCompoNator.Composition.singleV
  MusiCompoNator.Composition.staccato
  MusiCompoNator.Composition.tie
  MusiCompoNator.Composition.transpose
  MusiCompoNator.Composition.unPhrase
  MusiCompoNator.Composition.volume
  MusiCompoNator.Composition.CPhrase
  MusiCompoNator.Composition.ControlPitchBeatTrifunctor{MusiCompoNator.Composition.lift3 MusiCompoNator.Composition.liftC MusiCompoNator.Composition.liftH MusiCompoNator.Composition.liftR}
  MusiCompoNator.Composition.Phrase{MusiCompoNator.Composition.:+: MusiCompoNator.Composition.:<: MusiCompoNator.Composition.Ctrl MusiCompoNator.Composition.Sig}
  MusiCompoNator.Composition.Phrase1
  MusiCompoNator.Composition.Phrase2
  MusiCompoNator.Composition.PhraseControl{MusiCompoNator.Composition.BendNext MusiCompoNator.Composition.Legato MusiCompoNator.Composition.Staccato MusiCompoNator.Composition.TieNext MusiCompoNator.Composition.Volume}
  MusiCompoNator.Composition.Prim{MusiCompoNator.Composition.Mode MusiCompoNator.Composition.Voicing}
  MusiCompoNator.Composition.Voice
  MusiCompoNator.Composition.VoiceState{MusiCompoNator.Composition.VS cursor phrases scale}
module dependencies: MusiCompoNator.Core
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 mtl-2.2.2 transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  MusiCompoNator.Core 0631fb42d0503391855a8d29ed176cfe
  exports: d45b9d07e52ce24e9881247f257e90db
  :=: b3d767d3373448389fc2236a74864317
  Beat 6cc984b2474b861828e2b4831939749a
  Measurable 79753825d2a046796db4f100dfde3a97
  Pitch ff40311ff49845e5dc11100868906f5f
  Rhythm d4024a57f0b29f741a974bb072806c84
  Scale 8d34a5f41714f4008ca3d921c79f0642
  Sequence 8f51dd550d3a26dc6ac565ccf5f76f24
  Signature e6d10c670c4a8f4b1c99e83467ccf99a
  Silence 85b6fbc6cab2ae0b4a42ef98dd39c2c7
  Simultanity c69cd7691be18e45cf73b095d65a6770
  Sound cc85b1c112f7e7c9014a464061b896f5
  beat c5280751f61270ab5a1305c9f4c14a12
  duration 31d9ed1237d7eabeb4ad132b702961f0
  index 6209db995b546dafc7a68f5a8f12b354
  measure 0a1abe8071b29f876ef580b4518f6f27
  signature 889be8f9f33980e15bcce035d99d07df
  step a8e7fd36a18e39bf8dea66a5b6116d35
  unmeasure c12698571626245dbb34a00ad8288a7a
  withSignature ebd522645f4015de63176d2488d04af9
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.State 1f28325cb5ef11b6b40ffadfe4bc2ca3
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
fixities infixr 3 :+:, infixr 4 :<:
a28ad835327f26724975dd0213f306e0
  $dmliftC ::
    MusiCompoNator.Composition.ControlPitchBeatTrifunctor f =>
    forall b c c' p.
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    ([c] -> [c']) -> f c p b -> f c' p b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(C(C(C(C(C(S)))))))LLL),1*U(1*C1(C1(C1(C1(C1(C1(C1(U))))))),A,A,A)><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ f :: * -> * -> * -> *
                   ($dControlPitchBeatTrifunctor :: MusiCompoNator.Composition.ControlPitchBeatTrifunctor
                                                      f)
                   @ b
                   @ c
                   @ c'
                   @ p
                   ($dNum :: GHC.Num.Num b)
                   ($dOrd :: GHC.Classes.Ord b)
                   (f1 :: [c] -> [c']) ->
                 MusiCompoNator.Composition.lift3
                   @ f
                   $dControlPitchBeatTrifunctor
                   @ b
                   @ b
                   @ c
                   @ c'
                   @ p
                   @ p
                   $dNum
                   $dOrd
                   $dNum
                   $dOrd
                   f1
                   (GHC.Base.id @ (MusiCompoNator.Core.Sequence p))
                   (GHC.Base.id @ (MusiCompoNator.Core.Rhythm b))) -}
3602e1bdc60101c511d2ba568af796ea
  $dmliftH ::
    MusiCompoNator.Composition.ControlPitchBeatTrifunctor f =>
    forall b p p' c.
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    (MusiCompoNator.Core.Sequence p -> MusiCompoNator.Core.Sequence p')
    -> f c p b -> f c p' b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(C(C(C(C(C(S)))))))LLL),1*U(1*C1(C1(C1(C1(C1(C1(C1(U))))))),A,A,A)><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ f :: * -> * -> * -> *
                   ($dControlPitchBeatTrifunctor :: MusiCompoNator.Composition.ControlPitchBeatTrifunctor
                                                      f)
                   @ b
                   @ p
                   @ p'
                   @ c
                   ($dNum :: GHC.Num.Num b)
                   ($dOrd :: GHC.Classes.Ord b)
                   (f1 :: MusiCompoNator.Core.Sequence p
                          -> MusiCompoNator.Core.Sequence p') ->
                 MusiCompoNator.Composition.lift3
                   @ f
                   $dControlPitchBeatTrifunctor
                   @ b
                   @ b
                   @ c
                   @ c
                   @ p
                   @ p'
                   $dNum
                   $dOrd
                   $dNum
                   $dOrd
                   (GHC.Base.id @ [c])
                   f1
                   (GHC.Base.id @ (MusiCompoNator.Core.Rhythm b))) -}
4fe38c1cb471b3e9c7746bf782734acd
  $dmliftR ::
    MusiCompoNator.Composition.ControlPitchBeatTrifunctor f =>
    forall b b' c p.
    (GHC.Num.Num b, GHC.Classes.Ord b, GHC.Num.Num b',
     GHC.Classes.Ord b') =>
    (MusiCompoNator.Core.Rhythm b -> MusiCompoNator.Core.Rhythm b')
    -> f c p b -> f c p b'
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(C(C(C(C(C(C(C(S)))))))LLL),1*U(1*C1(C1(C1(C1(C1(C1(C1(U))))))),A,A,A)><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ f :: * -> * -> * -> *
                   ($dControlPitchBeatTrifunctor :: MusiCompoNator.Composition.ControlPitchBeatTrifunctor
                                                      f)
                   @ b
                   @ b'
                   @ c
                   @ p
                   ($dNum :: GHC.Num.Num b)
                   ($dOrd :: GHC.Classes.Ord b)
                   ($dNum1 :: GHC.Num.Num b')
                   ($dOrd1 :: GHC.Classes.Ord b')
                   (f1 :: MusiCompoNator.Core.Rhythm b
                          -> MusiCompoNator.Core.Rhythm b') ->
                 MusiCompoNator.Composition.lift3
                   @ f
                   $dControlPitchBeatTrifunctor
                   @ b
                   @ b'
                   @ c
                   @ c
                   @ p
                   @ p
                   $dNum
                   $dOrd
                   $dNum1
                   $dOrd1
                   (GHC.Base.id @ [c])
                   (GHC.Base.id @ (MusiCompoNator.Core.Sequence p))
                   f1) -}
6afec63a905700b2e62f779752b8baa4
  $fControlPitchBeatTrifunctorPhrase ::
    MusiCompoNator.Composition.ControlPitchBeatTrifunctor
      MusiCompoNator.Composition.Phrase
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.Composition.Phrase
                  MusiCompoNator.Composition.$fControlPitchBeatTrifunctorPhrase_$clift3
                  MusiCompoNator.Composition.$fControlPitchBeatTrifunctorPhrase_$cliftC
                  MusiCompoNator.Composition.$fControlPitchBeatTrifunctorPhrase_$cliftH
                  MusiCompoNator.Composition.$fControlPitchBeatTrifunctorPhrase_$cliftR -}
1e71da83d6e25b1015992896b5ba758b
  $fControlPitchBeatTrifunctorPhrase_$clift3 ::
    (GHC.Num.Num b, GHC.Classes.Ord b, GHC.Num.Num b',
     GHC.Classes.Ord b') =>
    ([c] -> [c'])
    -> (MusiCompoNator.Core.Sequence p
        -> MusiCompoNator.Core.Sequence p')
    -> (MusiCompoNator.Core.Rhythm b -> MusiCompoNator.Core.Rhythm b')
    -> MusiCompoNator.Composition.Phrase c p b
    -> MusiCompoNator.Composition.Phrase c' p' b'
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U(C(C1(U)),A,A,A,A,A,C(U))><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,C(U)><L,1*C1(U)><L,1*C1(U)><S,1*U>m2,
     Inline: [0],
     Unfolding: InlineRule (8, True, False)
                (\ @ b
                   @ b'
                   @ c
                   @ c'
                   @ p
                   @ p'
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: GHC.Num.Num b')
                   (w3 :: GHC.Classes.Ord b')
                   (w4 :: [c] -> [c'])
                   (w5 :: MusiCompoNator.Core.Sequence p
                          -> MusiCompoNator.Core.Sequence p')
                   (w6 :: MusiCompoNator.Core.Rhythm b
                          -> MusiCompoNator.Core.Rhythm b')
                   (w7 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$w$clift3
                        @ b
                        @ b'
                        @ c
                        @ c'
                        @ p
                        @ p'
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig @ c' @ p' @ b' ww1 ww2 }) -}
34f1c861f00581d9f7f11b10fa1ef395
  $fControlPitchBeatTrifunctorPhrase_$cliftC ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    ([c] -> [c'])
    -> MusiCompoNator.Composition.Phrase c p b
    -> MusiCompoNator.Composition.Phrase c' p b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,C(U)><S,1*U>m2,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   @ c
                   @ c'
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: [c] -> [c'])
                   (w3 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$w$cliftC
                        @ b
                        @ c
                        @ c'
                        @ p
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig @ c' @ p @ b ww1 ww2 }) -}
1cfa8589d93eb2b31a1c2454ea2ff02a
  $fControlPitchBeatTrifunctorPhrase_$cliftH ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    (MusiCompoNator.Core.Sequence p -> MusiCompoNator.Core.Sequence p')
    -> MusiCompoNator.Composition.Phrase c p b
    -> MusiCompoNator.Composition.Phrase c p' b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,1*C1(U)><S,1*U>m2,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   @ p
                   @ p'
                   @ c
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: MusiCompoNator.Core.Sequence p
                          -> MusiCompoNator.Core.Sequence p')
                   (w3 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$w$cliftH
                        @ b
                        @ p
                        @ p'
                        @ c
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig @ c @ p' @ b ww1 ww2 }) -}
7f9476fba39e431beeac4d3fabe7281e
  $fControlPitchBeatTrifunctorPhrase_$cliftR ::
    (GHC.Num.Num b, GHC.Classes.Ord b, GHC.Num.Num b',
     GHC.Classes.Ord b') =>
    (MusiCompoNator.Core.Rhythm b -> MusiCompoNator.Core.Rhythm b')
    -> MusiCompoNator.Composition.Phrase c p b
    -> MusiCompoNator.Composition.Phrase c p b'
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U(C(C1(U)),A,A,A,A,A,C(U))><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,1*C1(U)><S,1*U>m2,
     Unfolding: InlineRule (6, True, False)
                (\ @ b
                   @ b'
                   @ c
                   @ p
                   ($dNum :: GHC.Num.Num b)
                   ($dOrd :: GHC.Classes.Ord b)
                   ($dNum1 :: GHC.Num.Num b')
                   ($dOrd1 :: GHC.Classes.Ord b')
                   (f :: MusiCompoNator.Core.Rhythm b
                         -> MusiCompoNator.Core.Rhythm b')
                   (x :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.unPhrase
                        @ b
                        @ c
                        @ p
                        $dNum
                        $dOrd
                        x of wild { (,,) c1 p1 b1 ->
                 MusiCompoNator.Composition.phrase
                   @ b'
                   @ c
                   @ p
                   $dNum1
                   $dOrd1
                   (c1, p1, f b1) }) -}
85fae9d2688e4ec7e08e97002afb85d3
  $fEqPhraseControl ::
    GHC.Classes.Eq MusiCompoNator.Composition.PhraseControl
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.Composition.PhraseControl
                  MusiCompoNator.Composition.$fEqPhraseControl_$c==
                  MusiCompoNator.Composition.$fEqPhraseControl_$c/= -}
85fae9d2688e4ec7e08e97002afb85d3
  $fEqPhraseControl_$c/= ::
    MusiCompoNator.Composition.PhraseControl
    -> MusiCompoNator.Composition.PhraseControl -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MusiCompoNator.Composition.PhraseControl)
                   (y :: MusiCompoNator.Composition.PhraseControl) ->
                 case MusiCompoNator.Composition.$fEqPhraseControl_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
85fae9d2688e4ec7e08e97002afb85d3
  $fEqPhraseControl_$c== ::
    MusiCompoNator.Composition.PhraseControl
    -> MusiCompoNator.Composition.PhraseControl -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: MusiCompoNator.Composition.PhraseControl)
                   (ds1 :: MusiCompoNator.Composition.PhraseControl) ->
                 case ds of wild {
                   MusiCompoNator.Composition.BendNext
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MusiCompoNator.Composition.BendNext -> GHC.Types.True }
                   MusiCompoNator.Composition.TieNext
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MusiCompoNator.Composition.TieNext -> GHC.Types.True }
                   MusiCompoNator.Composition.Volume a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MusiCompoNator.Composition.Volume b1
                        -> case a1 of wild2 { GHC.Real.:% a2 a3 ->
                           case b1 of wild3 { GHC.Real.:% b2 b3 ->
                           case GHC.Integer.Type.eqInteger# a2 b2 of wild4 {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case GHC.Integer.Type.eqInteger# a3 b3 of wild5 { DEFAULT ->
                                GHC.Prim.tagToEnum# @ GHC.Types.Bool wild5 } } } } }
                   MusiCompoNator.Composition.Legato
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MusiCompoNator.Composition.Legato -> GHC.Types.True }
                   MusiCompoNator.Composition.Staccato a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MusiCompoNator.Composition.Staccato b1
                        -> case a1 of wild2 { GHC.Real.:% a2 a3 ->
                           case b1 of wild3 { GHC.Real.:% b2 b3 ->
                           case GHC.Integer.Type.eqInteger# a2 b2 of wild4 {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case GHC.Integer.Type.eqInteger# a3 b3 of wild5 { DEFAULT ->
                                GHC.Prim.tagToEnum# @ GHC.Types.Bool wild5 } } } } } }) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fMeasurablePhrase ::
    MusiCompoNator.Core.Measurable
      (MusiCompoNator.Composition.Phrase
         c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch))
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ c.
                  @ (MusiCompoNator.Composition.Phrase
                       c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch))
                  (MusiCompoNator.Composition.$fMeasurablePhrase_$cwithSignature @ c)
                  (MusiCompoNator.Composition.$fMeasurablePhrase_$csignature @ c)
                  (MusiCompoNator.Composition.$fMeasurablePhrase_$cmeasure @ c)
                  (MusiCompoNator.Composition.$fMeasurablePhrase_$cunmeasure @ c) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fMeasurablePhrase0 ::
    MusiCompoNator.Core.Measurable
      (MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ c.
                  @ (MusiCompoNator.Composition.Phrase
                       c MusiCompoNator.Composition.Prim)
                  (MusiCompoNator.Composition.$fMeasurablePhrase0_$cwithSignature
                     @ c)
                  (MusiCompoNator.Composition.$fMeasurablePhrase0_$csignature @ c)
                  (MusiCompoNator.Composition.$fMeasurablePhrase0_$cmeasure @ c)
                  (MusiCompoNator.Composition.$fMeasurablePhrase0_$cunmeasure @ c) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fMeasurablePhrase0_$cmeasure ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    [a]
    -> MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><L,A>, Inline: [0],
     Unfolding: InlineRule (2, True, True)
                (\ @ c @ a (w :: GHC.Num.Num a) (w1 :: GHC.Classes.Ord a) ->
                 MusiCompoNator.Composition.$w$cmeasure1 @ c @ a w) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fMeasurablePhrase0_$csignature ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Composition.Phrase
      c MusiCompoNator.Composition.Prim a
    -> MusiCompoNator.Core.Signature a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ c
                   @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (ph :: MusiCompoNator.Composition.Phrase
                            c MusiCompoNator.Composition.Prim a) ->
                 MusiCompoNator.Core.$fMeasurableRhythm_$csignature
                   @ a
                   $dNum
                   $dOrd
                   (case MusiCompoNator.Composition.unPhrase
                           @ a
                           @ c
                           @ MusiCompoNator.Composition.Prim
                           $dNum
                           $dOrd
                           ph of wild { (,,) ds ds1 r ->
                    r })) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fMeasurablePhrase0_$cunmeasure ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Composition.Phrase
      c MusiCompoNator.Composition.Prim a
    -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ c
                   @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (ph :: MusiCompoNator.Composition.Phrase
                            c MusiCompoNator.Composition.Prim a) ->
                 case MusiCompoNator.Composition.unPhrase
                        @ a
                        @ c
                        @ MusiCompoNator.Composition.Prim
                        $dNum
                        $dOrd
                        ph of wild { (,,) ds ds1 r ->
                 MusiCompoNator.Core.$w$cunmeasure @ a $dNum r }) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fMeasurablePhrase0_$cwithSignature ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Core.Signature a
    -> MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim a
    -> MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ c @ a ($dNum :: GHC.Num.Num a) ($dOrd :: GHC.Classes.Ord a) ->
                 MusiCompoNator.Composition.Sig
                   @ c
                   @ MusiCompoNator.Composition.Prim
                   @ a) -}
32a67cb858eeb8cfd75d98558badffea
  $fMeasurablePhrase1 ::
    [MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                   (MusiCompoNator.Core.Silence @ MusiCompoNator.Core.Pitch)
                   (GHC.Types.[]
                      @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch))) -}
23b44bd9b7e6ee8c9fb3e791465b81be
  $fMeasurablePhrase2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fMeasurablePhrase_$cmeasure ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    [a]
    -> MusiCompoNator.Composition.Phrase
         c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><L,A>, Inline: [0],
     Unfolding: InlineRule (2, True, True)
                (\ @ c @ a (w :: GHC.Num.Num a) (w1 :: GHC.Classes.Ord a) ->
                 MusiCompoNator.Composition.$w$cmeasure @ c @ a w) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fMeasurablePhrase_$csignature ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Composition.Phrase
      c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
    -> MusiCompoNator.Core.Signature a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ c
                   @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (ph :: MusiCompoNator.Composition.Phrase
                            c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a) ->
                 MusiCompoNator.Core.$fMeasurableRhythm_$csignature
                   @ a
                   $dNum
                   $dOrd
                   (case MusiCompoNator.Composition.unPhrase
                           @ a
                           @ c
                           @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                           $dNum
                           $dOrd
                           ph of wild { (,,) ds ds1 r ->
                    r })) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fMeasurablePhrase_$cunmeasure ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Composition.Phrase
      c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
    -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ c
                   @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (ph :: MusiCompoNator.Composition.Phrase
                            c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a) ->
                 case MusiCompoNator.Composition.unPhrase
                        @ a
                        @ c
                        @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                        $dNum
                        $dOrd
                        ph of wild { (,,) ds ds1 r ->
                 MusiCompoNator.Core.$w$cunmeasure @ a $dNum r }) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fMeasurablePhrase_$cwithSignature ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Core.Signature a
    -> MusiCompoNator.Composition.Phrase
         c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
    -> MusiCompoNator.Composition.Phrase
         c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ c @ a ($dNum :: GHC.Num.Num a) ($dOrd :: GHC.Classes.Ord a) ->
                 MusiCompoNator.Composition.Sig
                   @ c
                   @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                   @ a) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fSemigroupPhrase ::
    GHC.Base.Semigroup (MusiCompoNator.Composition.Phrase c p b)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ c @ p @ b.
                  @ (MusiCompoNator.Composition.Phrase c p b)
                  (MusiCompoNator.Composition.:+: @ c @ p @ b)
                  (MusiCompoNator.Composition.$fSemigroupPhrase_$csconcat
                     @ c
                     @ p
                     @ b)
                  (MusiCompoNator.Composition.$fSemigroupPhrase_$cstimes
                     @ c
                     @ p
                     @ b) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fSemigroupPhrase1 ::
    MusiCompoNator.Composition.Phrase c p b
    -> [MusiCompoNator.Composition.Phrase c p b]
    -> MusiCompoNator.Composition.Phrase c p b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fSemigroupPhrase_$csconcat ::
    GHC.Base.NonEmpty (MusiCompoNator.Composition.Phrase c p b)
    -> MusiCompoNator.Composition.Phrase c p b
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ c
                   @ p
                   @ b
                   (ds :: GHC.Base.NonEmpty
                            (MusiCompoNator.Composition.Phrase c p b)) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 MusiCompoNator.Composition.$fSemigroupPhrase1
                   @ c
                   @ p
                   @ b
                   a1
                   as }) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fSemigroupPhrase_$cstimes ::
    GHC.Real.Integral b2 =>
    b2
    -> MusiCompoNator.Composition.Phrase c p b1
    -> MusiCompoNator.Composition.Phrase c p b1
  {- Arity: 1, Strictness: <L,U> -}
bd57b41b7e9e1a84e65bdc037451b8de
  $fSemigroupStateT ::
    GHC.Base.Semigroup (MusiCompoNator.Composition.Voice a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (MusiCompoNator.Composition.Voice a)
                  (MusiCompoNator.Composition.$fSemigroupStateT_$s$fMonadStateT_$c>>
                     @ MusiCompoNator.Composition.VoiceState
                     @ a
                     @ a)
                  (MusiCompoNator.Composition.$fSemigroupStateT_$csconcat @ a)
                  (MusiCompoNator.Composition.$fSemigroupStateT_$cstimes @ a) -}
bd57b41b7e9e1a84e65bdc037451b8de
  $fSemigroupStateT1 ::
    MusiCompoNator.Composition.Voice a
    -> [MusiCompoNator.Composition.Voice a]
    -> MusiCompoNator.Composition.Voice a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
bd57b41b7e9e1a84e65bdc037451b8de
  $fSemigroupStateT_$csconcat ::
    GHC.Base.NonEmpty (MusiCompoNator.Composition.Voice a)
    -> MusiCompoNator.Composition.Voice a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: GHC.Base.NonEmpty (MusiCompoNator.Composition.Voice a)) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 MusiCompoNator.Composition.$fSemigroupStateT1 @ a a1 as }) -}
bd57b41b7e9e1a84e65bdc037451b8de
  $fSemigroupStateT_$cstimes ::
    GHC.Real.Integral b =>
    b
    -> MusiCompoNator.Composition.Voice a
    -> MusiCompoNator.Composition.Voice a
  {- Arity: 1, Strictness: <L,U> -}
deb44cf89eeed2a557098d9a9c87234e
  $fSemigroupStateT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT
      s Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(A,1*U))><C(S),1*C1(U(U,U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s Data.Functor.Identity.Identity a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity b)
                   (s1 :: s) ->
                 k `cast`
                 (Control.Monad.Trans.State.Lazy.N:StateT[0]
                      <s>_N <Data.Functor.Identity.Identity>_R <b>_N)
                   (case (m1
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <a>_N)
                            s1)
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a, s)>_R) of wild { (,) a1 s' ->
                    s' }))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fShowPhrase ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show p) =>
    GHC.Show.Show (MusiCompoNator.Composition.Phrase c p b)
  DFunId
  {- Arity: 3,
     Strictness: <L,U(A,A,C(C(U)))><L,U(A,C(U),C(C(U)))><L,U(A,A,C(C(U)))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ c
                      @ p
                      @ b
                      (v :: GHC.Show.Show c)
                      (v1 :: GHC.Show.Show b)
                      (v2 :: GHC.Show.Show p).
                  @ (MusiCompoNator.Composition.Phrase c p b)
                  (MusiCompoNator.Composition.$fShowPhrase_$cshowsPrec
                     @ c
                     @ p
                     @ b
                     v
                     v1
                     v2)
                  (MusiCompoNator.Composition.$fShowPhrase_$cshow
                     @ c
                     @ p
                     @ b
                     v
                     v1
                     v2)
                  (MusiCompoNator.Composition.$fShowPhrase_$cshowList
                     @ c
                     @ p
                     @ b
                     v
                     v1
                     v2) -}
b68c577a535fecd59c4bbaef203d59b1
  $fShowPhrase1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
85fae9d2688e4ec7e08e97002afb85d3
  $fShowPhraseControl ::
    GHC.Show.Show MusiCompoNator.Composition.PhraseControl
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.Composition.PhraseControl
                  MusiCompoNator.Composition.$fShowPhraseControl_$cshowsPrec
                  MusiCompoNator.Composition.$fShowPhraseControl_$cshow
                  MusiCompoNator.Composition.$fShowPhraseControl_$cshowList -}
85fae9d2688e4ec7e08e97002afb85d3
  $fShowPhraseControl1 ::
    MusiCompoNator.Composition.PhraseControl -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (MusiCompoNator.Composition.$fShowPhraseControl_$cshowsPrec
                   MusiCompoNator.Composition.$fShowPhrase1) -}
5ceb5083bf3517ae7c861a22c67003f6
  $fShowPhraseControl2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Staccato "#) -}
d27fa216b22a34789cfb6303e7b64863
  $fShowPhraseControl3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MusiCompoNator.Composition.$fShowPhraseControl4) -}
43138c148eddad063bfd35619a5100b4
  $fShowPhraseControl4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Legato"#) -}
f542ff9cc0ad08d5f825218450155fd4
  $fShowPhraseControl5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Volume "#) -}
dc23aab2703e2c7a1d53d3c6353805ee
  $fShowPhraseControl6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MusiCompoNator.Composition.$fShowPhraseControl7) -}
57b7a2e472d885567d09921334a698e0
  $fShowPhraseControl7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TieNext"#) -}
cb01af36e8360fa68cdfdb11496da76f
  $fShowPhraseControl8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MusiCompoNator.Composition.$fShowPhraseControl9) -}
3256d77909c63645b005bb37541acb7c
  $fShowPhraseControl9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BendNext"#) -}
85fae9d2688e4ec7e08e97002afb85d3
  $fShowPhraseControl_$cshow ::
    MusiCompoNator.Composition.PhraseControl -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: MusiCompoNator.Composition.PhraseControl) ->
                 case x of wild {
                   MusiCompoNator.Composition.BendNext
                   -> MusiCompoNator.Composition.$fShowPhraseControl8
                   MusiCompoNator.Composition.TieNext
                   -> MusiCompoNator.Composition.$fShowPhraseControl6
                   MusiCompoNator.Composition.Volume b1
                   -> GHC.CString.unpackAppendCString#
                        MusiCompoNator.Composition.$fShowPhraseControl5
                        (case b1 of ww2 { GHC.Real.:% ww3 ww4 ->
                         case GHC.Real.$w$s$cshowsPrec
                                11#
                                ww3
                                ww4
                                (GHC.Types.[] @ GHC.Types.Char) of ww5 { (#,#) ww6 ww7 ->
                         GHC.Types.: @ GHC.Types.Char ww6 ww7 } })
                   MusiCompoNator.Composition.Legato
                   -> MusiCompoNator.Composition.$fShowPhraseControl3
                   MusiCompoNator.Composition.Staccato b1
                   -> GHC.CString.unpackAppendCString#
                        MusiCompoNator.Composition.$fShowPhraseControl2
                        (case b1 of ww2 { GHC.Real.:% ww3 ww4 ->
                         case GHC.Real.$w$s$cshowsPrec
                                11#
                                ww3
                                ww4
                                (GHC.Types.[] @ GHC.Types.Char) of ww5 { (#,#) ww6 ww7 ->
                         GHC.Types.: @ GHC.Types.Char ww6 ww7 } }) }) -}
85fae9d2688e4ec7e08e97002afb85d3
  $fShowPhraseControl_$cshowList ::
    [MusiCompoNator.Composition.PhraseControl] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MusiCompoNator.Composition.PhraseControl])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MusiCompoNator.Composition.PhraseControl
                   MusiCompoNator.Composition.$fShowPhraseControl1
                   ls
                   s) -}
85fae9d2688e4ec7e08e97002afb85d3
  $fShowPhraseControl_$cshowsPrec ::
    GHC.Types.Int
    -> MusiCompoNator.Composition.PhraseControl -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: MusiCompoNator.Composition.PhraseControl)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   MusiCompoNator.Composition.BendNext
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        MusiCompoNator.Composition.$fShowPhraseControl8
                        eta
                   MusiCompoNator.Composition.TieNext
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        MusiCompoNator.Composition.$fShowPhraseControl6
                        eta
                   MusiCompoNator.Composition.Volume b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             MusiCompoNator.Composition.$fShowPhraseControl5
                             (case b1 of ww2 { GHC.Real.:% ww3 ww4 ->
                              case GHC.Real.$w$s$cshowsPrec
                                     11#
                                     ww3
                                     ww4
                                     eta of ww5 { (#,#) ww6 ww7 ->
                              GHC.Types.: @ GHC.Types.Char ww6 ww7 } })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                MusiCompoNator.Composition.$fShowPhraseControl5
                                (case b1 of ww2 { GHC.Real.:% ww3 ww4 ->
                                 case GHC.Real.$w$s$cshowsPrec
                                        11#
                                        ww3
                                        ww4
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) of ww5 { (#,#) ww6 ww7 ->
                                 GHC.Types.: @ GHC.Types.Char ww6 ww7 } })) } }
                   MusiCompoNator.Composition.Legato
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        MusiCompoNator.Composition.$fShowPhraseControl3
                        eta
                   MusiCompoNator.Composition.Staccato b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             MusiCompoNator.Composition.$fShowPhraseControl2
                             (case b1 of ww2 { GHC.Real.:% ww3 ww4 ->
                              case GHC.Real.$w$s$cshowsPrec
                                     11#
                                     ww3
                                     ww4
                                     eta of ww5 { (#,#) ww6 ww7 ->
                              GHC.Types.: @ GHC.Types.Char ww6 ww7 } })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                MusiCompoNator.Composition.$fShowPhraseControl2
                                (case b1 of ww2 { GHC.Real.:% ww3 ww4 ->
                                 case GHC.Real.$w$s$cshowsPrec
                                        11#
                                        ww3
                                        ww4
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) of ww5 { (#,#) ww6 ww7 ->
                                 GHC.Types.: @ GHC.Types.Char ww6 ww7 } })) } } }) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fShowPhrase_$cshow ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show p) =>
    MusiCompoNator.Composition.Phrase c p b -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,U(A,A,C(C(U)))><L,U(A,C(U),C(C(U)))><L,U(A,A,C(C(U)))><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ c
                   @ p
                   @ b
                   ($dShow :: GHC.Show.Show c)
                   ($dShow1 :: GHC.Show.Show b)
                   ($dShow2 :: GHC.Show.Show p)
                   (x :: MusiCompoNator.Composition.Phrase c p b) ->
                 MusiCompoNator.Composition.$fShowPhrase_$cshowsPrec
                   @ c
                   @ p
                   @ b
                   $dShow
                   $dShow1
                   $dShow2
                   MusiCompoNator.Composition.$fShowPhrase1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fShowPhrase_$cshowList ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show p) =>
    [MusiCompoNator.Composition.Phrase c p b] -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(A,A,C(C(U)))><L,U(A,C(U),C(C(U)))><L,U(A,A,C(C(U)))><S,1*U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ c
                   @ p
                   @ b
                   ($dShow :: GHC.Show.Show c)
                   ($dShow1 :: GHC.Show.Show b)
                   ($dShow2 :: GHC.Show.Show p)
                   (ls :: [MusiCompoNator.Composition.Phrase c p b])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (MusiCompoNator.Composition.Phrase c p b)
                   (MusiCompoNator.Composition.$fShowPhrase_$cshowsPrec
                      @ c
                      @ p
                      @ b
                      $dShow
                      $dShow1
                      $dShow2
                      MusiCompoNator.Composition.$fShowPhrase1)
                   ls
                   s) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $fShowPhrase_$cshowsPrec ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show p) =>
    GHC.Types.Int
    -> MusiCompoNator.Composition.Phrase c p b -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(A,A,C(C(U)))><L,U(A,C(U),C(C(U)))><L,U(A,A,C(C(U)))><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ c
                   @ p
                   @ b
                   (w :: GHC.Show.Show c)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Show.Show p)
                   (w3 :: GHC.Types.Int)
                   (w4 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 MusiCompoNator.Composition.$w$cshowsPrec
                   @ c
                   @ p
                   @ b
                   w
                   w1
                   w2
                   ww1
                   w4 }) -}
8e68b20aa07e1a8abaf018708500d028
  $tc':+: :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18381294158065555083##
                   11755112397511741251##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc':+:2
                   3#
                   MusiCompoNator.Composition.$tc':+:1) -}
fd192f992e798b8eb8096e530019795b
  $tc':+:1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b5b51721f9da1b11db2ef2e886b4eefb
  $tc':+:2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc':+:3) -}
fab55a5f0f123bbd333f4597cef2af42
  $tc':+:3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("':+:"#) -}
57683cd879465833a7522db45e7421c8
  $tc':<: :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1352111511073129282##
                   7107059072907659156##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc':<:2
                   3#
                   MusiCompoNator.Composition.$tc':<:1) -}
24065c7ab018b6aeb688e79469e40f05
  $tc':<:1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0f4f9d8fcd6ac4b7feb653d7c369a220
  $tc':<:2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc':<:3) -}
1e22a0e1b9087586cf9c17f04be80dc6
  $tc':<:3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("':<:"#) -}
626d5d1cd88f053014f1073db4e1cc99
  $tc'BendNext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12438477444477469559##
                   14143651915763946015##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'BendNext2
                   0#
                   MusiCompoNator.Composition.$tc'BendNext1) -}
be1d278181de96bdbf269bb18167c3cd
  $tc'BendNext1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
3affb6fe4a7dceebb9b5d6ab50aba5ca
  $tc'BendNext2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'BendNext3) -}
6152abf6d2fed384c58b0c4d97f6c820
  $tc'BendNext3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BendNext"#) -}
2ebd0745d057990390ddd83096ca7046
  $tc'Ctrl :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12203545831734936335##
                   11134951486907364163##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Ctrl2
                   3#
                   MusiCompoNator.Composition.$tc'Ctrl1) -}
7f3d9919d457c8523e6f6cc1b901f1fa
  $tc'Ctrl1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1e499cb56f7c2a41a4b4e217b19d0783
  $tc'Ctrl2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Ctrl3) -}
bbde91dfd659272748efb5ab2eeec549
  $tc'Ctrl3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ctrl"#) -}
dda288e5131d93faad068f69653b0bdb
  $tc'Legato :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16079282606226035612##
                   709134079043331094##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Legato1
                   0#
                   MusiCompoNator.Composition.$tc'BendNext1) -}
dd41752072b15c6b3fc8a20365094df2
  $tc'Legato1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Legato2) -}
4bb3b4a76292c5bc0e89fd13e0f8bafe
  $tc'Legato2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Legato"#) -}
ff2836e93a268c34dbab1dd170ca5afb
  $tc'Mode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16323308823832943997##
                   3796622179716710481##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Mode2
                   0#
                   MusiCompoNator.Composition.$tc'Mode1) -}
255a6954867ff6a7b0d57c130114f1c1
  $tc'Mode1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a75694c1b294552378c1bb17c02c02fb
  $tc'Mode2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Mode3) -}
c9929851dc8681785dbb95d57c59c3eb
  $tc'Mode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Mode"#) -}
035c976ad3df25cd39587f5096cc0947
  $tc'Sig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7252685785979541742##
                   4298951244740975686##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Sig2
                   3#
                   MusiCompoNator.Composition.$tc'Sig1) -}
5a42df136fc0d541523b431658eafe99
  $tc'Sig1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
254e81514a9f6720f5c603b2553dea30
  $tc'Sig2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Sig3) -}
5296efeacb8298dc9d2e3bc77fbcc25d
  $tc'Sig3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Sig"#) -}
3fa8957ebb22420ae33a1823e2aaf470
  $tc'Staccato :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3064657038822640057##
                   11531595000156800353##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Staccato2
                   0#
                   MusiCompoNator.Composition.$tc'Staccato1) -}
b4ffbf1bd8f6d75ace221178527aed95
  $tc'Staccato1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c21a5d5b44af01b599ab7fe319b56979
  $tc'Staccato2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Staccato3) -}
d4799889863c3abd9332b998a1767575
  $tc'Staccato3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Staccato"#) -}
5dc7633b757d5e3e1b72e4aea1eb87d4
  $tc'TieNext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11818188020274227825##
                   17466718406242382549##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'TieNext1
                   0#
                   MusiCompoNator.Composition.$tc'BendNext1) -}
91349a7e8977d27cf6d2506d9ea61b7b
  $tc'TieNext1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'TieNext2) -}
4a812c89fe95eda9cb6176ca76c5eacc
  $tc'TieNext2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TieNext"#) -}
4315559cd4617beadeb1b990fbbc3ebe
  $tc'VS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16267205989013477940##
                   11025792864726855296##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'VS2
                   0#
                   MusiCompoNator.Composition.$tc'VS1) -}
59baa71418cf376cdbfc565f785f629e
  $tc'VS1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1688ef217efa148340e721d822fb7742
  $tc'VS2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'VS3) -}
eeea78c1bb76bf479d6a9e1526517436
  $tc'VS3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VS"#) -}
ef0a3c5b11a72bcbfc22d7f0d3b729f7
  $tc'Voicing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2456192833212339433##
                   7946112881555156758##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Voicing2
                   0#
                   MusiCompoNator.Composition.$tc'Voicing1) -}
bb3b70f2304c03caa1a730661d8d3699
  $tc'Voicing1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
20ea136bc6fc110b240449228190df06
  $tc'Voicing2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Voicing3) -}
5af62e769de2fd3b59f7bfd0299d5235
  $tc'Voicing3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Voicing"#) -}
e1ea4444c8221fc755ed5a652ec7c657
  $tc'Volume :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13683766310941687517##
                   3865240250668327578##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Volume1
                   0#
                   MusiCompoNator.Composition.$tc'Staccato1) -}
81672578d945b1ca6537b9379b0f5648
  $tc'Volume1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Volume2) -}
7aeaf9f99f5f2707d6b0531e0ef62760
  $tc'Volume2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Volume"#) -}
4d89134bd996074b40a391f1b584114e
  $tcControlPitchBeatTrifunctor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5072569342374904846##
                   6308728262687074998##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tcControlPitchBeatTrifunctor2
                   0#
                   MusiCompoNator.Composition.$tcControlPitchBeatTrifunctor1) -}
f0f282f24b835f4609ba707c35556208
  $tcControlPitchBeatTrifunctor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6831775af56a89c13a75e10309c5a4df
  $tcControlPitchBeatTrifunctor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tcControlPitchBeatTrifunctor3) -}
73adf93d74a77f894e13db2ee6206a71
  $tcControlPitchBeatTrifunctor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ControlPitchBeatTrifunctor"#) -}
d19c646489d6405e9f9d219eb7e22e3e
  $tcPhrase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14649080732300598663##
                   830474032481719734##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tcPhrase2
                   0#
                   MusiCompoNator.Composition.$tcPhrase1) -}
aa19b793496bf17a4e9ff00bba326f01
  $tcPhrase1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f78922a4f76b4f447895536f3e679cf3
  $tcPhrase2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tcPhrase3) -}
85f25d4571fb8cc2770a002b9523efcc
  $tcPhrase3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Phrase"#) -}
769b3e58157ebc04a4e972d6cf8777a1
  $tcPhraseControl :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16106303084544784123##
                   9691653071072080418##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tcPhraseControl1
                   0#
                   GHC.Types.krep$*) -}
ea47ee8552ade0ec549dfd5b3c82c85c
  $tcPhraseControl1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tcPhraseControl2) -}
73b6a5decebb7816eeff773515692635
  $tcPhraseControl2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PhraseControl"#) -}
b7640bf1bb6a57909b3792722a7121cb
  $tcPrim :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3632055013044425059##
                   3013120051541501258##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tcPrim1
                   0#
                   GHC.Types.krep$*) -}
326e47d0e50c17729ed748798658a32d
  $tcPrim1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tcPrim2) -}
1c01c9e9e8a73defc04b447d33fdb933
  $tcPrim2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prim"#) -}
b6a32ec2584aedc10835f01667fc08dc
  $tcVoiceState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15494894464902785066##
                   330396977185501090##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tcVoiceState1
                   0#
                   GHC.Types.krep$*) -}
1cd05f9154198580d0313bc7885a9df2
  $tcVoiceState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tcVoiceState2) -}
0963e988489113297875e77b8a9f43e7
  $tcVoiceState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("VoiceState"#) -}
bb4f883d9c38d3e7d14154832b6ac745
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MusiCompoNator.Composition.$trModule3
                   MusiCompoNator.Composition.$trModule1) -}
9a015d1bdfa46d3582da57e80b521df0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$trModule2) -}
d843c83e3bf5e5d8698ba6a6e24c874a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MusiCompoNator.Composition"#) -}
e1e88bb3d10a50fa37529c94b6102a05
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$trModule4) -}
d2c3f0207dc28fa30166bcaae0c9f903
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("MusiCompoNator-0.1.0.0-E8TyBQY57o81uUM72HIoHR"#) -}
f472e027c896c9a92812a367036e5ee9
  $w$clift3 ::
    (GHC.Num.Num b, GHC.Classes.Ord b, GHC.Num.Num b',
     GHC.Classes.Ord b') =>
    ([c] -> [c'])
    -> (MusiCompoNator.Core.Sequence p
        -> MusiCompoNator.Core.Sequence p')
    -> (MusiCompoNator.Core.Rhythm b -> MusiCompoNator.Core.Rhythm b')
    -> MusiCompoNator.Composition.Phrase c p b
    -> (# MusiCompoNator.Core.Signature b',
          MusiCompoNator.Composition.Phrase c' p' b' #)
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U(C(C1(U)),A,A,A,A,A,C(U))><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,C(U)><L,1*C1(U)><L,1*C1(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ b
                   @ b'
                   @ c
                   @ c'
                   @ p
                   @ p'
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: GHC.Num.Num b')
                   (w3 :: GHC.Classes.Ord b')
                   (w4 :: [c] -> [c'])
                   (w5 :: MusiCompoNator.Core.Sequence p
                          -> MusiCompoNator.Core.Sequence p')
                   (w6 :: MusiCompoNator.Core.Rhythm b
                          -> MusiCompoNator.Core.Rhythm b')
                   (w7 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$wunPhrase
                        @ b
                        @ c
                        @ p
                        w
                        w1
                        w7 of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   ww4 :: MusiCompoNator.Core.Rhythm b' = w6 ww3
                 } in
                 (# MusiCompoNator.Core.$fMeasurableRhythm_$csignature
                      @ b'
                      w2
                      w3
                      ww4,
                    MusiCompoNator.Composition.phrase5
                      @ c'
                      @ p'
                      @ b'
                      (GHC.Base.map
                         @ ([c'], p', b')
                         @ (MusiCompoNator.Composition.Phrase c' p' b')
                         (MusiCompoNator.Composition.phrase4 @ b' @ p' @ c')
                         (GHC.List.zip3
                            @ [c']
                            @ p'
                            @ b'
                            (GHC.Base.map @ [c] @ [c'] w4 ww1)
                            (w5 ww2)
                            (MusiCompoNator.Core.$w$cunmeasure @ b' w2 ww4))) #) }) -}
c59293bf959e0ea2e97d51268504673c
  $w$cliftC ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    ([c] -> [c'])
    -> MusiCompoNator.Composition.Phrase c p b
    -> (# MusiCompoNator.Core.Signature b,
          MusiCompoNator.Composition.Phrase c' p b #)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,C(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ b
                   @ c
                   @ c'
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: [c] -> [c'])
                   (w3 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$wunPhrase
                        @ b
                        @ c
                        @ p
                        w
                        w1
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.Composition.$wphrase
                   @ b
                   @ c'
                   @ p
                   w
                   w1
                   (GHC.Base.map @ [c] @ [c'] w2 ww1)
                   ww2
                   ww3 }) -}
da19a16819aa3ebd3dd75a1b381a7f3c
  $w$cliftH ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    (MusiCompoNator.Core.Sequence p -> MusiCompoNator.Core.Sequence p')
    -> MusiCompoNator.Composition.Phrase c p b
    -> (# MusiCompoNator.Core.Signature b,
          MusiCompoNator.Composition.Phrase c p' b #)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,1*C1(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ b
                   @ p
                   @ p'
                   @ c
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: MusiCompoNator.Core.Sequence p
                          -> MusiCompoNator.Core.Sequence p')
                   (w3 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$wunPhrase
                        @ b
                        @ c
                        @ p
                        w
                        w1
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.Composition.$wphrase
                   @ b
                   @ c
                   @ p'
                   w
                   w1
                   ww1
                   (w2 ww2)
                   ww3 }) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $w$cmeasure ::
    GHC.Num.Num a =>
    [a]
    -> MusiCompoNator.Composition.Phrase
         c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))>, Inline: [0],
     Unfolding: (\ @ c @ a (w :: GHC.Num.Num a) ->
                 let {
                   f :: a
                   = GHC.Num.fromInteger
                       @ a
                       w
                       MusiCompoNator.Composition.$fMeasurablePhrase2
                 } in
                 let {
                   f1 :: [a] = GHC.Types.: @ a f (GHC.Types.[] @ a)
                 } in
                 let {
                   f2 :: MusiCompoNator.Core.Rhythm a
                   = MusiCompoNator.Core.Measure @ a f1
                 } in
                 let {
                   f3 :: MusiCompoNator.Composition.Phrase
                           c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
                   = MusiCompoNator.Composition.:<:
                       @ c
                       @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                       @ a
                       MusiCompoNator.Composition.$fMeasurablePhrase1
                       f2
                 } in
                 letrec {
                   go :: [a]
                         -> MusiCompoNator.Composition.Phrase
                              c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       [] -> f3
                       : y ys
                       -> MusiCompoNator.Composition.:+:
                            @ c
                            @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                            @ a
                            (MusiCompoNator.Composition.:<:
                               @ c
                               @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                               @ a
                               MusiCompoNator.Composition.$fMeasurablePhrase1
                               (MusiCompoNator.Core.Measure
                                  @ a
                                  (GHC.Types.: @ a y (GHC.Types.[] @ a))))
                            (go ys) }
                 } in
                 \ (x :: [a]) -> go x) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $w$cmeasure1 ::
    GHC.Num.Num a =>
    [a]
    -> MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))>, Inline: [0],
     Unfolding: (\ @ c @ a (w :: GHC.Num.Num a) ->
                 let {
                   f :: a
                   = GHC.Num.fromInteger
                       @ a
                       w
                       MusiCompoNator.Composition.$fMeasurablePhrase2
                 } in
                 let {
                   f1 :: [a] = GHC.Types.: @ a f (GHC.Types.[] @ a)
                 } in
                 let {
                   f2 :: MusiCompoNator.Core.Rhythm a
                   = MusiCompoNator.Core.Measure @ a f1
                 } in
                 let {
                   f3 :: MusiCompoNator.Composition.Phrase
                           c MusiCompoNator.Composition.Prim a
                   = MusiCompoNator.Composition.:<:
                       @ c
                       @ MusiCompoNator.Composition.Prim
                       @ a
                       MusiCompoNator.Composition.silence
                       f2
                 } in
                 letrec {
                   go :: [a]
                         -> MusiCompoNator.Composition.Phrase
                              c MusiCompoNator.Composition.Prim a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       [] -> f3
                       : y ys
                       -> MusiCompoNator.Composition.:+:
                            @ c
                            @ MusiCompoNator.Composition.Prim
                            @ a
                            (MusiCompoNator.Composition.:<:
                               @ c
                               @ MusiCompoNator.Composition.Prim
                               @ a
                               MusiCompoNator.Composition.silence
                               (MusiCompoNator.Core.Measure
                                  @ a
                                  (GHC.Types.: @ a y (GHC.Types.[] @ a))))
                            (go ys) }
                 } in
                 \ (x :: [a]) -> go x) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $w$cshowsPrec ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show p) =>
    GHC.Prim.Int#
    -> MusiCompoNator.Composition.Phrase c p b -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(A,A,C(C(U)))><L,U(A,C(U),C(C(U)))><L,U(A,A,C(C(U)))><S,U><S,1*U>,
     Inline: [0] -}
607c589279cc605df2d0eb1ed6ab75c0
  $w$sliftL ::
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> MusiCompoNator.Composition.CPhrase p MusiCompoNator.Core.Beat
    -> (# MusiCompoNator.Core.Signature MusiCompoNator.Core.Beat,
          MusiCompoNator.Composition.Phrase
            MusiCompoNator.Composition.PhraseControl
            p
            MusiCompoNator.Core.Beat #)
  {- Arity: 2, Strictness: <L,1*C1(U)><L,1*U>, Inline: [0],
     Unfolding: (\ @ p
                   (w :: [GHC.Types.Int] -> [GHC.Types.Int])
                   (w1 :: MusiCompoNator.Composition.CPhrase
                            p MusiCompoNator.Core.Beat) ->
                 let {
                   ds :: ([[MusiCompoNator.Composition.PhraseControl]], [p],
                          [MusiCompoNator.Core.Beat])
                   = case MusiCompoNator.Composition.$w$sunPhrase
                            @ MusiCompoNator.Composition.PhraseControl
                            @ p
                            w1 of ww { (#,,#) ww1 ww2 ww3 ->
                     let {
                       lvl8 :: [GHC.Types.Int]
                       = w (case GHC.List.$wlenAcc
                                   @ [MusiCompoNator.Composition.PhraseControl]
                                   ww1
                                   0# of ww4 { DEFAULT ->
                            GHC.Enum.eftInt 1# ww4 })
                     } in
                     letrec {
                       go2 :: [([MusiCompoNator.Composition.PhraseControl], p,
                                MusiCompoNator.Core.Beat)]
                              -> [GHC.Types.Int]
                              -> ([[MusiCompoNator.Composition.PhraseControl]], [p],
                                  [MusiCompoNator.Core.Beat])
                         {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                       = \ (ds1 :: [([MusiCompoNator.Composition.PhraseControl], p,
                                     MusiCompoNator.Core.Beat)])
                           (_ys :: [GHC.Types.Int]) ->
                         case ds1 of wild {
                           [] -> MusiCompoNator.Composition.appLast3 @ p
                           : ipv ipv1
                           -> case _ys of wild1 {
                                [] -> MusiCompoNator.Composition.appLast3 @ p
                                : ipv2 ipv3
                                -> let {
                                     r :: ([[MusiCompoNator.Composition.PhraseControl]], [p],
                                           [MusiCompoNator.Core.Beat])
                                     = go2 ipv1 ipv3
                                   } in
                                   letrec {
                                     go :: [GHC.Types.Int]
                                           -> ([[MusiCompoNator.Composition.PhraseControl]], [p],
                                               [MusiCompoNator.Core.Beat])
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [GHC.Types.Int]) ->
                                       case ds2 of wild2 {
                                         [] -> r
                                         : y ys
                                         -> case ipv2 of wild3 { GHC.Types.I# x ->
                                            case y of wild4 { GHC.Types.I# y1 ->
                                            let {
                                              ds3 :: ([[MusiCompoNator.Composition.PhraseControl]],
                                                      [p], [MusiCompoNator.Core.Beat])
                                              = go ys
                                            } in
                                            case GHC.Prim.==# x y1 of lwild {
                                              DEFAULT -> ds3
                                              1#
                                              -> case ipv of wild5 { (,,) a1 b1 c1 ->
                                                 (GHC.Types.:
                                                    @ [MusiCompoNator.Composition.PhraseControl]
                                                    a1
                                                    (case ds3 of wild6 { (,,) as bs cs -> as }),
                                                  GHC.Types.:
                                                    @ p
                                                    b1
                                                    (case ds3 of wild6 { (,,) as bs cs -> bs }),
                                                  GHC.Types.:
                                                    @ MusiCompoNator.Core.Beat
                                                    c1
                                                    (case ds3 of wild6 { (,,) as bs cs ->
                                                     cs })) } } } } }
                                   } in
                                   go lvl8 } }
                     } in
                     go2
                       (GHC.List.zip3
                          @ [MusiCompoNator.Composition.PhraseControl]
                          @ p
                          @ MusiCompoNator.Core.Beat
                          ww1
                          ww2
                          (MusiCompoNator.Core.$w$cunmeasure
                             @ MusiCompoNator.Core.Beat
                             GHC.Real.$fFractionalRatio_$s$fNumRatio
                             ww3))
                       MusiCompoNator.Composition.appLast2 }
                 } in
                 MusiCompoNator.Composition.$w$sphrase
                   @ MusiCompoNator.Composition.PhraseControl
                   @ p
                   (case ds of wild { (,,) c' p' b' -> c' })
                   (case ds of wild { (,,) c' p' b' -> p' })
                   (MusiCompoNator.Core.Measure
                      @ MusiCompoNator.Core.Beat
                      (case ds of wild { (,,) c' p' b' -> b' }))) -}
8edba9ada2f92dce70f8e036f784e9fd
  $w$sphrase ::
    [[c]]
    -> MusiCompoNator.Core.Sequence p
    -> MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
    -> (# MusiCompoNator.Core.Signature MusiCompoNator.Core.Beat,
          MusiCompoNator.Composition.Phrase c p MusiCompoNator.Core.Beat #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ @ c
                   @ p
                   (ww :: [[c]])
                   (ww1 :: MusiCompoNator.Core.Sequence p)
                   (ww2 :: MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat) ->
                 (# MusiCompoNator.Composition.phrase3 ww2,
                    MusiCompoNator.Composition.phrase2
                      @ c
                      @ p
                      (GHC.Base.map
                         @ ([c], p, MusiCompoNator.Core.Beat)
                         @ (MusiCompoNator.Composition.Phrase c p MusiCompoNator.Core.Beat)
                         (MusiCompoNator.Composition.phrase1 @ p @ c)
                         (GHC.List.zip3
                            @ [c]
                            @ p
                            @ MusiCompoNator.Core.Beat
                            ww
                            ww1
                            (MusiCompoNator.Core.$w$cunmeasure
                               @ MusiCompoNator.Core.Beat
                               GHC.Real.$fFractionalRatio_$s$fNumRatio
                               ww2))) #)) -}
925f260daaacd55e625d4c3695dfc1ab
  $w$sunPhrase ::
    MusiCompoNator.Composition.Phrase c p MusiCompoNator.Core.Beat
    -> (# [[c]], MusiCompoNator.Core.Sequence p,
          MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
793427fe3648e604add4b2fa7f7d0917
  $wappLast ::
    MusiCompoNator.Composition.PhraseControl
    -> MusiCompoNator.Composition.Phrase1
    -> (# MusiCompoNator.Core.Signature MusiCompoNator.Core.Beat,
          MusiCompoNator.Composition.Phrase
            MusiCompoNator.Composition.PhraseControl
            MusiCompoNator.Composition.Prim
            MusiCompoNator.Core.Beat #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: MusiCompoNator.Composition.PhraseControl)
                   (w1 :: MusiCompoNator.Composition.Phrase1) ->
                 (# MusiCompoNator.Composition.phrase3
                      (case MusiCompoNator.Composition.$w$sunPhrase
                              @ MusiCompoNator.Composition.PhraseControl
                              @ MusiCompoNator.Composition.Prim
                              w1 of ww { (#,,#) ww1 ww2 ww3 ->
                       ww3 }),
                    MusiCompoNator.Composition.:+:
                      @ MusiCompoNator.Composition.PhraseControl
                      @ MusiCompoNator.Composition.Prim
                      @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                      (case MusiCompoNator.Composition.$w$sliftL
                              @ MusiCompoNator.Composition.Prim
                              (GHC.List.init @ GHC.Types.Int)
                              w1 of ww { (#,#) ww1 ww2 ->
                       MusiCompoNator.Composition.Sig
                         @ MusiCompoNator.Composition.PhraseControl
                         @ MusiCompoNator.Composition.Prim
                         @ MusiCompoNator.Core.Beat
                         ww1
                         ww2 })
                      (case MusiCompoNator.Composition.$w$sliftL
                              @ MusiCompoNator.Composition.Prim
                              MusiCompoNator.Composition.appLast1
                              w1 of ww { (#,#) ww1 ww2 ->
                       case MusiCompoNator.Composition.$w$sunPhrase
                              @ MusiCompoNator.Composition.PhraseControl
                              @ MusiCompoNator.Composition.Prim
                              (MusiCompoNator.Composition.Sig
                                 @ MusiCompoNator.Composition.PhraseControl
                                 @ MusiCompoNator.Composition.Prim
                                 @ MusiCompoNator.Core.Beat
                                 ww1
                                 ww2) of ww3 { (#,,#) ww4 ww5 ww6 ->
                       MusiCompoNator.Composition.Sig
                         @ MusiCompoNator.Composition.PhraseControl
                         @ MusiCompoNator.Composition.Prim
                         @ MusiCompoNator.Core.Beat
                         (MusiCompoNator.Composition.phrase3 ww6)
                         (MusiCompoNator.Composition.phrase2
                            @ MusiCompoNator.Composition.PhraseControl
                            @ MusiCompoNator.Composition.Prim
                            (GHC.Base.map
                               @ ([MusiCompoNator.Composition.PhraseControl],
                                  MusiCompoNator.Composition.Prim, MusiCompoNator.Core.Beat)
                               @ (MusiCompoNator.Composition.Phrase
                                    MusiCompoNator.Composition.PhraseControl
                                    MusiCompoNator.Composition.Prim
                                    MusiCompoNator.Core.Beat)
                               (MusiCompoNator.Composition.phrase1
                                  @ MusiCompoNator.Composition.Prim
                                  @ MusiCompoNator.Composition.PhraseControl)
                               (GHC.List.zip3
                                  @ [MusiCompoNator.Composition.PhraseControl]
                                  @ MusiCompoNator.Composition.Prim
                                  @ MusiCompoNator.Core.Beat
                                  (GHC.Base.map
                                     @ [MusiCompoNator.Composition.PhraseControl]
                                     @ [MusiCompoNator.Composition.PhraseControl]
                                     (GHC.Types.: @ MusiCompoNator.Composition.PhraseControl w)
                                     ww4)
                                  ww5
                                  (MusiCompoNator.Core.$w$cunmeasure
                                     @ MusiCompoNator.Core.Beat
                                     GHC.Real.$fFractionalRatio_$s$fNumRatio
                                     ww6)))) } }) #)) -}
bbc7887c75ae20fbb4210576161d5844
  $wgo ::
    [MusiCompoNator.Core.Beat]
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0] -}
94376f04c0f60b319274a6e3e12ffbe6
  $wliftL ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> MusiCompoNator.Composition.CPhrase p b
    -> (# MusiCompoNator.Core.Signature b,
          MusiCompoNator.Composition.Phrase
            MusiCompoNator.Composition.PhraseControl p b #)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,1*C1(U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ b
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: [GHC.Types.Int] -> [GHC.Types.Int])
                   (w3 :: MusiCompoNator.Composition.CPhrase p b) ->
                 let {
                   ds :: ([[MusiCompoNator.Composition.PhraseControl]], [p], [b])
                   = case MusiCompoNator.Composition.$wunPhrase
                            @ b
                            @ MusiCompoNator.Composition.PhraseControl
                            @ p
                            w
                            w1
                            w3 of ww { (#,,#) ww1 ww2 ww3 ->
                     let {
                       lvl8 :: [GHC.Types.Int]
                       = w2
                           (case GHC.List.$wlenAcc
                                   @ [MusiCompoNator.Composition.PhraseControl]
                                   ww1
                                   0# of ww4 { DEFAULT ->
                            GHC.Enum.eftInt 1# ww4 })
                     } in
                     letrec {
                       go2 :: [([MusiCompoNator.Composition.PhraseControl], p, b)]
                              -> [GHC.Types.Int]
                              -> ([[MusiCompoNator.Composition.PhraseControl]], [p], [b])
                         {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                       = \ (ds1 :: [([MusiCompoNator.Composition.PhraseControl], p, b)])
                           (_ys :: [GHC.Types.Int]) ->
                         case ds1 of wild {
                           [] -> MusiCompoNator.Composition.liftL1 @ b @ p
                           : ipv ipv1
                           -> case _ys of wild1 {
                                [] -> MusiCompoNator.Composition.liftL1 @ b @ p
                                : ipv2 ipv3
                                -> let {
                                     r :: ([[MusiCompoNator.Composition.PhraseControl]], [p], [b])
                                     = go2 ipv1 ipv3
                                   } in
                                   letrec {
                                     go :: [GHC.Types.Int]
                                           -> ([[MusiCompoNator.Composition.PhraseControl]], [p],
                                               [b])
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [GHC.Types.Int]) ->
                                       case ds2 of wild2 {
                                         [] -> r
                                         : y ys
                                         -> case ipv2 of wild3 { GHC.Types.I# x ->
                                            case y of wild4 { GHC.Types.I# y1 ->
                                            let {
                                              ds3 :: ([[MusiCompoNator.Composition.PhraseControl]],
                                                      [p], [b])
                                              = go ys
                                            } in
                                            case GHC.Prim.==# x y1 of lwild {
                                              DEFAULT -> ds3
                                              1#
                                              -> case ipv of wild5 { (,,) a1 b1 c1 ->
                                                 (GHC.Types.:
                                                    @ [MusiCompoNator.Composition.PhraseControl]
                                                    a1
                                                    (case ds3 of wild6 { (,,) as bs cs -> as }),
                                                  GHC.Types.:
                                                    @ p
                                                    b1
                                                    (case ds3 of wild6 { (,,) as bs cs -> bs }),
                                                  GHC.Types.:
                                                    @ b
                                                    c1
                                                    (case ds3 of wild6 { (,,) as bs cs ->
                                                     cs })) } } } } }
                                   } in
                                   go lvl8 } }
                     } in
                     go2
                       (GHC.List.zip3
                          @ [MusiCompoNator.Composition.PhraseControl]
                          @ p
                          @ b
                          ww1
                          ww2
                          (MusiCompoNator.Core.$w$cunmeasure @ b w ww3))
                       MusiCompoNator.Composition.appLast2 }
                 } in
                 MusiCompoNator.Composition.$wphrase
                   @ b
                   @ MusiCompoNator.Composition.PhraseControl
                   @ p
                   w
                   w1
                   (case ds of wild { (,,) c' p' b' -> c' })
                   (case ds of wild { (,,) c' p' b' -> p' })
                   (MusiCompoNator.Core.Measure
                      @ b
                      (case ds of wild { (,,) c' p' b' -> b' }))) -}
fbaf55db3cbc0efb140dea601d9b944c
  $wmoreV ::
    [MusiCompoNator.Composition.Phrase1]
    -> MusiCompoNator.Composition.VoiceState
    -> (# (), MusiCompoNator.Composition.VoiceState #)
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U(U,U),U)>, Inline: [0] -}
77cfd0d76fe7458f6aec4112d0e25947
  $wphrase ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    [[c]]
    -> MusiCompoNator.Core.Sequence p
    -> MusiCompoNator.Core.Rhythm b
    -> (# MusiCompoNator.Core.Signature b,
          MusiCompoNator.Composition.Phrase c p b #)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ b
                   @ c
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (ww :: [[c]])
                   (ww1 :: MusiCompoNator.Core.Sequence p)
                   (ww2 :: MusiCompoNator.Core.Rhythm b) ->
                 (# MusiCompoNator.Core.$fMeasurableRhythm_$csignature @ b w w1 ww2,
                    MusiCompoNator.Composition.phrase5
                      @ c
                      @ p
                      @ b
                      (GHC.Base.map
                         @ ([c], p, b)
                         @ (MusiCompoNator.Composition.Phrase c p b)
                         (MusiCompoNator.Composition.phrase4 @ b @ p @ c)
                         (GHC.List.zip3
                            @ [c]
                            @ p
                            @ b
                            ww
                            ww1
                            (MusiCompoNator.Core.$w$cunmeasure @ b w ww2))) #)) -}
66b270b2c6be57a3a303bcfc6ebadd94
  $wrunVoice ::
    MusiCompoNator.Composition.Voice a
    -> MusiCompoNator.Core.Scale
    -> (# a, [MusiCompoNator.Composition.Phrase2],
          MusiCompoNator.Core.Beat #)
  {- Arity: 2, Strictness: <L,1*C1(U(1*U,1*U(1*U,1*U,A)))><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: MusiCompoNator.Composition.Voice a)
                   (w1 :: MusiCompoNator.Core.Scale) ->
                 let {
                   ds :: Data.Functor.Identity.Identity
                           (a, MusiCompoNator.Composition.VoiceState)
                   = w `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <MusiCompoNator.Composition.VoiceState>_N
                          <Data.Functor.Identity.Identity>_R
                          <a>_N)
                       (MusiCompoNator.Composition.VS
                          (GHC.Types.[] @ MusiCompoNator.Composition.Phrase1)
                          MusiCompoNator.Composition.emptyVS1
                          w1)
                 } in
                 let {
                   vs :: MusiCompoNator.Composition.VoiceState
                   = case ds
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <(a,
                                 MusiCompoNator.Composition.VoiceState)>_R) of wild { (,) a1 vs1 ->
                     vs1 }
                 } in
                 (# case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a,
                                MusiCompoNator.Composition.VoiceState)>_R) of wild { (,) a1 vs1 ->
                    a1 },
                    case vs of wild { MusiCompoNator.Composition.VS ds1 ds2 ds3 ->
                    GHC.Base.map
                      @ (MusiCompoNator.Composition.Phrase
                           MusiCompoNator.Composition.PhraseControl
                           MusiCompoNator.Composition.Prim
                           MusiCompoNator.Core.Beat)
                      @ (MusiCompoNator.Composition.Phrase
                           MusiCompoNator.Composition.PhraseControl
                           (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                           MusiCompoNator.Core.Beat)
                      (\ (x :: MusiCompoNator.Composition.Phrase
                                 MusiCompoNator.Composition.PhraseControl
                                 MusiCompoNator.Composition.Prim
                                 MusiCompoNator.Core.Beat) ->
                       case MusiCompoNator.Composition.$w$sunPhrase
                              @ MusiCompoNator.Composition.PhraseControl
                              @ MusiCompoNator.Composition.Prim
                              x of ww { (#,,#) ww1 ww2 ww3 ->
                       MusiCompoNator.Composition.Sig
                         @ MusiCompoNator.Composition.PhraseControl
                         @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                         @ MusiCompoNator.Core.Beat
                         (MusiCompoNator.Composition.phrase3 ww3)
                         (MusiCompoNator.Composition.phrase2
                            @ MusiCompoNator.Composition.PhraseControl
                            @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                            (GHC.Base.map
                               @ ([MusiCompoNator.Composition.PhraseControl],
                                  MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch,
                                  MusiCompoNator.Core.Beat)
                               @ (MusiCompoNator.Composition.Phrase
                                    MusiCompoNator.Composition.PhraseControl
                                    (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                                    MusiCompoNator.Core.Beat)
                               (MusiCompoNator.Composition.phrase1
                                  @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                                  @ MusiCompoNator.Composition.PhraseControl)
                               (GHC.List.zip3
                                  @ [MusiCompoNator.Composition.PhraseControl]
                                  @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                                  @ MusiCompoNator.Core.Beat
                                  ww1
                                  (letrec {
                                     go :: [MusiCompoNator.Composition.Prim]
                                           -> [MusiCompoNator.Core.Simultanity
                                                 MusiCompoNator.Core.Pitch]
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds4 :: [MusiCompoNator.Composition.Prim]) ->
                                       case ds4 of wild1 {
                                         []
                                         -> GHC.Types.[]
                                              @ (MusiCompoNator.Core.Simultanity
                                                   MusiCompoNator.Core.Pitch)
                                         : y ys
                                         -> GHC.Types.:
                                              @ (MusiCompoNator.Core.Simultanity
                                                   MusiCompoNator.Core.Pitch)
                                              (MusiCompoNator.Composition.derive_f w1 y)
                                              (go ys) }
                                   } in
                                   go ww2)
                                  (MusiCompoNator.Core.$w$cunmeasure
                                     @ MusiCompoNator.Core.Beat
                                     GHC.Real.$fFractionalRatio_$s$fNumRatio
                                     ww3)))) })
                      ds1 },
                    case vs of wild { MusiCompoNator.Composition.VS ds1 ds2 ds3 ->
                    ds2 } #)) -}
c470b6a74bad05ab80b85df7d1a874fb
  $wsingleV ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.VoiceState
    -> (# (), MusiCompoNator.Composition.VoiceState #)
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U(U,U),U)>, Inline: [0],
     Unfolding: (\ (w :: MusiCompoNator.Composition.Phrase1)
                   (w1 :: MusiCompoNator.Composition.VoiceState) ->
                 (# GHC.Tuple.(),
                    case w1 of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                    MusiCompoNator.Composition.VS
                      (GHC.Types.:
                         @ (MusiCompoNator.Composition.Phrase
                              MusiCompoNator.Composition.PhraseControl
                              MusiCompoNator.Composition.Prim
                              MusiCompoNator.Core.Beat)
                         (MusiCompoNator.Composition.:+:
                            @ MusiCompoNator.Composition.PhraseControl
                            @ MusiCompoNator.Composition.Prim
                            @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                            (MusiCompoNator.Composition.:<:
                               @ MusiCompoNator.Composition.PhraseControl
                               @ MusiCompoNator.Composition.Prim
                               @ MusiCompoNator.Core.Beat
                               MusiCompoNator.Composition.silence
                               (MusiCompoNator.Core.Measure
                                  @ MusiCompoNator.Core.Beat
                                  (GHC.Types.:
                                     @ MusiCompoNator.Core.Beat
                                     ds1
                                     (GHC.Types.[] @ MusiCompoNator.Core.Beat))))
                            (case MusiCompoNator.Composition.$w$sunPhrase
                                    @ MusiCompoNator.Composition.PhraseControl
                                    @ MusiCompoNator.Composition.Prim
                                    w of ww { (#,,#) ww1 ww2 ww3 ->
                             MusiCompoNator.Composition.Sig
                               @ MusiCompoNator.Composition.PhraseControl
                               @ MusiCompoNator.Composition.Prim
                               @ MusiCompoNator.Core.Beat
                               (MusiCompoNator.Composition.phrase3 ww3)
                               (MusiCompoNator.Composition.phrase2
                                  @ MusiCompoNator.Composition.PhraseControl
                                  @ MusiCompoNator.Composition.Prim
                                  (GHC.Base.map
                                     @ ([MusiCompoNator.Composition.PhraseControl],
                                        MusiCompoNator.Composition.Prim, MusiCompoNator.Core.Beat)
                                     @ (MusiCompoNator.Composition.Phrase
                                          MusiCompoNator.Composition.PhraseControl
                                          MusiCompoNator.Composition.Prim
                                          MusiCompoNator.Core.Beat)
                                     (MusiCompoNator.Composition.phrase1
                                        @ MusiCompoNator.Composition.Prim
                                        @ MusiCompoNator.Composition.PhraseControl)
                                     (GHC.List.zip3
                                        @ [MusiCompoNator.Composition.PhraseControl]
                                        @ MusiCompoNator.Composition.Prim
                                        @ MusiCompoNator.Core.Beat
                                        ww1
                                        (GHC.Base.map
                                           @ MusiCompoNator.Composition.Prim
                                           @ MusiCompoNator.Composition.Prim
                                           (MusiCompoNator.Composition.Mode
                                              (\ (ds3 :: MusiCompoNator.Core.Scale) -> ds2))
                                           ww2)
                                        (MusiCompoNator.Core.$w$cunmeasure
                                           @ MusiCompoNator.Core.Beat
                                           GHC.Real.$fFractionalRatio_$s$fNumRatio
                                           ww3)))) }))
                         ds)
                      (case MusiCompoNator.Composition.$w$sunPhrase
                              @ MusiCompoNator.Composition.PhraseControl
                              @ MusiCompoNator.Composition.Prim
                              w of ww { (#,,#) ww1 ww2 ww3 ->
                       case ds1 of ww4 { GHC.Real.:% ww5 ww6 ->
                       case MusiCompoNator.Composition.$wgo
                              (MusiCompoNator.Core.$w$cunmeasure
                                 @ MusiCompoNator.Core.Beat
                                 GHC.Real.$fFractionalRatio_$s$fNumRatio
                                 ww3)
                              MusiCompoNator.Core.$fMeasurableRhythm2
                              GHC.Real.$fEnumRatio1 of ww7 { (#,#) ww8 ww9 ->
                       case GHC.Real.$w$s$c+ ww5 ww6 ww8 ww9 of ww10 { (#,#) ww11 ww12 ->
                       GHC.Real.:% @ GHC.Integer.Type.Integer ww11 ww12 } } } })
                      ds2 } #)) -}
c81bd200a6b2b4f0be541a3b89d42fa0
  $wstaccato ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.Composition.Phrase1
    -> (# MusiCompoNator.Core.Signature MusiCompoNator.Core.Beat,
          MusiCompoNator.Composition.Phrase
            MusiCompoNator.Composition.PhraseControl
            MusiCompoNator.Composition.Prim
            MusiCompoNator.Core.Beat #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: MusiCompoNator.Composition.Phrase1) ->
                 case MusiCompoNator.Composition.$w$sunPhrase
                        @ MusiCompoNator.Composition.PhraseControl
                        @ MusiCompoNator.Composition.Prim
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.Composition.$w$sphrase
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   (GHC.Base.map
                      @ [MusiCompoNator.Composition.PhraseControl]
                      @ [MusiCompoNator.Composition.PhraseControl]
                      (GHC.Types.:
                         @ MusiCompoNator.Composition.PhraseControl
                         (MusiCompoNator.Composition.Staccato w))
                      ww1)
                   ww2
                   ww3 }) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  $wunPhrase ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    MusiCompoNator.Composition.Phrase c p b
    -> (# [[c]], MusiCompoNator.Core.Sequence p,
          MusiCompoNator.Core.Rhythm b #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
dc29b536637f26a1731cab00a661203c
  $wvolume ::
    GHC.Real.Rational
    -> MusiCompoNator.Composition.Phrase1
    -> (# MusiCompoNator.Core.Signature MusiCompoNator.Core.Beat,
          MusiCompoNator.Composition.Phrase
            MusiCompoNator.Composition.PhraseControl
            MusiCompoNator.Composition.Prim
            MusiCompoNator.Core.Beat #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Real.Rational)
                   (w1 :: MusiCompoNator.Composition.Phrase1) ->
                 case MusiCompoNator.Composition.$w$sunPhrase
                        @ MusiCompoNator.Composition.PhraseControl
                        @ MusiCompoNator.Composition.Prim
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.Composition.$w$sphrase
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   (GHC.Base.map
                      @ [MusiCompoNator.Composition.PhraseControl]
                      @ [MusiCompoNator.Composition.PhraseControl]
                      (GHC.Types.:
                         @ MusiCompoNator.Composition.PhraseControl
                         (MusiCompoNator.Composition.Volume w))
                      ww1)
                   ww2
                   ww3 }) -}
d441760498abc12e92db9e1fedabae37
  type CPhrase p b =
    MusiCompoNator.Composition.Phrase
      MusiCompoNator.Composition.PhraseControl p b
6afec63a905700b2e62f779752b8baa4
  class ControlPitchBeatTrifunctor (f :: * -> * -> * -> *) where
    lift3 :: (GHC.Num.Num b, GHC.Classes.Ord b, GHC.Num.Num b',
              GHC.Classes.Ord b') =>
             ([c] -> [c'])
             -> (MusiCompoNator.Core.Sequence p
                 -> MusiCompoNator.Core.Sequence p')
             -> (MusiCompoNator.Core.Rhythm b -> MusiCompoNator.Core.Rhythm b')
             -> f c p b
             -> f c' p' b'
    liftC :: (GHC.Num.Num b, GHC.Classes.Ord b) =>
             ([c] -> [c']) -> f c p b -> f c' p b
    liftH :: (GHC.Num.Num b, GHC.Classes.Ord b) =>
             (MusiCompoNator.Core.Sequence p -> MusiCompoNator.Core.Sequence p')
             -> f c p b -> f c p' b
    liftR :: (GHC.Num.Num b, GHC.Classes.Ord b, GHC.Num.Num b',
              GHC.Classes.Ord b') =>
             (MusiCompoNator.Core.Rhythm b -> MusiCompoNator.Core.Rhythm b')
             -> f c p b -> f c p b'
    {-# MINIMAL lift3 #-}
e4ddd7b28b943d64abf3f9064ba30a6d
  data Phrase c p b
    = Ctrl [c] (MusiCompoNator.Composition.Phrase c p b)
    | Sig (MusiCompoNator.Core.Signature b)
          (MusiCompoNator.Composition.Phrase c p b)
    | (MusiCompoNator.Composition.Phrase c p b)
      :+:
      (MusiCompoNator.Composition.Phrase c p b)
    | (MusiCompoNator.Core.Sequence p)
      :<:
      (MusiCompoNator.Core.Rhythm b)
881db1ad4527be5f4774528521acd84b
  type Phrase1 =
    MusiCompoNator.Composition.CPhrase
      MusiCompoNator.Composition.Prim MusiCompoNator.Core.Beat
124d3f3727e1ad8ad5eb8f9dc96630a7
  type Phrase2 =
    MusiCompoNator.Composition.CPhrase
      (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
      MusiCompoNator.Core.Beat
85fae9d2688e4ec7e08e97002afb85d3
  data PhraseControl
    = BendNext
    | TieNext
    | Volume GHC.Real.Rational
    | Legato
    | Staccato MusiCompoNator.Core.Beat
ab85f32b6a2b21606c23dbd168820208
  data Prim
    = Voicing [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]
    | Mode (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale)
           MusiCompoNator.Composition.Prim
bd57b41b7e9e1a84e65bdc037451b8de
  type Voice =
    Control.Monad.Trans.State.Lazy.State
      MusiCompoNator.Composition.VoiceState
    :: * -> *
bd57b41b7e9e1a84e65bdc037451b8de
  data VoiceState
    = VS {phrases :: [MusiCompoNator.Composition.Phrase1],
          cursor :: MusiCompoNator.Core.Beat,
          scale :: MusiCompoNator.Core.Scale}
38cebc0261e83b19843c4014a90df2e8
  absPitch ::
    GHC.Real.Rational
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (q :: GHC.Real.Rational) ->
                 GHC.Types.:
                   @ MusiCompoNator.Composition.Prim
                   (MusiCompoNator.Composition.Voicing
                      (GHC.Types.:
                         @ (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch)
                         (\ (ds :: MusiCompoNator.Core.Scale) -> q)
                         (GHC.Types.[]
                            @ (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch))))
                   (GHC.Types.[] @ MusiCompoNator.Composition.Prim)) -}
e75bbbef0ae644fd0f73db91a5f0d55c
  appLast ::
    MusiCompoNator.Composition.PhraseControl
    -> MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
  {- Arity: 2, Strictness: <L,U><L,U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MusiCompoNator.Composition.PhraseControl)
                   (w1 :: MusiCompoNator.Composition.Phrase1) ->
                 case MusiCompoNator.Composition.$wappLast
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Core.Beat
                   ww1
                   ww2 }) -}
05c8ebe2f3e4e98b5c4774d2925e8120
  appLast1 :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Types.Int]) ->
                 GHC.Types.:
                   @ GHC.Types.Int
                   (GHC.List.last @ GHC.Types.Int x)
                   (GHC.Types.[] @ GHC.Types.Int)) -}
6f38b78b7ac8081116bf4bfa57e027f1
  appLast2 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 1# 9223372036854775807#) -}
eb1a06a86e3aa73abf9131717617f81a
  appLast3 ::
    ([[MusiCompoNator.Composition.PhraseControl]], [p],
     [MusiCompoNator.Core.Beat])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ p ->
                 (GHC.Types.[] @ [MusiCompoNator.Composition.PhraseControl],
                  GHC.Types.[] @ p, GHC.Types.[] @ MusiCompoNator.Core.Beat)) -}
e32d07cf4ae74a284513c6dd73372359
  applyMode ::
    (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale)
    -> MusiCompoNator.Composition.Voice ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.applyMode1
                  `cast`
                (<MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale>_R
                 ->_R (<MusiCompoNator.Composition.VoiceState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((),
                                       MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <MusiCompoNator.Composition.VoiceState>_N
                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                              <()>_N)) -}
92b7f55dc8a259f1af676c8830b1a7ab
  applyMode1 ::
    (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale)
    -> MusiCompoNator.Composition.VoiceState
    -> ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,1*U(U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (f :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale)
                   (s1 :: MusiCompoNator.Composition.VoiceState) ->
                 (GHC.Tuple.(),
                  case s1 of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  MusiCompoNator.Composition.VS ds ds1 (f ds2) })) -}
beb12f1c85458ea859f156dda484229d
  arpeggio ::
    GHC.Types.Int
    -> [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 2, Strictness: <L,U(U)><S,1*U>,
     Unfolding: (\ (i :: GHC.Types.Int)
                   (fs :: [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]) ->
                 GHC.Base.map
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Composition.Prim
                   (MusiCompoNator.Composition.Mode (MusiCompoNator.Core.step i))
                   (MusiCompoNator.Composition.line fs)) -}
960d4fddc026050f24b17dd7943c014f
  bendInto ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
  {- Arity: 2, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (2, True, False)
                (\ (ph1 :: MusiCompoNator.Composition.Phrase1)
                   (ph2 :: MusiCompoNator.Composition.Phrase1) ->
                 MusiCompoNator.Composition.:+:
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                   (MusiCompoNator.Composition.appLast
                      MusiCompoNator.Composition.BendNext
                      ph1)
                   ph2) -}
72d3bfe4678b089e8f15005721a48650
  chord ::
    GHC.Types.Int
    -> [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 2, Strictness: <L,U(U)><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int)
                   (eta :: [MusiCompoNator.Core.Scale
                            -> MusiCompoNator.Core.Pitch]) ->
                 GHC.Types.:
                   @ MusiCompoNator.Composition.Prim
                   (MusiCompoNator.Composition.Mode
                      (MusiCompoNator.Core.step x)
                      (MusiCompoNator.Composition.Voicing eta))
                   (GHC.Types.[] @ MusiCompoNator.Composition.Prim)) -}
bd57b41b7e9e1a84e65bdc037451b8de
  cursor ::
    MusiCompoNator.Composition.VoiceState -> MusiCompoNator.Core.Beat
  RecSel Left MusiCompoNator.Composition.VoiceState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.Composition.VoiceState) ->
                 case ds of wild { MusiCompoNator.Composition.VS ds1 ds2 ds3 ->
                 ds2 }) -}
6376450fffd63578e95d887d4be3bd16
  derive ::
    MusiCompoNator.Core.Scale
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
    -> MusiCompoNator.Core.Sequence
         (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (s :: MusiCompoNator.Core.Scale)
                   (eta :: [MusiCompoNator.Composition.Prim]) ->
                 GHC.Base.build
                   @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                   (\ @ b1
                      (c :: MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch
                            -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ MusiCompoNator.Composition.Prim
                      @ b1
                      (GHC.Base.mapFB
                         @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                         @ b1
                         @ MusiCompoNator.Composition.Prim
                         c
                         (MusiCompoNator.Composition.derive_f s))
                      n
                      eta)) -}
eb0aeb3d4c1951cd7d1891814518c0ee
  derive_f ::
    MusiCompoNator.Core.Scale
    -> MusiCompoNator.Composition.Prim
    -> MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
8ccdae3b30aa1d9e22594c2c1fe4c120
  emptyVS ::
    MusiCompoNator.Core.Scale -> MusiCompoNator.Composition.VoiceState
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: MusiCompoNator.Core.Scale) ->
                 MusiCompoNator.Composition.VS
                   (GHC.Types.[] @ MusiCompoNator.Composition.Phrase1)
                   MusiCompoNator.Composition.emptyVS1
                   s) -}
f9419f7f341cdfb80ddd54a1c1d0c13c
  emptyVS1 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   MusiCompoNator.Composition.$fMeasurablePhrase2
                   GHC.Real.$fEnumRatio1) -}
d53efbe76654f766e482abe748129e3a
  getPhrases ::
    MusiCompoNator.Composition.Voice
      [MusiCompoNator.Composition.Phrase1]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.getPhrases1
                  `cast`
                ((<MusiCompoNator.Composition.VoiceState>_R
                  ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                <([MusiCompoNator.Composition.Phrase1],
                                  MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <MusiCompoNator.Composition.VoiceState>_N
                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                         <[MusiCompoNator.Composition.Phrase1]>_N)) -}
2e27cf76e98f42afda8dc3f5b72ca439
  getPhrases1 ::
    MusiCompoNator.Composition.VoiceState
    -> ([MusiCompoNator.Composition.Phrase1],
        MusiCompoNator.Composition.VoiceState)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: MusiCompoNator.Composition.VoiceState) ->
                 (case s1 of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  ds },
                  s1)) -}
f6938d1a2ce56840ed3af63069306cd0
  getScale ::
    MusiCompoNator.Composition.Voice MusiCompoNator.Core.Scale
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.getScale1
                  `cast`
                ((<MusiCompoNator.Composition.VoiceState>_R
                  ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                <(MusiCompoNator.Core.Scale,
                                  MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <MusiCompoNator.Composition.VoiceState>_N
                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                         <MusiCompoNator.Core.Scale>_N)) -}
1d3313c1b2fee96297cba5f798d91f63
  getScale1 ::
    MusiCompoNator.Composition.VoiceState
    -> (MusiCompoNator.Core.Scale,
        MusiCompoNator.Composition.VoiceState)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: MusiCompoNator.Composition.VoiceState) ->
                 (case s1 of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  ds2 },
                  s1)) -}
fe09ccc6e68d8c89fdb4238e3dba764f
  getTime ::
    MusiCompoNator.Composition.Voice MusiCompoNator.Core.Beat
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.getTime1
                  `cast`
                ((<MusiCompoNator.Composition.VoiceState>_R
                  ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                <(MusiCompoNator.Core.Beat,
                                  MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <MusiCompoNator.Composition.VoiceState>_N
                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                         <MusiCompoNator.Core.Beat>_N)) -}
575d9fde7f5af20804435e532fa39712
  getTime1 ::
    MusiCompoNator.Composition.VoiceState
    -> (MusiCompoNator.Core.Beat,
        MusiCompoNator.Composition.VoiceState)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: MusiCompoNator.Composition.VoiceState) ->
                 (case s1 of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  ds1 },
                  s1)) -}
3cae06d2cfd71881834aa74bf39503d6
  inKey ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Core.Scale -> MusiCompoNator.Composition.Voice ()
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U,U(U,U),1*U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.inKey1
                  `cast`
                (<MusiCompoNator.Composition.Phrase1>_R
                 ->_R <MusiCompoNator.Core.Scale>_R
                 ->_R (<MusiCompoNator.Composition.VoiceState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((),
                                       MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <MusiCompoNator.Composition.VoiceState>_N
                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                              <()>_N)) -}
ebe4c34451de64daabf87014eb357d3d
  inKey1 ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Core.Scale
    -> MusiCompoNator.Composition.VoiceState
    -> ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U,U(U,U),1*U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (ph :: MusiCompoNator.Composition.Phrase1)
                   (s :: MusiCompoNator.Core.Scale)
                   (s1 :: MusiCompoNator.Composition.VoiceState) ->
                 (GHC.Tuple.(),
                  case MusiCompoNator.Composition.inKey2
                         ph
                         (case s1 of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                          MusiCompoNator.Composition.VS ds ds1 s }) of wild { (,) a1 s' ->
                  case s' of wild1 { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  MusiCompoNator.Composition.VS
                    ds
                    ds1
                    (case s1 of wild2 { MusiCompoNator.Composition.VS ds3 ds4 ds5 ->
                     ds5 }) } })) -}
716d5a134387ab991f8219960f5171d6
  inKey2 ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.VoiceState
    -> ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U(U,U),U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MusiCompoNator.Composition.Phrase1)
                   (w1 :: MusiCompoNator.Composition.VoiceState) ->
                 case MusiCompoNator.Composition.$wsingleV
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
7ba0f18b332254f28dc03dbb133a9597
  legato ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
  {- Arity: 1, Strictness: <S,1*U>m2,
     Unfolding: (\ (x :: MusiCompoNator.Composition.Phrase
                           MusiCompoNator.Composition.PhraseControl
                           MusiCompoNator.Composition.Prim
                           MusiCompoNator.Core.Beat) ->
                 case MusiCompoNator.Composition.$w$sunPhrase
                        @ MusiCompoNator.Composition.PhraseControl
                        @ MusiCompoNator.Composition.Prim
                        x of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.Composition.Sig
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Core.Beat
                   (MusiCompoNator.Composition.phrase3 ww3)
                   (MusiCompoNator.Composition.phrase2
                      @ MusiCompoNator.Composition.PhraseControl
                      @ MusiCompoNator.Composition.Prim
                      (GHC.Base.map
                         @ ([MusiCompoNator.Composition.PhraseControl],
                            MusiCompoNator.Composition.Prim, MusiCompoNator.Core.Beat)
                         @ (MusiCompoNator.Composition.Phrase
                              MusiCompoNator.Composition.PhraseControl
                              MusiCompoNator.Composition.Prim
                              MusiCompoNator.Core.Beat)
                         (MusiCompoNator.Composition.phrase1
                            @ MusiCompoNator.Composition.Prim
                            @ MusiCompoNator.Composition.PhraseControl)
                         (GHC.List.zip3
                            @ [MusiCompoNator.Composition.PhraseControl]
                            @ MusiCompoNator.Composition.Prim
                            @ MusiCompoNator.Core.Beat
                            (MusiCompoNator.Composition.legato_go ww1)
                            ww2
                            (MusiCompoNator.Core.$w$cunmeasure
                               @ MusiCompoNator.Core.Beat
                               GHC.Real.$fFractionalRatio_$s$fNumRatio
                               ww3)))) }) -}
cb3fab396af5efc64bfe2bf1518d833b
  legato_go ::
    [[MusiCompoNator.Composition.PhraseControl]]
    -> [[MusiCompoNator.Composition.PhraseControl]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
025f34410dfda6b8174c9f7846bb3f54
  liftL ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> MusiCompoNator.Composition.CPhrase p b
    -> MusiCompoNator.Composition.CPhrase p b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,1*C1(U)><L,1*U>m2,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: [GHC.Types.Int] -> [GHC.Types.Int])
                   (w3 :: MusiCompoNator.Composition.CPhrase p b) ->
                 case MusiCompoNator.Composition.$wliftL
                        @ b
                        @ p
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig
                   @ MusiCompoNator.Composition.PhraseControl
                   @ p
                   @ b
                   ww1
                   ww2 }) -}
dbf1277d64347a4b05be548b27a45b1e
  liftL1 :: ([[MusiCompoNator.Composition.PhraseControl]], [p], [b])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ b @ p ->
                 (GHC.Types.[] @ [MusiCompoNator.Composition.PhraseControl],
                  GHC.Types.[] @ p, GHC.Types.[] @ b)) -}
37ddf612626b0d973729928293fad300
  line ::
    [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
4fd83c3ed347af5db1c4d94fc3b8c002
  mode ::
    (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale)
    -> [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (f :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale)
                   (fs :: [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]) ->
                 GHC.Types.:
                   @ MusiCompoNator.Composition.Prim
                   (MusiCompoNator.Composition.Mode
                      f
                      (MusiCompoNator.Composition.Voicing fs))
                   (GHC.Types.[] @ MusiCompoNator.Composition.Prim)) -}
c703bccde1b67a0250a3ca4a399352c4
  moreV ::
    [MusiCompoNator.Composition.Phrase1]
    -> MusiCompoNator.Composition.Voice ()
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U(U,U),U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.moreV1
                  `cast`
                (<[MusiCompoNator.Composition.Phrase1]>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <MusiCompoNator.Composition.VoiceState>_N
                               <Data.Functor.Identity.Identity>_R
                               <()>_N)) -}
c6fa78a4e27033859da83670c0949b02
  moreV1 ::
    [MusiCompoNator.Composition.Phrase1]
    -> MusiCompoNator.Composition.VoiceState
    -> Data.Functor.Identity.Identity
         ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U(U,U),U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [MusiCompoNator.Composition.Phrase1])
                   (w1 :: MusiCompoNator.Composition.VoiceState) ->
                 case MusiCompoNator.Composition.$wmoreV
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((), MusiCompoNator.Composition.VoiceState)>_R)) }) -}
7bb8aab0eb40470ef70fd738e0c53001
  note ::
    (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch)
    -> MusiCompoNator.Core.Beat
    -> MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim MusiCompoNator.Core.Beat
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m4,
     Unfolding: InlineRule (2, True, False)
                (\ @ c
                   (f :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch)
                   (b :: MusiCompoNator.Core.Beat) ->
                 MusiCompoNator.Composition.:<:
                   @ c
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Core.Beat
                   (MusiCompoNator.Composition.pitch f)
                   (MusiCompoNator.Core.Measure
                      @ MusiCompoNator.Core.Beat
                      (GHC.Types.:
                         @ MusiCompoNator.Core.Beat
                         b
                         (GHC.Types.[] @ MusiCompoNator.Core.Beat)))) -}
8b133343d3ee1e668ab7d0ef68f5fbc9
  phrase ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    ([[c]], MusiCompoNator.Core.Sequence p,
     MusiCompoNator.Core.Rhythm b)
    -> MusiCompoNator.Composition.Phrase c p b
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><S,1*U(1*U,1*U,U)>m2,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ c
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: ([[c]], MusiCompoNator.Core.Sequence p,
                           MusiCompoNator.Core.Rhythm b)) ->
                 case w2 of ww { (,,) ww1 ww2 ww3 ->
                 MusiCompoNator.Composition.Sig
                   @ c
                   @ p
                   @ b
                   (MusiCompoNator.Core.$fMeasurableRhythm_$csignature @ b w w1 ww3)
                   (MusiCompoNator.Composition.phrase5
                      @ c
                      @ p
                      @ b
                      (GHC.Base.map
                         @ ([c], p, b)
                         @ (MusiCompoNator.Composition.Phrase c p b)
                         (MusiCompoNator.Composition.phrase4 @ b @ p @ c)
                         (GHC.List.zip3
                            @ [c]
                            @ p
                            @ b
                            ww1
                            ww2
                            (MusiCompoNator.Core.$w$cunmeasure @ b w ww3)))) }) -}
6f0215317c29225bac0f97321a47a45d
  phrase1 ::
    ([c], p, MusiCompoNator.Core.Beat)
    -> MusiCompoNator.Composition.Phrase c p MusiCompoNator.Core.Beat
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ @ p @ c (ds :: ([c], p, MusiCompoNator.Core.Beat)) ->
                 case ds of wild { (,,) c1 p1 b ->
                 MusiCompoNator.Composition.Ctrl
                   @ c
                   @ p
                   @ MusiCompoNator.Core.Beat
                   c1
                   (MusiCompoNator.Composition.:<:
                      @ c
                      @ p
                      @ MusiCompoNator.Core.Beat
                      (GHC.Base.$fApplicative[]_$cpure @ p p1)
                      (MusiCompoNator.Core.Measure
                         @ MusiCompoNator.Core.Beat
                         (GHC.Types.:
                            @ MusiCompoNator.Core.Beat
                            b
                            (GHC.Types.[] @ MusiCompoNator.Core.Beat)))) }) -}
bef121a8cf39ee9191b6c1f62995a3b7
  phrase2 ::
    [MusiCompoNator.Composition.Phrase c p MusiCompoNator.Core.Beat]
    -> MusiCompoNator.Composition.Phrase c p MusiCompoNator.Core.Beat
  {- Arity: 1, Strictness: <S,1*U> -}
23e5b0397fbefcfb88c718fd6620db7a
  phrase3 ::
    MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
    -> MusiCompoNator.Core.Signature MusiCompoNator.Core.Beat
  {- Unfolding: (MusiCompoNator.Core.$fMeasurableRhythm_$csignature
                   @ MusiCompoNator.Core.Beat
                   GHC.Real.$fFractionalRatio_$s$fNumRatio
                   GHC.Real.$fOrdRatio_$s$fOrdRatio) -}
a7fc26807434c244159a1dc12e06cc2a
  phrase4 :: ([c], p, b) -> MusiCompoNator.Composition.Phrase c p b
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ @ b @ p @ c (ds :: ([c], p, b)) ->
                 case ds of wild { (,,) c1 p1 b1 ->
                 MusiCompoNator.Composition.Ctrl
                   @ c
                   @ p
                   @ b
                   c1
                   (MusiCompoNator.Composition.:<:
                      @ c
                      @ p
                      @ b
                      (GHC.Base.$fApplicative[]_$cpure @ p p1)
                      (MusiCompoNator.Core.Measure
                         @ b
                         (GHC.Types.: @ b b1 (GHC.Types.[] @ b)))) }) -}
f26c0f1576f4d078d0d65dc6b4a0c1fc
  phrase5 ::
    [MusiCompoNator.Composition.Phrase c p b]
    -> MusiCompoNator.Composition.Phrase c p b
  {- Arity: 1, Strictness: <S,1*U> -}
bd57b41b7e9e1a84e65bdc037451b8de
  phrases ::
    MusiCompoNator.Composition.VoiceState
    -> [MusiCompoNator.Composition.Phrase1]
  RecSel Left MusiCompoNator.Composition.VoiceState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.Composition.VoiceState) ->
                 case ds of wild { MusiCompoNator.Composition.VS ds1 ds2 ds3 ->
                 ds1 }) -}
5f4053371df80f67fe848e6e162220c8
  pitch ::
    (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch)
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (i :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch) ->
                 GHC.Types.:
                   @ MusiCompoNator.Composition.Prim
                   (MusiCompoNator.Composition.Voicing
                      (GHC.Base.$fApplicative[]_$cpure
                         @ (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch)
                         i))
                   (GHC.Types.[] @ MusiCompoNator.Composition.Prim)) -}
935111eb494f6a398caa683dd638f0fd
  putPhrases ::
    [MusiCompoNator.Composition.Phrase1]
    -> MusiCompoNator.Composition.Voice ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(A,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.putPhrases1
                  `cast`
                (<[MusiCompoNator.Composition.Phrase1]>_R
                 ->_R (<MusiCompoNator.Composition.VoiceState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((),
                                       MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <MusiCompoNator.Composition.VoiceState>_N
                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                              <()>_N)) -}
44fef8fd5d05845b8125a852b713e866
  putPhrases1 ::
    [MusiCompoNator.Composition.Phrase1]
    -> MusiCompoNator.Composition.VoiceState
    -> ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(A,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (phs :: [MusiCompoNator.Composition.Phrase1])
                   (eta :: MusiCompoNator.Composition.VoiceState) ->
                 (GHC.Tuple.(),
                  case eta of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  MusiCompoNator.Composition.VS phs ds1 ds2 })) -}
d5ae69549034fa20828e3ee77600dd03
  putScale ::
    MusiCompoNator.Core.Scale -> MusiCompoNator.Composition.Voice ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U,U,A)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.putScale1
                  `cast`
                (<MusiCompoNator.Core.Scale>_R
                 ->_R (<MusiCompoNator.Composition.VoiceState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((),
                                       MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <MusiCompoNator.Composition.VoiceState>_N
                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                              <()>_N)) -}
de4b1e2257e2fa724aa841567a41d934
  putScale1 ::
    MusiCompoNator.Core.Scale
    -> MusiCompoNator.Composition.VoiceState
    -> ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U,U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (m :: MusiCompoNator.Core.Scale)
                   (eta :: MusiCompoNator.Composition.VoiceState) ->
                 (GHC.Tuple.(),
                  case eta of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  MusiCompoNator.Composition.VS ds ds1 m })) -}
6b9345e3a336259d6c645560471a686b
  putTime ::
    MusiCompoNator.Core.Beat -> MusiCompoNator.Composition.Voice ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U,A,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.putTime1
                  `cast`
                (<MusiCompoNator.Core.Beat>_R
                 ->_R (<MusiCompoNator.Composition.VoiceState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((),
                                       MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <MusiCompoNator.Composition.VoiceState>_N
                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                              <()>_N)) -}
8e90300c31c3eff53301bdcc92c849ed
  putTime1 ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.Composition.VoiceState
    -> ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U,A,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (b :: MusiCompoNator.Core.Beat)
                   (eta :: MusiCompoNator.Composition.VoiceState) ->
                 (GHC.Tuple.(),
                  case eta of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  MusiCompoNator.Composition.VS ds b ds2 })) -}
95ab2b592e62489aa82e6984f33a5905
  rest ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    a
    -> MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>m4,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ c
                   ($dNum :: GHC.Num.Num a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (b :: a) ->
                 MusiCompoNator.Composition.:<:
                   @ c
                   @ MusiCompoNator.Composition.Prim
                   @ a
                   MusiCompoNator.Composition.silence
                   (MusiCompoNator.Core.beat @ a $dNum $dOrd b)) -}
cf20f86ab4a9d6704404f84ae7134776
  runVoice ::
    MusiCompoNator.Composition.Voice a
    -> MusiCompoNator.Core.Scale
    -> (a, [MusiCompoNator.Composition.Phrase2],
        MusiCompoNator.Core.Beat)
  {- Arity: 2, Strictness: <L,1*C1(U(1*U,1*U(1*U,1*U,A)))><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: MusiCompoNator.Composition.Voice a)
                   (w1 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Composition.$wrunVoice
                        @ a
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
bd57b41b7e9e1a84e65bdc037451b8de
  scale ::
    MusiCompoNator.Composition.VoiceState -> MusiCompoNator.Core.Scale
  RecSel Left MusiCompoNator.Composition.VoiceState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.Composition.VoiceState) ->
                 case ds of wild { MusiCompoNator.Composition.VS ds1 ds2 ds3 ->
                 ds3 }) -}
d241b3af13c685e0c1d3c8c56fcb7911
  shift ::
    GHC.Types.Int
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 2, Strictness: <L,U(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (i :: GHC.Types.Int)
                   (eta :: [MusiCompoNator.Composition.Prim]) ->
                 GHC.Base.build
                   @ MusiCompoNator.Composition.Prim
                   (\ @ b1
                      (c :: MusiCompoNator.Composition.Prim -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ MusiCompoNator.Composition.Prim
                      @ b1
                      (GHC.Base.mapFB
                         @ MusiCompoNator.Composition.Prim
                         @ b1
                         @ MusiCompoNator.Composition.Prim
                         c
                         (MusiCompoNator.Composition.Mode (MusiCompoNator.Core.index i)))
                      n
                      eta)) -}
e6ef6133bd22e4cdcd374bc821131d4b
  silence ::
    MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ MusiCompoNator.Composition.Prim
                   MusiCompoNator.Composition.silence1
                   (GHC.Types.[] @ MusiCompoNator.Composition.Prim)) -}
7a4cdc9a7a1b301c88137be839684969
  silence1 :: MusiCompoNator.Composition.Prim
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MusiCompoNator.Composition.Voicing
                   (GHC.Types.[]
                      @ (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch))) -}
8aecad1ed8d925945ff209eb3bddcd14
  singleV ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Voice ()
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U(U,U),U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.inKey2
                  `cast`
                (<MusiCompoNator.Composition.Phrase1>_R
                 ->_R (<MusiCompoNator.Composition.VoiceState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((),
                                       MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <MusiCompoNator.Composition.VoiceState>_N
                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                              <()>_N)) -}
a365fbae021edce711ad100806798ac3
  staccato ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
  {- Arity: 2, Strictness: <L,U><S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: MusiCompoNator.Composition.Phrase1) ->
                 case MusiCompoNator.Composition.$wstaccato
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Core.Beat
                   ww1
                   ww2 }) -}
52da8df435c8a3e1013e677c25ce854b
  tie ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
  {- Arity: 2, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (2, True, False)
                (\ (ph1 :: MusiCompoNator.Composition.Phrase1)
                   (ph2 :: MusiCompoNator.Composition.Phrase1) ->
                 MusiCompoNator.Composition.:+:
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                   (MusiCompoNator.Composition.appLast
                      MusiCompoNator.Composition.TieNext
                      ph1)
                   ph2) -}
40ffc8f09a74a14ac675976f1a2ab2e5
  transpose ::
    MusiCompoNator.Core.Pitch
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 2, Strictness: <L,U(U,U)><S,1*U>,
     Unfolding: (\ (p :: MusiCompoNator.Core.Pitch)
                   (eta :: [MusiCompoNator.Composition.Prim]) ->
                 GHC.Base.map
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Composition.Prim
                   (MusiCompoNator.Composition.Mode
                      (GHC.Base.map
                         @ MusiCompoNator.Core.Pitch
                         @ MusiCompoNator.Core.Pitch
                         (\ (ds :: MusiCompoNator.Core.Pitch) ->
                          GHC.Real.$fEnumRatio_$s$c+ ds p)))
                   eta) -}
e4ddd7b28b943d64abf3f9064ba30a6d
  unPhrase ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    MusiCompoNator.Composition.Phrase c p b
    -> ([[c]], MusiCompoNator.Core.Sequence p,
        MusiCompoNator.Core.Rhythm b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ c
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$wunPhrase
                        @ b
                        @ c
                        @ p
                        w
                        w1
                        w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
fcde428e9287c29c724a1be838fb8855
  volume ::
    GHC.Real.Rational
    -> MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
  {- Arity: 2, Strictness: <L,U><S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Real.Rational)
                   (w1 :: MusiCompoNator.Composition.Phrase1) ->
                 case MusiCompoNator.Composition.$wvolume
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Core.Beat
                   ww1
                   ww2 }) -}
instance [safe] MusiCompoNator.Composition.ControlPitchBeatTrifunctor [MusiCompoNator.Composition.Phrase]
  = MusiCompoNator.Composition.$fControlPitchBeatTrifunctorPhrase
instance [safe] GHC.Classes.Eq [MusiCompoNator.Composition.PhraseControl]
  = MusiCompoNator.Composition.$fEqPhraseControl
instance [safe] MusiCompoNator.Core.Measurable [MusiCompoNator.Composition.Phrase]
  = MusiCompoNator.Composition.$fMeasurablePhrase
instance [safe] MusiCompoNator.Core.Measurable [MusiCompoNator.Composition.Phrase]
  = MusiCompoNator.Composition.$fMeasurablePhrase0
instance [safe] GHC.Base.Semigroup [MusiCompoNator.Composition.Phrase]
  = MusiCompoNator.Composition.$fSemigroupPhrase
instance [safe] GHC.Base.Semigroup [Control.Monad.Trans.State.Lazy.StateT]
  = MusiCompoNator.Composition.$fSemigroupStateT
instance [safe] GHC.Show.Show [MusiCompoNator.Composition.Phrase]
  = MusiCompoNator.Composition.$fShowPhrase
instance [safe] GHC.Show.Show [MusiCompoNator.Composition.PhraseControl]
  = MusiCompoNator.Composition.$fShowPhraseControl
"SPEC/MusiCompoNator.Composition $fMonadStateT_$c>> @ Identity _" [orphan] forall @ s
                                                                                  ($dMonad :: GHC.Base.Monad
                                                                                                Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ Data.Functor.Identity.Identity
                                                    @ s
                                                    $dMonad
  = MusiCompoNator.Composition.$fSemigroupStateT_$s$fMonadStateT_$c>>
      @ s
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

