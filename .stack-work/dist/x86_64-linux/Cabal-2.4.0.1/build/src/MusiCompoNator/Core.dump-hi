
==================== FINAL INTERFACE ====================
2019-05-14 04:07:14.461190628 UTC

interface MusiCompoNator-0.1.0.0-9cKgrVpyNBSE6q4UMpeYIf:MusiCompoNator.Core 8063
  interface hash: 860a42fc579aa83affa41869b5762cc0
  ABI hash: edfa8b9a8a23ecf8a7be394146840adb
  export-list hash: 4d3d939d1c391690da2c15e26aaa58c3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d6fb4c70088bda35d669fdf08ab0d44d
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  MusiCompoNator.Core.a
  MusiCompoNator.Core.aeolian
  MusiCompoNator.Core.b
  MusiCompoNator.Core.beat
  MusiCompoNator.Core.c
  MusiCompoNator.Core.d
  MusiCompoNator.Core.dorian
  MusiCompoNator.Core.dotted
  MusiCompoNator.Core.down
  MusiCompoNator.Core.duration
  MusiCompoNator.Core.e
  MusiCompoNator.Core.en
  MusiCompoNator.Core.ens
  MusiCompoNator.Core.f
  MusiCompoNator.Core.flat
  MusiCompoNator.Core.g
  MusiCompoNator.Core.hn
  MusiCompoNator.Core.hns
  MusiCompoNator.Core.i
  MusiCompoNator.Core.i'
  MusiCompoNator.Core.i''
  MusiCompoNator.Core.i_
  MusiCompoNator.Core.i__
  MusiCompoNator.Core.ii
  MusiCompoNator.Core.ii'
  MusiCompoNator.Core.ii''
  MusiCompoNator.Core.ii_
  MusiCompoNator.Core.ii__
  MusiCompoNator.Core.iii
  MusiCompoNator.Core.iii'
  MusiCompoNator.Core.iii''
  MusiCompoNator.Core.iii_
  MusiCompoNator.Core.iii__
  MusiCompoNator.Core.iiv
  MusiCompoNator.Core.iiv'
  MusiCompoNator.Core.iiv''
  MusiCompoNator.Core.iiv_
  MusiCompoNator.Core.iiv__
  MusiCompoNator.Core.iix
  MusiCompoNator.Core.iix'
  MusiCompoNator.Core.iix''
  MusiCompoNator.Core.iix_
  MusiCompoNator.Core.iix__
  MusiCompoNator.Core.index
  MusiCompoNator.Core.invertl
  MusiCompoNator.Core.invertr
  MusiCompoNator.Core.ionian
  MusiCompoNator.Core.iv
  MusiCompoNator.Core.iv'
  MusiCompoNator.Core.iv''
  MusiCompoNator.Core.iv_
  MusiCompoNator.Core.iv__
  MusiCompoNator.Core.ix
  MusiCompoNator.Core.ix'
  MusiCompoNator.Core.ix''
  MusiCompoNator.Core.ix_
  MusiCompoNator.Core.ix__
  MusiCompoNator.Core.locrian
  MusiCompoNator.Core.lydian
  MusiCompoNator.Core.mixolydian
  MusiCompoNator.Core.phrygian
  MusiCompoNator.Core.qn
  MusiCompoNator.Core.qns
  MusiCompoNator.Core.root
  MusiCompoNator.Core.sharp
  MusiCompoNator.Core.sn
  MusiCompoNator.Core.sns
  MusiCompoNator.Core.step
  MusiCompoNator.Core.triplet
  MusiCompoNator.Core.tuplet
  MusiCompoNator.Core.up
  MusiCompoNator.Core.v
  MusiCompoNator.Core.v'
  MusiCompoNator.Core.v''
  MusiCompoNator.Core.v_
  MusiCompoNator.Core.v__
  MusiCompoNator.Core.vi
  MusiCompoNator.Core.vi'
  MusiCompoNator.Core.vi''
  MusiCompoNator.Core.vi_
  MusiCompoNator.Core.vi__
  MusiCompoNator.Core.vii
  MusiCompoNator.Core.vii'
  MusiCompoNator.Core.vii''
  MusiCompoNator.Core.vii_
  MusiCompoNator.Core.vii__
  MusiCompoNator.Core.viii
  MusiCompoNator.Core.viii'
  MusiCompoNator.Core.viii''
  MusiCompoNator.Core.viii_
  MusiCompoNator.Core.viii__
  MusiCompoNator.Core.wn
  MusiCompoNator.Core.wns
  MusiCompoNator.Core.x
  MusiCompoNator.Core.x'
  MusiCompoNator.Core.x''
  MusiCompoNator.Core.x_
  MusiCompoNator.Core.x__
  MusiCompoNator.Core.xi
  MusiCompoNator.Core.xi'
  MusiCompoNator.Core.xi''
  MusiCompoNator.Core.xi_
  MusiCompoNator.Core.xi__
  MusiCompoNator.Core.xii
  MusiCompoNator.Core.xii'
  MusiCompoNator.Core.xii''
  MusiCompoNator.Core.xii_
  MusiCompoNator.Core.xii__
  MusiCompoNator.Core.xiii
  MusiCompoNator.Core.xiii'
  MusiCompoNator.Core.xiii''
  MusiCompoNator.Core.xiii_
  MusiCompoNator.Core.xiii__
  MusiCompoNator.Core.Beat
  MusiCompoNator.Core.Measurable{MusiCompoNator.Core.measure MusiCompoNator.Core.signature MusiCompoNator.Core.unmeasure MusiCompoNator.Core.withSignature}
  MusiCompoNator.Core.Pitch
  MusiCompoNator.Core.Rhythm{MusiCompoNator.Core.:-: MusiCompoNator.Core.:|: MusiCompoNator.Core.Measure MusiCompoNator.Core.Repeat}
  MusiCompoNator.Core.Scale
  MusiCompoNator.Core.Sequence
  MusiCompoNator.Core.Signature{MusiCompoNator.Core.Shift MusiCompoNator.Core.Times}
  MusiCompoNator.Core.Simultanity{MusiCompoNator.Core.:=: MusiCompoNator.Core.Silence MusiCompoNator.Core.Sound}
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:Data.Ratio 96f9a1de850e5ea66ed6c5bd6817461b
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.Err 28d622b06927ca4c3b335ec5326c34b2
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:GHC.Num 847723f2584d989dac1eada133ac3fb8
import  -/  base-4.12.0.0:GHC.Real f7dad82c1d43d80823865d3e6c6636e0
import  -/  base-4.12.0.0:GHC.Show 4e438f26d903388cc6c2c5d64ed01b98
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 7f56f3d142debd8666df241a1ddc7887
fixities infixr 3 :-:, infixr 5 :=:, infixr 3 :|:
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity ::
    Data.Foldable.Foldable MusiCompoNator.Core.Simultanity
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.Core.Simultanity
                  MusiCompoNator.Core.$fFoldableSimultanity_$cfold
                  MusiCompoNator.Core.$fFoldableSimultanity_$cfoldMap
                  MusiCompoNator.Core.$fFoldableSimultanity_$cfoldr
                  MusiCompoNator.Core.$fFoldableSimultanity_$cfoldr'
                  MusiCompoNator.Core.$fFoldableSimultanity_$cfoldl
                  MusiCompoNator.Core.$fFoldableSimultanity_$cfoldl'
                  MusiCompoNator.Core.$fFoldableSimultanity_$cfoldr1
                  MusiCompoNator.Core.$fFoldableSimultanity_$cfoldl1
                  MusiCompoNator.Core.$fFoldableSimultanity_$ctoList
                  MusiCompoNator.Core.$fFoldableSimultanity_$cnull
                  MusiCompoNator.Core.$fFoldableSimultanity_$clength
                  MusiCompoNator.Core.$fFoldableSimultanity8
                    `cast`
                  (forall (a2 :: <*>_N).
                   <GHC.Classes.Eq a2>_R
                   ->_R <a2>_R
                   ->_R <MusiCompoNator.Core.Simultanity a2>_R
                   ->_R Data.Semigroup.Internal.N:Any[0])
                  MusiCompoNator.Core.$fFoldableSimultanity_$cmaximum
                  MusiCompoNator.Core.$fFoldableSimultanity_$cminimum
                  MusiCompoNator.Core.$fFoldableSimultanity5
                    `cast`
                  (forall (a2 :: <*>_N).
                   <GHC.Num.Num a2>_R
                   ->_R <MusiCompoNator.Core.Simultanity a2>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a2>_R)
                  MusiCompoNator.Core.$fFoldableSimultanity1
                    `cast`
                  (forall (a2 :: <*>_N).
                   <GHC.Num.Num a2>_R
                   ->_R <MusiCompoNator.Core.Simultanity a2>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a2>_R) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity1 ::
    GHC.Num.Num a =>
    MusiCompoNator.Core.Simultanity a
    -> Data.Semigroup.Internal.Product a
  {- Arity: 1, Strictness: <L,U(A,A,U,A,A,A,C(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a2 ($dNum :: GHC.Num.Num a2) ->
                 MusiCompoNator.Core.$fFoldableSimultanity_$cfoldMap
                   @ (Data.Semigroup.Internal.Product a2)
                   @ a2
                   (Data.Semigroup.Internal.$fMonoidProduct @ a2 $dNum)
                   (MusiCompoNator.Core.$fFoldableSimultanity2 @ a2)
                     `cast`
                   (<a2>_R ->_R Sym (Data.Semigroup.Internal.N:Product[0] <a2>_R))) -}
ad84749fa30b191e334ba0e616080bd5
  $fFoldableSimultanity10 ::
    a
    -> (GHC.Types.Int -> GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><C(S),1*C1(U(U))><S,1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a2
                   (x2 :: a2)
                   (k :: GHC.Types.Int -> GHC.Types.Int)
                   (z :: GHC.Types.Int) ->
                 case z of wild { GHC.Types.I# x3 ->
                 k (GHC.Types.I# (GHC.Prim.+# x3 1#)) }) -}
1271e5381090f9590ccef53e20b3393d
  $fFoldableSimultanity11 :: a -> GHC.Types.Bool -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a2 (ds :: a2) (ds1 :: GHC.Types.Bool) -> GHC.Types.False) -}
da338a8474c3645077f72d8ecbd2fd9b
  $fFoldableSimultanity12 :: a
  {- Strictness: x -}
907bb24a4d9e47600a5a98847a1ee2d8
  $fFoldableSimultanity13 :: a
  {- Strictness: x -}
a752efdcdf5d91d41c12ad1ad3d88b86
  $fFoldableSimultanity2 :: a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True) (\ @ a2 (v2 :: a2) -> v2) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity3 ::
    (a -> Data.Semigroup.Internal.Endo GHC.Types.Bool)
    -> MusiCompoNator.Core.Simultanity a
    -> GHC.Types.Bool
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><S,1*U><L,U> -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity4 ::
    (a
     -> Data.Semigroup.Internal.Endo (GHC.Types.Int -> GHC.Types.Int))
    -> MusiCompoNator.Core.Simultanity a
    -> (GHC.Types.Int -> GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(C1(U))><S,1*U><L,U> -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity5 ::
    GHC.Num.Num a =>
    MusiCompoNator.Core.Simultanity a -> Data.Semigroup.Internal.Sum a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U,A,C(C1(U)),A,A,A,C(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a2 ($dNum :: GHC.Num.Num a2) ->
                 MusiCompoNator.Core.$fFoldableSimultanity_$cfoldMap
                   @ (Data.Semigroup.Internal.Sum a2)
                   @ a2
                   (Data.Semigroup.Internal.$fMonoidSum @ a2 $dNum)
                   (MusiCompoNator.Core.$fFoldableSimultanity2 @ a2)
                     `cast`
                   (<a2>_R ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <a2>_R))) -}
e50d7716addfee1210dee20b82128868
  $fFoldableSimultanity6 :: a
  {- Strictness: x -}
7309c006facdc9f2a3769e016687b980
  $fFoldableSimultanity7 :: a
  {- Strictness: x -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity8 ::
    GHC.Classes.Eq a =>
    a
    -> MusiCompoNator.Core.Simultanity a -> Data.Semigroup.Internal.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a2 ($dEq :: GHC.Classes.Eq a2) (eta :: a2) ->
                 MusiCompoNator.Core.$fFoldableSimultanity_$s$cfoldMap
                   @ a2
                   (GHC.Classes.== @ a2 $dEq eta)
                     `cast`
                   (<a2>_R ->_R Sym (Data.Semigroup.Internal.N:Any[0]))) -}
e0bb75d00060d70065d10345a179fe07
  $fFoldableSimultanity9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$cfold ::
    GHC.Base.Monoid m => MusiCompoNator.Core.Simultanity m -> m
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A,A),U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m ($dMonoid :: GHC.Base.Monoid m) ->
                 MusiCompoNator.Core.$fFoldableSimultanity_$cfoldMap
                   @ m
                   @ m
                   $dMonoid
                   (GHC.Base.id @ m)) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$cfoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> MusiCompoNator.Core.Simultanity a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A,A),U,A,A)><L,C(U)><S,1*U> -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$cfoldl ::
    (b -> a -> b) -> b -> MusiCompoNator.Core.Simultanity a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b1
                   @ a2
                   (f5 :: b1 -> a2 -> b1)
                   (z :: b1)
                   (t1 :: MusiCompoNator.Core.Simultanity a2) ->
                 (MusiCompoNator.Core.$fFoldableSimultanity_$cfoldMap
                    @ (Data.Semigroup.Internal.Dual (Data.Semigroup.Internal.Endo b1))
                    @ a2
                    (MusiCompoNator.Core.$fFoldableSimultanity_$dMonoid @ b1)
                    (\ (x2 :: a2) (y :: b1) -> f5 y x2)
                      `cast`
                    (<a2>_R
                     ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                   (Data.Semigroup.Internal.N:Endo[0] <b1>_R)))
                    t1)
                   `cast`
                 (Data.Semigroup.Internal.N:Dual[0]
                      (Data.Semigroup.Internal.N:Endo[0] <b1>_R))
                   z) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$cfoldl' ::
    (b -> a -> b) -> b -> MusiCompoNator.Core.Simultanity a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ b1
                   @ a2
                   (f5 :: b1 -> a2 -> b1)
                   (z0 :: b1)
                   (xs :: MusiCompoNator.Core.Simultanity a2) ->
                 (MusiCompoNator.Core.$fFoldableSimultanity_$cfoldMap
                    @ (Data.Semigroup.Internal.Endo (b1 -> b1))
                    @ a2
                    (Data.Semigroup.Internal.$fMonoidEndo @ (b1 -> b1))
                    (\ (x2 :: a2) (k :: b1 -> b1) (z :: b1) ->
                     case f5 z x2 of vx { DEFAULT -> k vx })
                      `cast`
                    (<a2>_R ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <b1 -> b1>_R))
                    xs)
                   `cast`
                 (Data.Semigroup.Internal.N:Endo[0] <b1 -> b1>_R)
                   (GHC.Base.id @ b1)
                   z0) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$cfoldl1 ::
    (a -> a -> a) -> MusiCompoNator.Core.Simultanity a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a2
                   (f5 :: a2 -> a2 -> a2)
                   (xs :: MusiCompoNator.Core.Simultanity a2) ->
                 case (MusiCompoNator.Core.$fFoldableSimultanity_$cfoldMap
                         @ (Data.Semigroup.Internal.Dual
                              (Data.Semigroup.Internal.Endo (GHC.Maybe.Maybe a2)))
                         @ a2
                         (MusiCompoNator.Core.$fFoldableSimultanity_$dMonoid
                            @ (GHC.Maybe.Maybe a2))
                         (\ (x2 :: a2) (y :: GHC.Maybe.Maybe a2) ->
                          GHC.Maybe.Just
                            @ a2
                            (case y of wild {
                               GHC.Maybe.Nothing -> x2 GHC.Maybe.Just x3 -> f5 x3 x2 }))
                           `cast`
                         (<a2>_R
                          ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                        (Data.Semigroup.Internal.N:Endo[0] <GHC.Maybe.Maybe a2>_R)))
                         xs)
                        `cast`
                      (Data.Semigroup.Internal.N:Dual[0]
                           (Data.Semigroup.Internal.N:Endo[0] <GHC.Maybe.Maybe a2>_R))
                        (GHC.Maybe.Nothing @ a2) of wild {
                   GHC.Maybe.Nothing
                   -> MusiCompoNator.Core.$fFoldableSimultanity12 @ a2
                   GHC.Maybe.Just v2 -> v2 }) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$cfoldr ::
    (a -> b -> b) -> b -> MusiCompoNator.Core.Simultanity a -> b
  {- Arity: 3, Strictness: <L,C(U)><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a2
                   @ b1
                   (f5 :: a2 -> b1 -> b1)
                   (z :: b1)
                   (t1 :: MusiCompoNator.Core.Simultanity a2) ->
                 (MusiCompoNator.Core.$fFoldableSimultanity_$cfoldMap
                    @ (Data.Semigroup.Internal.Endo b1)
                    @ a2
                    (Data.Semigroup.Internal.$fMonoidEndo @ b1)
                    f5
                      `cast`
                    (<a2>_R ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <b1>_R))
                    t1)
                   `cast`
                 (Data.Semigroup.Internal.N:Endo[0] <b1>_R)
                   z) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$cfoldr' ::
    (a -> b -> b) -> b -> MusiCompoNator.Core.Simultanity a -> b
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,1*U>,
     Unfolding: (\ @ a2
                   @ b1
                   (f5 :: a2 -> b1 -> b1)
                   (z0 :: b1)
                   (xs :: MusiCompoNator.Core.Simultanity a2) ->
                 (MusiCompoNator.Core.$fFoldableSimultanity_$cfoldMap
                    @ (Data.Semigroup.Internal.Dual
                         (Data.Semigroup.Internal.Endo (b1 -> b1)))
                    @ a2
                    (MusiCompoNator.Core.$fFoldableSimultanity_$dMonoid @ (b1 -> b1))
                    (\ (x2 :: a2) (y :: b1 -> b1) (z :: b1) ->
                     case f5 x2 z of vx { DEFAULT -> y vx })
                      `cast`
                    (<a2>_R
                     ->_R Sym (Data.Semigroup.Internal.N:Dual[0]
                                   (Data.Semigroup.Internal.N:Endo[0] <b1 -> b1>_R)))
                    xs)
                   `cast`
                 (Data.Semigroup.Internal.N:Dual[0]
                      (Data.Semigroup.Internal.N:Endo[0] <b1 -> b1>_R))
                   (GHC.Base.id @ b1)
                   z0) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$cfoldr1 ::
    (a -> a -> a) -> MusiCompoNator.Core.Simultanity a -> a
  {- Arity: 2, Strictness: <L,C(C1(U))><S,1*U>,
     Unfolding: (\ @ a2
                   (f5 :: a2 -> a2 -> a2)
                   (xs :: MusiCompoNator.Core.Simultanity a2) ->
                 case (MusiCompoNator.Core.$fFoldableSimultanity_$cfoldMap
                         @ (Data.Semigroup.Internal.Endo (GHC.Maybe.Maybe a2))
                         @ a2
                         (Data.Semigroup.Internal.$fMonoidEndo @ (GHC.Maybe.Maybe a2))
                         (\ (x2 :: a2) (m :: GHC.Maybe.Maybe a2) ->
                          GHC.Maybe.Just
                            @ a2
                            (case m of wild {
                               GHC.Maybe.Nothing -> x2 GHC.Maybe.Just y -> f5 x2 y }))
                           `cast`
                         (<a2>_R
                          ->_R Sym (Data.Semigroup.Internal.N:Endo[0]
                                        <GHC.Maybe.Maybe a2>_R))
                         xs)
                        `cast`
                      (Data.Semigroup.Internal.N:Endo[0] <GHC.Maybe.Maybe a2>_R)
                        (GHC.Maybe.Nothing @ a2) of wild {
                   GHC.Maybe.Nothing
                   -> MusiCompoNator.Core.$fFoldableSimultanity13 @ a2
                   GHC.Maybe.Just v2 -> v2 }) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$clength ::
    MusiCompoNator.Core.Simultanity a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a2 (xs :: MusiCompoNator.Core.Simultanity a2) ->
                 MusiCompoNator.Core.$fFoldableSimultanity4
                   @ a2
                   (MusiCompoNator.Core.$fFoldableSimultanity10 @ a2)
                     `cast`
                   (<a2>_R
                    ->_R Sym (Data.Semigroup.Internal.N:Endo[0]
                                  <GHC.Types.Int -> GHC.Types.Int>_R))
                   xs
                   (GHC.Base.id @ GHC.Types.Int)
                   MusiCompoNator.Core.$fFoldableSimultanity9) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$cmaximum ::
    GHC.Classes.Ord a => MusiCompoNator.Core.Simultanity a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,A,A,C(C1(U)),A,A)>,
     Unfolding: (\ @ a2 ($dOrd :: GHC.Classes.Ord a2) ->
                 let {
                   g1 :: GHC.Base.Monoid (Data.Functor.Utils.Max a2)
                   = Data.Functor.Utils.$fMonoidMax @ a2 $dOrd
                 } in
                 \ (x2 :: MusiCompoNator.Core.Simultanity a2) ->
                 case (MusiCompoNator.Core.$fFoldableSimultanity_$cfoldMap
                         @ (Data.Functor.Utils.Max a2)
                         @ a2
                         g1
                         (GHC.Maybe.Just @ a2)
                           `cast`
                         (<a2>_R ->_R Sym (Data.Functor.Utils.N:Max[0]) <a2>_N)
                         x2)
                        `cast`
                      (Data.Functor.Utils.N:Max[0] <a2>_N) of wild {
                   GHC.Maybe.Nothing
                   -> MusiCompoNator.Core.$fFoldableSimultanity7 @ a2
                   GHC.Maybe.Just v2 -> v2 }) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$cminimum ::
    GHC.Classes.Ord a => MusiCompoNator.Core.Simultanity a -> a
  {- Arity: 1, Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)>,
     Unfolding: (\ @ a2 ($dOrd :: GHC.Classes.Ord a2) ->
                 let {
                   g1 :: GHC.Base.Monoid (Data.Functor.Utils.Min a2)
                   = Data.Functor.Utils.$fMonoidMin @ a2 $dOrd
                 } in
                 \ (x2 :: MusiCompoNator.Core.Simultanity a2) ->
                 case (MusiCompoNator.Core.$fFoldableSimultanity_$cfoldMap
                         @ (Data.Functor.Utils.Min a2)
                         @ a2
                         g1
                         (GHC.Maybe.Just @ a2)
                           `cast`
                         (<a2>_R ->_R Sym (Data.Functor.Utils.N:Min[0]) <a2>_N)
                         x2)
                        `cast`
                      (Data.Functor.Utils.N:Min[0] <a2>_N) of wild {
                   GHC.Maybe.Nothing
                   -> MusiCompoNator.Core.$fFoldableSimultanity6 @ a2
                   GHC.Maybe.Just v2 -> v2 }) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$cnull ::
    MusiCompoNator.Core.Simultanity a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a2 (t1 :: MusiCompoNator.Core.Simultanity a2) ->
                 MusiCompoNator.Core.$fFoldableSimultanity3
                   @ a2
                   (MusiCompoNator.Core.$fFoldableSimultanity11 @ a2)
                     `cast`
                   (<a2>_R
                    ->_R Sym (Data.Semigroup.Internal.N:Endo[0] <GHC.Types.Bool>_R))
                   t1
                   GHC.Types.True) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$ctoList ::
    MusiCompoNator.Core.Simultanity a -> [a]
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a2 (t1 :: MusiCompoNator.Core.Simultanity a2) ->
                 GHC.Base.build
                   @ a2
                   (\ @ b1 (c1 :: a2 -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    MusiCompoNator.Core.$fFoldableSimultanity_$cfoldr
                      @ a2
                      @ b1
                      c1
                      n
                      t1)) -}
aed6f3e7ddad3f31a05c37e3c6feb9a1
  $fFoldableSimultanity_$dMonoid ::
    GHC.Base.Monoid
      (Data.Semigroup.Internal.Dual (Data.Semigroup.Internal.Endo b))
  {- Unfolding: (\ @ b1 ->
                 Data.Semigroup.Internal.$fMonoidDual
                   @ (Data.Semigroup.Internal.Endo b1)
                   (Data.Semigroup.Internal.$fMonoidEndo @ b1)) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFoldableSimultanity_$s$cfoldMap ::
    (a -> Data.Semigroup.Internal.Any)
    -> MusiCompoNator.Core.Simultanity a -> Data.Semigroup.Internal.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
cf29c72530f93f72d70d88ec0fb2366d
  $fFunctorRhythm :: GHC.Base.Functor MusiCompoNator.Core.Rhythm
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.Core.Rhythm
                  MusiCompoNator.Core.$fFunctorRhythm_$cfmap
                  MusiCompoNator.Core.$fFunctorRhythm_$c<$ -}
cf29c72530f93f72d70d88ec0fb2366d
  $fFunctorRhythm_$c<$ ::
    a -> MusiCompoNator.Core.Rhythm b -> MusiCompoNator.Core.Rhythm a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a2 @ b1 (x2 :: a2) (eta :: MusiCompoNator.Core.Rhythm b1) ->
                 MusiCompoNator.Core.$fFunctorRhythm_$cfmap
                   @ b1
                   @ a2
                   (\ (ds :: b1) -> x2)
                   eta) -}
cf29c72530f93f72d70d88ec0fb2366d
  $fFunctorRhythm_$cfmap ::
    (a -> b)
    -> MusiCompoNator.Core.Rhythm a -> MusiCompoNator.Core.Rhythm b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
ad340a927f39b7c32476c50f86ed78b1
  $fFunctorSimultanity ::
    GHC.Base.Functor MusiCompoNator.Core.Simultanity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.Core.Simultanity
                  MusiCompoNator.Core.$fFunctorSimultanity_$cfmap
                  MusiCompoNator.Core.$fFunctorSimultanity_$c<$ -}
ad340a927f39b7c32476c50f86ed78b1
  $fFunctorSimultanity_$c<$ ::
    a
    -> MusiCompoNator.Core.Simultanity b
    -> MusiCompoNator.Core.Simultanity a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a2
                   @ b1
                   (x2 :: a2)
                   (eta :: MusiCompoNator.Core.Simultanity b1) ->
                 MusiCompoNator.Core.$fFunctorSimultanity_$cfmap
                   @ b1
                   @ a2
                   (\ (ds :: b1) -> x2)
                   eta) -}
ad340a927f39b7c32476c50f86ed78b1
  $fFunctorSimultanity_$cfmap ::
    (a -> b)
    -> MusiCompoNator.Core.Simultanity a
    -> MusiCompoNator.Core.Simultanity b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
5523319abac081310005112e39f3f161
  $fMeasurableRhythm ::
    MusiCompoNator.Core.Measurable MusiCompoNator.Core.Rhythm
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.Core.Rhythm
                  MusiCompoNator.Core.$fMeasurableRhythm_$cwithSignature
                  MusiCompoNator.Core.$fMeasurableRhythm_$csignature
                  MusiCompoNator.Core.$fMeasurableRhythm_$cmeasure
                  MusiCompoNator.Core.$fMeasurableRhythm_$cunmeasure -}
752e5fb2e1a054dd8ff170bc8c091df9
  $fMeasurableRhythm1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
0b12bf12fcf00ac130543e9dbbe1b031
  $fMeasurableRhythm2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
90ffa9542263fc8402e7a995a895444b
  $fMeasurableRhythm3 :: MusiCompoNator.Core.Signature a
  {- Strictness: x -}
b0d24197778c8071a41782c26cc2bff9
  $fMeasurableRhythm4 :: MusiCompoNator.Core.Signature a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
fce71d9d99bd2a938d507452d8cb6639
  $fMeasurableRhythm_$cmeasure ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    [a] -> MusiCompoNator.Core.Rhythm a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a2 ($dNum :: GHC.Num.Num a2) ($dOrd :: GHC.Classes.Ord a2) ->
                 MusiCompoNator.Core.Measure @ a2) -}
0f393689c1c1059004bd0694b3c10f8a
  $fMeasurableRhythm_$csignature ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Core.Rhythm a -> MusiCompoNator.Core.Signature a
  {- Arity: 2,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,1*C1(U))><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>,
     Unfolding: (\ @ a2
                   ($dNum :: GHC.Num.Num a2)
                   ($dOrd :: GHC.Classes.Ord a2) ->
                 let {
                   $dEq :: GHC.Classes.Eq a2 = GHC.Classes.$p1Ord @ a2 $dOrd
                 } in
                 letrec {
                   collect :: [MusiCompoNator.Core.Signature a2]
                              -> MusiCompoNator.Core.Signature a2
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [MusiCompoNator.Core.Signature a2]) ->
                     case ds of wild {
                       [] -> MusiCompoNator.Core.$fMeasurableRhythm3 @ a2
                       : s ds1
                       -> case ds1 of wild1 {
                            [] -> s
                            : ipv ipv1
                            -> case s of wild2 {
                                 MusiCompoNator.Core.Times n k
                                 -> case ipv of wild3 {
                                      MusiCompoNator.Core.Times m k'
                                      -> case GHC.Classes.== @ a2 $dEq k k' of wild4 {
                                           GHC.Types.False
                                           -> MusiCompoNator.Core.Shift @ a2 wild2 (collect wild1)
                                           GHC.Types.True
                                           -> collect
                                                (GHC.Types.:
                                                   @ (MusiCompoNator.Core.Signature a2)
                                                   (MusiCompoNator.Core.Times
                                                      @ a2
                                                      (GHC.Num.$fNumInt_$c+ n m)
                                                      k)
                                                   ipv1) }
                                      MusiCompoNator.Core.Shift ipv2 ipv3
                                      -> MusiCompoNator.Core.$fMeasurableRhythm3 @ a2 }
                                 MusiCompoNator.Core.Shift ipv2 ipv3
                                 -> MusiCompoNator.Core.$fMeasurableRhythm3 @ a2 } } }
                 } in
                 let {
                   lvl33 :: a2
                   = GHC.Num.fromInteger
                       @ a2
                       $dNum
                       MusiCompoNator.Core.$fMeasurableRhythm2
                 } in
                 letrec {
                   meters :: MusiCompoNator.Core.Rhythm a2
                             -> [MusiCompoNator.Core.Signature a2]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: MusiCompoNator.Core.Rhythm a2) ->
                     case ds of wild {
                       MusiCompoNator.Core.Measure bs
                       -> GHC.Types.:
                            @ (MusiCompoNator.Core.Signature a2)
                            (MusiCompoNator.Core.Times
                               @ a2
                               MusiCompoNator.Core.$fMeasurableRhythm1
                               (letrec {
                                  go :: [a2] -> a2 -> a2
                                    <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                                  = \ (ds1 :: [a2]) (eta :: a2) ->
                                    case ds1 of wild1 {
                                      [] -> eta : y ys -> go ys (GHC.Num.+ @ a2 $dNum eta y) }
                                } in
                                go bs lvl33))
                            (GHC.Types.[] @ (MusiCompoNator.Core.Signature a2))
                       MusiCompoNator.Core.Repeat ds1 ds2
                       -> case ds1 of wild1 { GHC.Types.I# ds3 ->
                          case ds3 of ds4 {
                            DEFAULT
                            -> GHC.Base.++
                                 @ (MusiCompoNator.Core.Signature a2)
                                 (meters ds2)
                                 (meters
                                    (MusiCompoNator.Core.Repeat
                                       @ a2
                                       (GHC.Types.I# (GHC.Prim.-# ds4 1#))
                                       ds2))
                            0# -> GHC.Types.[] @ (MusiCompoNator.Core.Signature a2) } }
                       MusiCompoNator.Core.:|: r1 r2
                       -> GHC.Base.++
                            @ (MusiCompoNator.Core.Signature a2)
                            (meters r1)
                            (meters r2)
                       MusiCompoNator.Core.:-: r1 r2
                       -> GHC.Base.++
                            @ (MusiCompoNator.Core.Signature a2)
                            (meters r1)
                            (meters r2) }
                 } in
                 \ (x2 :: MusiCompoNator.Core.Rhythm a2) -> collect (meters x2)) -}
45ac2edd0e70d01eeabaee9aafe8e03c
  $fMeasurableRhythm_$cunmeasure ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Core.Rhythm a -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,A)><L,A><S,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ @ a2
                   (w :: GHC.Num.Num a2)
                   (w1 :: GHC.Classes.Ord a2)
                   (w2 :: MusiCompoNator.Core.Rhythm a2) ->
                 MusiCompoNator.Core.$w$cunmeasure @ a2 w w2) -}
a658a5180bd05980e4df857a33306c3e
  $fMeasurableRhythm_$cwithSignature ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Core.Signature a
    -> MusiCompoNator.Core.Rhythm a -> MusiCompoNator.Core.Rhythm a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><L,1*U><S,1*U>,
     Unfolding: (\ @ a2
                   ($dNum :: GHC.Num.Num a2)
                   ($dOrd :: GHC.Classes.Ord a2)
                   (s :: MusiCompoNator.Core.Signature a2)
                   (r :: MusiCompoNator.Core.Rhythm a2) ->
                 letrec {
                   aquire :: [a2] -> [a2] -> [a2] -> MusiCompoNator.Core.Rhythm a2
                     {- Arity: 3, Strictness: <L,U><L,1*U><S,1*U> -}
                   = \ (m :: [a2]) (ds :: [a2]) (ds1 :: [a2]) ->
                     case ds1 of wild {
                       [] -> MusiCompoNator.Core.Measure @ a2 (GHC.List.reverse @ a2 m)
                       : ipv ipv1
                       -> case ds of wild1 {
                            [] -> MusiCompoNator.Core.Measure @ a2 (GHC.List.reverse @ a2 m)
                            : q qs
                            -> case GHC.Classes.compare @ a2 $dOrd q ipv of wild2 {
                                 GHC.Types.LT
                                 -> MusiCompoNator.Core.:-:
                                      @ a2
                                      (MusiCompoNator.Core.Measure
                                         @ a2
                                         (GHC.List.reverse1
                                            @ a2
                                            (GHC.Types.: @ a2 q m)
                                            (GHC.Types.[] @ a2)))
                                      (aquire
                                         (GHC.Types.[] @ a2)
                                         qs
                                         (GHC.Types.: @ a2 (GHC.Num.- @ a2 $dNum ipv q) ipv1))
                                 GHC.Types.EQ
                                 -> MusiCompoNator.Core.:|:
                                      @ a2
                                      (MusiCompoNator.Core.Measure
                                         @ a2
                                         (GHC.List.reverse1
                                            @ a2
                                            (GHC.Types.: @ a2 ipv m)
                                            (GHC.Types.[] @ a2)))
                                      (aquire (GHC.Types.[] @ a2) qs ipv1)
                                 GHC.Types.GT
                                 -> aquire
                                      (GHC.Types.: @ a2 ipv m)
                                      (GHC.Types.: @ a2 (GHC.Num.- @ a2 $dNum q ipv) qs)
                                      ipv1 } } }
                 } in
                 aquire
                   (GHC.Types.[] @ a2)
                   (MusiCompoNator.Core.$fMeasurableRhythm4 @ a2 s)
                   (MusiCompoNator.Core.$w$cunmeasure @ a2 $dNum r)) -}
ad340a927f39b7c32476c50f86ed78b1
  $fMonoidSimultanity ::
    GHC.Base.Monoid (MusiCompoNator.Core.Simultanity pitch)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ pitch.
                  @ (MusiCompoNator.Core.Simultanity pitch)
                  (MusiCompoNator.Core.$fSemigroupSimultanity @ pitch)
                  (MusiCompoNator.Core.Silence @ pitch)
                  (MusiCompoNator.Core.:=: @ pitch)
                  (MusiCompoNator.Core.$fMonoidSimultanity_go @ pitch) -}
ad340a927f39b7c32476c50f86ed78b1
  $fMonoidSimultanity_go ::
    [MusiCompoNator.Core.Simultanity pitch]
    -> MusiCompoNator.Core.Simultanity pitch
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
cf29c72530f93f72d70d88ec0fb2366d
  $fSemigroupRhythm ::
    GHC.Base.Semigroup (MusiCompoNator.Core.Rhythm b)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ b1.
                  @ (MusiCompoNator.Core.Rhythm b1)
                  (MusiCompoNator.Core.:|: @ b1)
                  (MusiCompoNator.Core.$fSemigroupRhythm_$csconcat @ b1)
                  (MusiCompoNator.Core.$fSemigroupRhythm_$cstimes @ b1) -}
cf29c72530f93f72d70d88ec0fb2366d
  $fSemigroupRhythm1 ::
    MusiCompoNator.Core.Rhythm b
    -> [MusiCompoNator.Core.Rhythm b] -> MusiCompoNator.Core.Rhythm b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
cf29c72530f93f72d70d88ec0fb2366d
  $fSemigroupRhythm_$csconcat ::
    GHC.Base.NonEmpty (MusiCompoNator.Core.Rhythm b)
    -> MusiCompoNator.Core.Rhythm b
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ b1
                   (ds :: GHC.Base.NonEmpty (MusiCompoNator.Core.Rhythm b1)) ->
                 case ds of wild { GHC.Base.:| a2 as ->
                 MusiCompoNator.Core.$fSemigroupRhythm1 @ b1 a2 as }) -}
cf29c72530f93f72d70d88ec0fb2366d
  $fSemigroupRhythm_$cstimes ::
    GHC.Real.Integral b2 =>
    b2
    -> MusiCompoNator.Core.Rhythm b1 -> MusiCompoNator.Core.Rhythm b1
  {- Arity: 1, Strictness: <L,U> -}
d2b158d468455a599ae597f66d776a8c
  $fSemigroupSignature ::
    GHC.Base.Semigroup (MusiCompoNator.Core.Signature a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a2.
                  @ (MusiCompoNator.Core.Signature a2)
                  (MusiCompoNator.Core.Shift @ a2)
                  (MusiCompoNator.Core.$fSemigroupSignature_$csconcat @ a2)
                  (MusiCompoNator.Core.$fSemigroupSignature_$cstimes @ a2) -}
d2b158d468455a599ae597f66d776a8c
  $fSemigroupSignature1 ::
    MusiCompoNator.Core.Signature a
    -> [MusiCompoNator.Core.Signature a]
    -> MusiCompoNator.Core.Signature a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
d2b158d468455a599ae597f66d776a8c
  $fSemigroupSignature_$csconcat ::
    GHC.Base.NonEmpty (MusiCompoNator.Core.Signature a)
    -> MusiCompoNator.Core.Signature a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a2
                   (ds :: GHC.Base.NonEmpty (MusiCompoNator.Core.Signature a2)) ->
                 case ds of wild { GHC.Base.:| a3 as ->
                 MusiCompoNator.Core.$fSemigroupSignature1 @ a2 a3 as }) -}
d2b158d468455a599ae597f66d776a8c
  $fSemigroupSignature_$cstimes ::
    GHC.Real.Integral b =>
    b
    -> MusiCompoNator.Core.Signature a
    -> MusiCompoNator.Core.Signature a
  {- Arity: 1, Strictness: <L,U> -}
ad340a927f39b7c32476c50f86ed78b1
  $fSemigroupSimultanity ::
    GHC.Base.Semigroup (MusiCompoNator.Core.Simultanity pitch)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ pitch.
                  @ (MusiCompoNator.Core.Simultanity pitch)
                  (MusiCompoNator.Core.:=: @ pitch)
                  (MusiCompoNator.Core.$fSemigroupSimultanity_$csconcat @ pitch)
                  (MusiCompoNator.Core.$fSemigroupSimultanity_$cstimes @ pitch) -}
ad340a927f39b7c32476c50f86ed78b1
  $fSemigroupSimultanity1 ::
    MusiCompoNator.Core.Simultanity pitch
    -> [MusiCompoNator.Core.Simultanity pitch]
    -> MusiCompoNator.Core.Simultanity pitch
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
ad340a927f39b7c32476c50f86ed78b1
  $fSemigroupSimultanity_$csconcat ::
    GHC.Base.NonEmpty (MusiCompoNator.Core.Simultanity pitch)
    -> MusiCompoNator.Core.Simultanity pitch
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ pitch
                   (ds :: GHC.Base.NonEmpty
                            (MusiCompoNator.Core.Simultanity pitch)) ->
                 case ds of wild { GHC.Base.:| a2 as ->
                 MusiCompoNator.Core.$fSemigroupSimultanity1 @ pitch a2 as }) -}
ad340a927f39b7c32476c50f86ed78b1
  $fSemigroupSimultanity_$cstimes ::
    GHC.Real.Integral b =>
    b
    -> MusiCompoNator.Core.Simultanity pitch
    -> MusiCompoNator.Core.Simultanity pitch
  {- Arity: 1, Strictness: <L,U> -}
cf29c72530f93f72d70d88ec0fb2366d
  $fShowRhythm ::
    GHC.Show.Show beat =>
    GHC.Show.Show (MusiCompoNator.Core.Rhythm beat)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,A,C(C(U)))>m, Inline: CONLIKE,
     Unfolding: DFun: @ beat1 (v2 :: GHC.Show.Show beat1).
                  @ (MusiCompoNator.Core.Rhythm beat1)
                  (MusiCompoNator.Core.$fShowRhythm_$cshowsPrec @ beat1 v2)
                  (MusiCompoNator.Core.$fShowRhythm_$cshow @ beat1 v2)
                  (MusiCompoNator.Core.$fShowRhythm_$cshowList @ beat1 v2) -}
cf29c72530f93f72d70d88ec0fb2366d
  $fShowRhythm_$cshow ::
    GHC.Show.Show beat =>
    MusiCompoNator.Core.Rhythm beat -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(A,A,C(C(U)))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ beat1
                   ($dShow :: GHC.Show.Show beat1)
                   (x2 :: MusiCompoNator.Core.Rhythm beat1) ->
                 MusiCompoNator.Core.$fShowRhythm_$cshowsPrec
                   @ beat1
                   $dShow
                   MusiCompoNator.Core.$fFoldableSimultanity9
                   x2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cf29c72530f93f72d70d88ec0fb2366d
  $fShowRhythm_$cshowList ::
    GHC.Show.Show beat =>
    [MusiCompoNator.Core.Rhythm beat] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,A,C(C(U)))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ beat1
                   ($dShow :: GHC.Show.Show beat1)
                   (ls :: [MusiCompoNator.Core.Rhythm beat1])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (MusiCompoNator.Core.Rhythm beat1)
                   (MusiCompoNator.Core.$fShowRhythm_$cshowsPrec
                      @ beat1
                      $dShow
                      MusiCompoNator.Core.$fFoldableSimultanity9)
                   ls
                   s) -}
cf29c72530f93f72d70d88ec0fb2366d
  $fShowRhythm_$cshowsPrec ::
    GHC.Show.Show beat =>
    GHC.Types.Int -> MusiCompoNator.Core.Rhythm beat -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,A,C(C(U)))><S(S),1*U(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ beat1
                   (w :: GHC.Show.Show beat1)
                   (w1 :: GHC.Types.Int)
                   (w2 :: MusiCompoNator.Core.Rhythm beat1) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 MusiCompoNator.Core.$w$cshowsPrec @ beat1 w ww1 w2 }) -}
d2b158d468455a599ae597f66d776a8c
  $fShowSignature ::
    GHC.Show.Show a => GHC.Show.Show (MusiCompoNator.Core.Signature a)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,C(U),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a2 (v2 :: GHC.Show.Show a2).
                  @ (MusiCompoNator.Core.Signature a2)
                  (MusiCompoNator.Core.$fShowSignature_$cshowsPrec @ a2 v2)
                  (MusiCompoNator.Core.$fShowSignature_$cshow @ a2 v2)
                  (MusiCompoNator.Core.$fShowSignature_$cshowList @ a2 v2) -}
d2b158d468455a599ae597f66d776a8c
  $fShowSignature_$cshow ::
    GHC.Show.Show a =>
    MusiCompoNator.Core.Signature a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(A,C(U),A)><S,1*U> -}
d2b158d468455a599ae597f66d776a8c
  $fShowSignature_$cshowList ::
    GHC.Show.Show a =>
    [MusiCompoNator.Core.Signature a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,C(U),A)><S,1*U><L,U>,
     Unfolding: (\ @ a2
                   ($dShow :: GHC.Show.Show a2)
                   (ls :: [MusiCompoNator.Core.Signature a2])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (MusiCompoNator.Core.Signature a2)
                   (\ (x2 :: MusiCompoNator.Core.Signature a2)
                      (s1 :: GHC.Base.String)[OneShot] ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (MusiCompoNator.Core.$fShowSignature_$cshow @ a2 $dShow x2)
                      s1)
                   ls
                   s) -}
d2b158d468455a599ae597f66d776a8c
  $fShowSignature_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> MusiCompoNator.Core.Signature a -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <L,U(A,C(U),A)><L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a2
                   ($dShow :: GHC.Show.Show a2)
                   (ds :: GHC.Types.Int)
                   (x2 :: MusiCompoNator.Core.Signature a2)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b1
                      (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b1
                      c1
                      n
                      (MusiCompoNator.Core.$fShowSignature_$cshow @ a2 $dShow x2))
                   s) -}
ad340a927f39b7c32476c50f86ed78b1
  $fShowSimultanity ::
    GHC.Show.Show pitch =>
    GHC.Show.Show (MusiCompoNator.Core.Simultanity pitch)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ pitch (v2 :: GHC.Show.Show pitch).
                  @ (MusiCompoNator.Core.Simultanity pitch)
                  (MusiCompoNator.Core.$fShowSimultanity_$cshowsPrec @ pitch v2)
                  (MusiCompoNator.Core.$fShowSimultanity_$cshow @ pitch v2)
                  (MusiCompoNator.Core.$fShowSimultanity_$cshowList @ pitch v2) -}
ad340a927f39b7c32476c50f86ed78b1
  $fShowSimultanity_$cshow ::
    GHC.Show.Show pitch =>
    MusiCompoNator.Core.Simultanity pitch -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ pitch
                   ($dShow :: GHC.Show.Show pitch)
                   (x2 :: MusiCompoNator.Core.Simultanity pitch) ->
                 MusiCompoNator.Core.$fShowSimultanity_$cshowsPrec
                   @ pitch
                   $dShow
                   MusiCompoNator.Core.$fFoldableSimultanity9
                   x2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ad340a927f39b7c32476c50f86ed78b1
  $fShowSimultanity_$cshowList ::
    GHC.Show.Show pitch =>
    [MusiCompoNator.Core.Simultanity pitch] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ pitch
                   ($dShow :: GHC.Show.Show pitch)
                   (ls :: [MusiCompoNator.Core.Simultanity pitch])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (MusiCompoNator.Core.Simultanity pitch)
                   (MusiCompoNator.Core.$fShowSimultanity_$cshowsPrec
                      @ pitch
                      $dShow
                      MusiCompoNator.Core.$fFoldableSimultanity9)
                   ls
                   s) -}
ad340a927f39b7c32476c50f86ed78b1
  $fShowSimultanity_$cshowsPrec ::
    GHC.Show.Show pitch =>
    GHC.Types.Int
    -> MusiCompoNator.Core.Simultanity pitch -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><L,1*U(U)><S,1*U> -}
da1d9ac878758653d17d9afab5e0d8b3
  $tc':-: :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17583798599934971136##
                   12845653607846279497##
                   MusiCompoNator.Core.$trModule
                   MusiCompoNator.Core.$tc':-:2
                   1#
                   MusiCompoNator.Core.$tc':-:1) -}
398befef7a4fb07f6012f5d20997df23
  $tc':-:1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4f5f49e2f1ce65b3762bb555f8ff646f
  $tc':-:2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MusiCompoNator.Core.$tc':-:3) -}
ba57c337fb213a101fe8b26916cba453
  $tc':-:3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("':-:"#) -}
54f3f522494740f50b2432f46cd4ebd9
  $tc':=: :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2193420458218883483##
                   11781316471268659647##
                   MusiCompoNator.Core.$trModule
                   MusiCompoNator.Core.$tc':=:2
                   1#
                   MusiCompoNator.Core.$tc':=:1) -}
111515a1c4b14be8eeb10420c2f251f4
  $tc':=:1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8a78705cb698093b89a454ad787fd882
  $tc':=:2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MusiCompoNator.Core.$tc':=:3) -}
1ffb34202fb046b6f52cecdba55c887f
  $tc':=:3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("':=:"#) -}
6a131ba19c1a6f157bb996ce7c537ff6
  $tc':|: :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6856709519578908454##
                   249782426677499080##
                   MusiCompoNator.Core.$trModule
                   MusiCompoNator.Core.$tc':|:1
                   1#
                   MusiCompoNator.Core.$tc':-:1) -}
7b43a51f79e605786d17a0092900246e
  $tc':|:1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MusiCompoNator.Core.$tc':|:2) -}
12b878fc66709b836ca4b4a57c405f50
  $tc':|:2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("':|:"#) -}
b36b045c84b25ba2dcefe5558e79cb96
  $tc'Measure :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14509714109619251100##
                   3298391377599516213##
                   MusiCompoNator.Core.$trModule
                   MusiCompoNator.Core.$tc'Measure2
                   1#
                   MusiCompoNator.Core.$tc'Measure1) -}
aa62768f696336f0fb199d39f8a3cdb0
  $tc'Measure1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7624a8f84a5c6be77afa34ddeec8291d
  $tc'Measure2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MusiCompoNator.Core.$tc'Measure3) -}
4fd9b6301c878491ce9019360c407ab8
  $tc'Measure3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Measure"#) -}
08333d4a6b811bf9041aeda67a7f1587
  $tc'Repeat :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8256990320568477180##
                   10345926915711172116##
                   MusiCompoNator.Core.$trModule
                   MusiCompoNator.Core.$tc'Repeat2
                   1#
                   MusiCompoNator.Core.$tc'Repeat1) -}
671c877ed1a0cee67911fcc6a75fc518
  $tc'Repeat1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3b00649d386a6331ad1d533df842d700
  $tc'Repeat2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MusiCompoNator.Core.$tc'Repeat3) -}
e6864816bc1cf683cb97aa48b35e2eec
  $tc'Repeat3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Repeat"#) -}
b0687c28a0311e030a7549c66a54e4e6
  $tc'Shift :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6318432188674730607##
                   942864658953466533##
                   MusiCompoNator.Core.$trModule
                   MusiCompoNator.Core.$tc'Shift2
                   1#
                   MusiCompoNator.Core.$tc'Shift1) -}
f78aaddd9509048610932c00fad0b7bb
  $tc'Shift1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
99991a4e710480a837d6c9b0b832034c
  $tc'Shift2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MusiCompoNator.Core.$tc'Shift3) -}
5c2798aad334926efbe6ec148928d1ff
  $tc'Shift3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Shift"#) -}
d5704d9296a10ccd448a626c0c4b3126
  $tc'Silence :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12802471389838058032##
                   14941208138415881498##
                   MusiCompoNator.Core.$trModule
                   MusiCompoNator.Core.$tc'Silence2
                   1#
                   MusiCompoNator.Core.$tc'Silence1) -}
d69fb1af40adf292ade85cf90bc447dd
  $tc'Silence1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
addb06e7a2708aa83cc7e829b4055378
  $tc'Silence2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MusiCompoNator.Core.$tc'Silence3) -}
6dfc6e8c8815eb6a033dd32d819d6472
  $tc'Silence3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Silence"#) -}
152f70d38243fe3fef5864ddb2c4acde
  $tc'Sound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18095936060150534975##
                   8969201306831495544##
                   MusiCompoNator.Core.$trModule
                   MusiCompoNator.Core.$tc'Sound2
                   1#
                   MusiCompoNator.Core.$tc'Sound1) -}
4d081695798d1518d90c45c39eefa755
  $tc'Sound1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9a12ad42b996a785cfa8d641f4805364
  $tc'Sound2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MusiCompoNator.Core.$tc'Sound3) -}
a0f6f0dc5bfc4c4eb2ee02b1dec989b0
  $tc'Sound3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Sound"#) -}
3fb0e143570a1e9810227e2d1e507315
  $tc'Times :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5946693005087992432##
                   47873619704206396##
                   MusiCompoNator.Core.$trModule
                   MusiCompoNator.Core.$tc'Times2
                   1#
                   MusiCompoNator.Core.$tc'Times1) -}
608ae686a0d03f2471e10f161f54b136
  $tc'Times1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dd96c295a94365d31d46d66292f0e0bb
  $tc'Times2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MusiCompoNator.Core.$tc'Times3) -}
f4d9bfdd578bd3a355f81d750f6728f0
  $tc'Times3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Times"#) -}
354678219f04c440c9abe7aa23525ca7
  $tcMeasurable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   717502238492606871##
                   3703140628149756588##
                   MusiCompoNator.Core.$trModule
                   MusiCompoNator.Core.$tcMeasurable2
                   0#
                   MusiCompoNator.Core.$tcMeasurable1) -}
07fdaa47980e3d660060b6c54b1a2e4a
  $tcMeasurable1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ab5cde6eb2f2298900e9e9f3f45f3543
  $tcMeasurable2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Core.$tcMeasurable3) -}
61fe7d058c3574197ac613c0ed17ba51
  $tcMeasurable3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Measurable"#) -}
c871c4ded8cc35b9e91d4f0b29244725
  $tcRhythm :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17759277254651242224##
                   12501257754088834105##
                   MusiCompoNator.Core.$trModule
                   MusiCompoNator.Core.$tcRhythm1
                   0#
                   GHC.Types.krep$*Arr*) -}
0f7b55169c3447c08677bf12a54be716
  $tcRhythm1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MusiCompoNator.Core.$tcRhythm2) -}
c65879b3ec806996eaa5c0dbcfe72b34
  $tcRhythm2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rhythm"#) -}
818f24e1ed139eabc2cbeddd157cc210
  $tcSignature :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14318656560338449603##
                   14873626639521458978##
                   MusiCompoNator.Core.$trModule
                   MusiCompoNator.Core.$tcSignature1
                   0#
                   GHC.Types.krep$*Arr*) -}
1dd3f1dadac09cc8dd6531b2c12111be
  $tcSignature1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MusiCompoNator.Core.$tcSignature2) -}
9539e628c469fd717824914a52b23e31
  $tcSignature2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Signature"#) -}
2052cefa26d019ee3fe3bc7fe9ad9cae
  $tcSimultanity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15664103811684581341##
                   428687453918263944##
                   MusiCompoNator.Core.$trModule
                   MusiCompoNator.Core.$tcSimultanity1
                   0#
                   GHC.Types.krep$*Arr*) -}
452c7e64ec47cf89e1114d9cce36cacc
  $tcSimultanity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Core.$tcSimultanity2) -}
4499ae6e966aab888a757913b02cd13a
  $tcSimultanity2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Simultanity"#) -}
08822b6df3c44d73c4fa5a65f8443816
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MusiCompoNator.Core.$trModule3
                   MusiCompoNator.Core.$trModule1) -}
24c47d8a5408703c131b557ac4542a68
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MusiCompoNator.Core.$trModule2) -}
46894cc34cd77fe80f7ac9ef3768edf5
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MusiCompoNator.Core"#) -}
1b93b2b474a4bd632153452bdf3494db
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS MusiCompoNator.Core.$trModule4) -}
9ab588d93eff580f223cc0ebe835ab80
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("MusiCompoNator-0.1.0.0-9cKgrVpyNBSE6q4UMpeYIf"#) -}
cf29c72530f93f72d70d88ec0fb2366d
  $w$cshowsPrec ::
    GHC.Show.Show beat =>
    GHC.Prim.Int# -> MusiCompoNator.Core.Rhythm beat -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,A,C(C(U)))><S,U><S,1*U>,
     Inline: [2] -}
e67c7c768367f369bc9245e0274325f0
  $w$cunmeasure ::
    GHC.Num.Num a => MusiCompoNator.Core.Rhythm a -> [a]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,A)><S,1*U>, Inline: [2] -}
35024eb40e8cd6f2a1d6c0c94fe28dc3
  $wi' ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 1# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww3 { GHC.Real.:% ww4 ww5 ->
                      GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 } }) -}
54653a100d89b86f7a735db356818aa0
  $wi_ ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 1# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww { GHC.Real.:% ww1 ww2 ->
                      GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 } }) -}
9664f1fcea905a7ed13b67243c2f0434
  $wii' ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 2# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww3 { GHC.Real.:% ww4 ww5 ->
                      GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 } }) -}
6507f1d6fc20e3fb78bc6f3a62268354
  $wii_ ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 2# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww { GHC.Real.:% ww1 ww2 ->
                      GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 } }) -}
56a86c474da8c122a7d126bac807620c
  $wiii' ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 3# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww3 { GHC.Real.:% ww4 ww5 ->
                      GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 } }) -}
a348c88ed592377b79b1b1a808cdc908
  $wiii_ ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 3# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww { GHC.Real.:% ww1 ww2 ->
                      GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 } }) -}
d2ac03e401537c1f3f8f9b2fa0dd878c
  $wionian ::
    MusiCompoNator.Core.Pitch
    -> (# MusiCompoNator.Core.Pitch, [MusiCompoNator.Core.Pitch] #)
  {- Arity: 1, Strictness: <L,U(U,U)>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Pitch) ->
                 (# case w of ww { GHC.Real.:% ww1 ww2 ->
                    case GHC.Real.$w$s$c+
                           ww1
                           ww2
                           MusiCompoNator.Core.$fMeasurableRhythm2
                           GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                    GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } },
                    GHC.Types.:
                      @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                      (case w of ww { GHC.Real.:% ww1 ww2 ->
                       case GHC.Real.$w$s$c+
                              ww1
                              ww2
                              MusiCompoNator.Core.aeolian5
                              GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                       GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } })
                      (GHC.Types.:
                         @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                         (case w of ww { GHC.Real.:% ww1 ww2 ->
                          case GHC.Real.$w$s$c+
                                 ww1
                                 ww2
                                 MusiCompoNator.Core.aeolian4
                                 GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                          GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } })
                         (GHC.Types.:
                            @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                            (case w of ww { GHC.Real.:% ww1 ww2 ->
                             case GHC.Real.$w$s$c+
                                    ww1
                                    ww2
                                    MusiCompoNator.Core.aeolian3
                                    GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                             GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } })
                            (GHC.Types.:
                               @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                               (case w of ww { GHC.Real.:% ww1 ww2 ->
                                case GHC.Real.$w$s$c+
                                       ww1
                                       ww2
                                       MusiCompoNator.Core.aeolian2
                                       GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                                GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } })
                               (GHC.Types.:
                                  @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                                  (case w of ww { GHC.Real.:% ww1 ww2 ->
                                   case GHC.Real.$w$s$c+
                                          ww1
                                          ww2
                                          MusiCompoNator.Core.a1
                                          GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                                   GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } })
                                  (GHC.Types.:
                                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                                     (case w of ww { GHC.Real.:% ww1 ww2 ->
                                      case GHC.Real.$w$s$c+
                                             ww1
                                             ww2
                                             MusiCompoNator.Core.aeolian1
                                             GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                                      GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } })
                                     (GHC.Types.[]
                                        @ (GHC.Real.Ratio GHC.Integer.Type.Integer))))))) #)) -}
ecf8e05a2c5b7defaaff7291c450c7ef
  $wiv' ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 4# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww3 { GHC.Real.:% ww4 ww5 ->
                      GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 } }) -}
66e568a8895cb0cd24dc16c31ab8a360
  $wiv_ ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 4# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww { GHC.Real.:% ww1 ww2 ->
                      GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 } }) -}
8e599584d0891eab254895aefc165110
  $wix' ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 9# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww3 { GHC.Real.:% ww4 ww5 ->
                      GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 } }) -}
73c688b66c05777958a9ef3963da8659
  $wix_ ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 9# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww { GHC.Real.:% ww1 ww2 ->
                      GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 } }) -}
a779d1874036820ead18fe1b0c85c2b4
  $wstep ::
    GHC.Prim.Int#
    -> MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [2] -}
a2deb6d32c633ba67ebe6d995c841b01
  $wv' ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 5# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww3 { GHC.Real.:% ww4 ww5 ->
                      GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 } }) -}
3b4b9ab8ee0e11c21f38587aa299475e
  $wv_ ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 5# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww { GHC.Real.:% ww1 ww2 ->
                      GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 } }) -}
4cb2e967b4b38fb885d9e95eb4163105
  $wvi' ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 6# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww3 { GHC.Real.:% ww4 ww5 ->
                      GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 } }) -}
25b2ae04509ab7ae18eb2033f2deff6f
  $wvi_ ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 6# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww { GHC.Real.:% ww1 ww2 ->
                      GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 } }) -}
fdb85605772625ce938e54b742594bd3
  $wvii' ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 7# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww3 { GHC.Real.:% ww4 ww5 ->
                      GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 } }) -}
ef55b9e8768521b124ea20e75772c4fb
  $wvii_ ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 7# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww { GHC.Real.:% ww1 ww2 ->
                      GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 } }) -}
392cacdda95ecb24df2b842c9cde540d
  $wviii' ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 8# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww3 { GHC.Real.:% ww4 ww5 ->
                      GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 } }) -}
771b3bcba21edf5152a41f970b33c411
  $wviii_ ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 8# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww { GHC.Real.:% ww1 ww2 ->
                      GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 } }) -}
9c226480c30ae891eb48d1698fa4a929
  $wx' ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 10# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww3 { GHC.Real.:% ww4 ww5 ->
                      GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 } }) -}
2d91366653a6fb3687e51ef03d9d62f4
  $wx_ ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 10# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww { GHC.Real.:% ww1 ww2 ->
                      GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 } }) -}
f032ddbf795d315eafe7fbc0211fca15
  $wxi' ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 11# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww3 { GHC.Real.:% ww4 ww5 ->
                      GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 } }) -}
455b4882b975d9c4734520e943b065fe
  $wxi_ ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 11# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww { GHC.Real.:% ww1 ww2 ->
                      GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 } }) -}
b100363775b42a1cf9d25743ffc81c81
  $wxii' ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 12# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww3 { GHC.Real.:% ww4 ww5 ->
                      GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 } }) -}
6a5df637675939837d60b1af85b31f83
  $wxii_ ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 12# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww { GHC.Real.:% ww1 ww2 ->
                      GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 } }) -}
7a0d8ad211523c71ec99f65605ca8b7f
  $wxiii' ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 13# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww3 { GHC.Real.:% ww4 ww5 ->
                      GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 } }) -}
9d06531ef9a656cfdf6099d44836088d
  $wxiii_ ::
    MusiCompoNator.Core.Scale
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wstep 13# w of wild {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
                      of {}
                   : x2 ds1
                   -> case x2 of ww { GHC.Real.:% ww1 ww2 ->
                      GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 } }) -}
aad1103b06dad80c73ecc027c866974f
  $wxs :: GHC.Prim.Int# -> [GHC.Real.Ratio GHC.Integer.Type.Integer]
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [2] -}
02703d99345a1e4ca5b2cb73af2cde25
  $wxs1 :: GHC.Prim.Int# -> [GHC.Real.Ratio GHC.Integer.Type.Integer]
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [2] -}
9901e728adfed6eafd372e07266aadc0
  $wxs2 :: GHC.Prim.Int# -> [GHC.Real.Ratio GHC.Integer.Type.Integer]
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [2] -}
418ae98b2611750f0ea4d72ad21e2fd4
  $wxs3 :: GHC.Prim.Int# -> [GHC.Real.Ratio GHC.Integer.Type.Integer]
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [2] -}
5352203de0e4512d41a1ca1119f425de
  $wxs4 :: GHC.Prim.Int# -> [GHC.Real.Ratio GHC.Integer.Type.Integer]
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [2] -}
a3e3b21e6151eeb8601ba0fcb2715af1
  type Beat = GHC.Real.Rational
5523319abac081310005112e39f3f161
  class Measurable (m :: * -> *) where
    withSignature :: (GHC.Num.Num a, GHC.Classes.Ord a) =>
                     MusiCompoNator.Core.Signature a -> m a -> m a
    signature :: (GHC.Num.Num a, GHC.Classes.Ord a) =>
                 m a -> MusiCompoNator.Core.Signature a
    measure :: (GHC.Num.Num a, GHC.Classes.Ord a) => [a] -> m a
    unmeasure :: (GHC.Num.Num a, GHC.Classes.Ord a) => m a -> [a]
    {-# MINIMAL withSignature, signature, measure, unmeasure #-}
f368faff747bfc90bc7896c9e248b0ca
  type Pitch = GHC.Real.Rational
cf29c72530f93f72d70d88ec0fb2366d
  data Rhythm beat
    = Measure [beat]
    | Repeat GHC.Types.Int (MusiCompoNator.Core.Rhythm beat)
    | (MusiCompoNator.Core.Rhythm beat)
      :|:
      (MusiCompoNator.Core.Rhythm beat)
    | (MusiCompoNator.Core.Rhythm beat)
      :-:
      (MusiCompoNator.Core.Rhythm beat)
e31af48d081ddec33910e18dde1cef67
  type Scale = [MusiCompoNator.Core.Pitch]
58cf171a1956da9095904aab43a7d81f
  type Sequence harmony = [harmony]
d2b158d468455a599ae597f66d776a8c
  data Signature a
    = Times GHC.Types.Int a
    | Shift (MusiCompoNator.Core.Signature a)
            (MusiCompoNator.Core.Signature a)
ad340a927f39b7c32476c50f86ed78b1
  data Simultanity pitch
    = Silence
    | Sound pitch
    | (MusiCompoNator.Core.Simultanity pitch)
      :=:
      (MusiCompoNator.Core.Simultanity pitch)
eddb7f576f427b28ffedfdba904ea076
  a :: MusiCompoNator.Core.Pitch
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   MusiCompoNator.Core.a1
                   GHC.Real.$fEnumRatio1) -}
7facae8e52f2285827b6ab104fc58b31
  a1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (9) -}
8b409f8e60a87fbe751b69213207a3ad
  aeolian :: MusiCompoNator.Core.Pitch -> MusiCompoNator.Core.Scale
  {- Arity: 1, Strictness: <L,1*U(U,U)>,
     Unfolding: (\ (q :: MusiCompoNator.Core.Pitch) ->
                 MusiCompoNator.Core.$wstep
                   6#
                   (case MusiCompoNator.Core.$wionian
                           (case q of ww { GHC.Real.:% ww1 ww2 ->
                            case GHC.Real.$w$s$c-
                                   ww1
                                   ww2
                                   MusiCompoNator.Core.a1
                                   GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                            GHC.Real.:%
                              @ GHC.Integer.Type.Integer
                              ww7
                              ww8 } }) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ MusiCompoNator.Core.Pitch ww1 ww2 })) -}
ed61d6a4d8a81682e854f682aa528c19
  aeolian1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (11) -}
a345bd76538ae5caf9664bb7eb33a701
  aeolian2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (7) -}
44ce8bb1277b71852bb8b7fbe82374ed
  aeolian3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
e8e84bdbdb060c3f665dc8e828b2daf6
  aeolian4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
2da9c4eb96f7d6b1f3553cba080249be
  aeolian5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
a679e641efafcad5a7a5dabd646f9c7d
  b :: MusiCompoNator.Core.Pitch
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   MusiCompoNator.Core.aeolian1
                   GHC.Real.$fEnumRatio1) -}
66a026a386bfb9a921498cfef25c16a4
  beat ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    b -> MusiCompoNator.Core.Rhythm b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>m1,
     Unfolding: InlineRule (3, True, False)
                (\ @ b1
                   ($dNum :: GHC.Num.Num b1)
                   ($dOrd :: GHC.Classes.Ord b1)
                   (b2 :: b1) ->
                 MusiCompoNator.Core.Measure
                   @ b1
                   (GHC.Types.: @ b1 b2 (GHC.Types.[] @ b1))) -}
4ebb977e324102af39f55b31a38c4735
  c :: MusiCompoNator.Core.Pitch
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   MusiCompoNator.Core.$fMeasurableRhythm2
                   GHC.Real.$fEnumRatio1) -}
59b048bc0f79798a66ce815de9b5c13f
  d :: MusiCompoNator.Core.Pitch
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   MusiCompoNator.Core.aeolian5
                   GHC.Real.$fEnumRatio1) -}
c4f71a6e38c31f412b94631d898f73a6
  dorian :: MusiCompoNator.Core.Pitch -> MusiCompoNator.Core.Scale
  {- Arity: 1, Strictness: <L,1*U(U,U)>,
     Unfolding: (\ (q :: MusiCompoNator.Core.Pitch) ->
                 MusiCompoNator.Core.$wstep
                   2#
                   (case MusiCompoNator.Core.$wionian
                           (case q of ww { GHC.Real.:% ww1 ww2 ->
                            case GHC.Real.$w$s$c-
                                   ww1
                                   ww2
                                   MusiCompoNator.Core.aeolian5
                                   GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                            GHC.Real.:%
                              @ GHC.Integer.Type.Integer
                              ww7
                              ww8 } }) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ MusiCompoNator.Core.Pitch ww1 ww2 })) -}
af14a3f8bc572b51d9f6aae3e239165f
  dotted ::
    MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
    -> MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
  {- Arity: 1,
     Unfolding: (MusiCompoNator.Core.$fFunctorRhythm_$cfmap
                   @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                   @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                   MusiCompoNator.Core.dotted1) -}
9e0712b5d3231f72d9bcbe380cff4ad3
  dotted1 ::
    GHC.Real.Ratio GHC.Integer.Type.Integer
    -> GHC.Real.Ratio GHC.Integer.Type.Integer
  {- Arity: 1,
     Unfolding: (GHC.Real.$fFractionalRatio_$s$c*
                   MusiCompoNator.Core.dotted2) -}
1a099a6614e15d20c36bd5ad987126bc
  dotted2 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- Unfolding: (case GHC.Real.$w$s$cfromRational
                        MusiCompoNator.Core.dotted3
                        MusiCompoNator.Core.aeolian5 of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
ee4e09a70564ddb59fce117abb432a0d
  dotted3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
da87ce4905f55fe73ba1a628b52762f0
  down :: MusiCompoNator.Core.Pitch -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (y :: MusiCompoNator.Core.Pitch) ->
                 case y of ww { GHC.Real.:% ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } }) -}
8fac6e8a536dfcd13a92a31869d7c0ca
  down_dt :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (12) -}
0097e7a3e51658eb9665f1f43d182e85
  duration ::
    (GHC.Num.Num a, GHC.Classes.Ord a,
     MusiCompoNator.Core.Measurable m) =>
    m a -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U,U,U,U,U,U,U)><L,U><L,1*U(A,A,A,1*C1(C1(C(U))))>,
     Unfolding: (\ @ a2
                   @ m :: * -> *
                   ($dNum :: GHC.Num.Num a2)
                   ($dOrd :: GHC.Classes.Ord a2)
                   ($dMeasurable :: MusiCompoNator.Core.Measurable m) ->
                 let {
                   f5 :: a2
                   = GHC.Num.fromInteger
                       @ a2
                       $dNum
                       MusiCompoNator.Core.$fMeasurableRhythm2
                 } in
                 let {
                   g1 :: m a2 -> [a2]
                   = MusiCompoNator.Core.unmeasure @ m $dMeasurable @ a2 $dNum $dOrd
                 } in
                 \ (x2 :: m a2) ->
                 letrec {
                   go :: [a2] -> a2 -> a2
                     <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ (ds :: [a2]) (eta :: a2) ->
                     case ds of wild {
                       [] -> eta : y ys -> go ys (GHC.Num.+ @ a2 $dNum eta y) }
                 } in
                 go (g1 x2) f5) -}
cef55628bf7360dec282f1919013b930
  e :: MusiCompoNator.Core.Pitch
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   MusiCompoNator.Core.aeolian4
                   GHC.Real.$fEnumRatio1) -}
f5ad2ef6bda04a5d27e65866b921a653
  en :: MusiCompoNator.Core.Beat
  {- Unfolding: (case GHC.Real.$w$s$cfromRational
                        MusiCompoNator.Core.en2
                        MusiCompoNator.Core.en1 of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
e0f8ea7375daa1a1fdca59d97d69c7c4
  en1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (8) -}
3427203e4904c8145837e56202c5e681
  en2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
92db793681d6362ad4e136416d909511
  ens ::
    GHC.Types.Int
    -> MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
  {- Arity: 1, Strictness: <L,1*U(U)>m1, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 MusiCompoNator.Core.Measure
                   @ MusiCompoNator.Core.Beat
                   (case w of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.<# 0# y of lwild {
                      DEFAULT -> GHC.Types.[] @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                      1# -> MusiCompoNator.Core.$wxs y } })) -}
1831df2dea01e902e7437100c831e375
  f :: MusiCompoNator.Core.Pitch
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   MusiCompoNator.Core.aeolian3
                   GHC.Real.$fEnumRatio1) -}
cd3a981ce0244c767fc6be071ab1afac
  flat :: MusiCompoNator.Core.Pitch -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (y :: MusiCompoNator.Core.Pitch) ->
                 case y of ww { GHC.Real.:% ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.en2
                        GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } }) -}
83651cb43ca2e455119ed71855b5679a
  g :: MusiCompoNator.Core.Pitch
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   MusiCompoNator.Core.aeolian2
                   GHC.Real.$fEnumRatio1) -}
01965c97cb9ed42815deadc5560102fa
  hn :: MusiCompoNator.Core.Beat
  {- Unfolding: (case GHC.Real.$w$s$cfromRational
                        MusiCompoNator.Core.en2
                        MusiCompoNator.Core.aeolian5 of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
350b85468c3eef41f48a335819784e14
  hns ::
    GHC.Types.Int
    -> MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
  {- Arity: 1, Strictness: <L,1*U(U)>m1, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 MusiCompoNator.Core.Measure
                   @ MusiCompoNator.Core.Beat
                   (case w of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.<# 0# y of lwild {
                      DEFAULT -> GHC.Types.[] @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                      1# -> MusiCompoNator.Core.$wxs1 y } })) -}
323398b23ff43fe6cbc279870a1f06d2
  i :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.step
                        MusiCompoNator.Core.$fMeasurableRhythm1
                        x2 of wild {
                   [] -> GHC.List.badHead @ MusiCompoNator.Core.Pitch
                   : x3 ds1 -> x3 }) -}
a439bad599c2fe5ccf05e348df72d8bf
  i' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wi' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
d17b2e43988bb659634659b36d6afe6c
  i'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wi' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
bfcb655df34ad857071b399c4325b0e0
  i_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wi_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
353cc383f78233a84aa37f9f8a1d0228
  i__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wi_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
290d50aeb8620def6e058bfecd27ddbf
  ii :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.step MusiCompoNator.Core.ii1 x2 of wild {
                   [] -> GHC.List.badHead @ MusiCompoNator.Core.Pitch
                   : x3 ds1 -> x3 }) -}
abf0a4df55c603eec878d708cb406bfd
  ii' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wii' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
6dd07cf3feb65957aafad045d9c70962
  ii'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wii' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
804f21998abaf84c3138775faee22b29
  ii1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
b1db3ef44791b64f4f10e0a4640cb5ea
  ii_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wii_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
f445ed0be9fe079cdff3300e2cb1285f
  ii__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wii_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
89f991ab42bcd8b422e2affc001c8b6f
  iii :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.step MusiCompoNator.Core.iii1 x2 of wild {
                   [] -> GHC.List.badHead @ MusiCompoNator.Core.Pitch
                   : x3 ds1 -> x3 }) -}
afc6e02c0136e77bd93e53d9a9590c2e
  iii' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wiii' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
f399ccf15d7c9851ba43d0d984e0038d
  iii'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wiii' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
3234a241f9965b2aa817a3c3ef3d08d6
  iii1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
42b6c439527e0ec02c1fceec970165af
  iii_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wiii_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
1408be0ec64d271459f637f85cc48d1e
  iii__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wiii_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
07863c4c42cff80a6de26a7ce10e39b7
  iiv :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True) MusiCompoNator.Core.iii -}
e74ef7654b18cc08d93bff9cdf5a9011
  iiv' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wiii' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
4613b4bfa1cf22c1c77bfc2e0b4a3a92
  iiv'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wiii' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
b08fa6e171fdfc4c5b9543503c749494
  iiv_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wiii_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
2220bf552af36be7c730716f39d25b66
  iiv__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wiii_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
41da9722806b2bf6d88cefacd1bf47d4
  iix :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True) MusiCompoNator.Core.viii -}
9c364088e6ff419e05abeebfb66b74e6
  iix' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wviii' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
315cf3b55502cd573739131a61bcd155
  iix'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wviii' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
3448f4a86533d2b29ab48914b9a6df39
  iix_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wviii_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
2d0f70a874e3105a06a39d369b53bba8
  iix__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wviii_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
33447324e83275c5726e5ea717a3d509
  index ::
    GHC.Types.Int
    -> MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x2 :: GHC.Types.Int) (eta :: MusiCompoNator.Core.Scale) ->
                 case x2 of wild { GHC.Types.I# x3 ->
                 MusiCompoNator.Core.step
                   (GHC.Types.I# (GHC.Prim.+# x3 1#))
                   eta }) -}
66c0189b404d364e82458c261cfe1ec9
  invertl :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale
  {- Arity: 1, Strictness: <L,U>m2, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 GHC.Types.:
                   @ MusiCompoNator.Core.Pitch
                   (MusiCompoNator.Core.invertl_go
                      w
                      (GHC.List.lastError @ MusiCompoNator.Core.Pitch))
                   (GHC.List.init @ MusiCompoNator.Core.Pitch w)) -}
4c0147b212723490aafc8b8be4386223
  invertl_go ::
    [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.Core.Pitch -> MusiCompoNator.Core.Pitch
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U,U)>m -}
cc7b5312b4409fd766e1a1803fd9aeac
  invertr :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (scale :: MusiCompoNator.Core.Scale) ->
                 case scale of wild {
                   []
                   -> case GHC.List.scanl2
                      ret_ty [GHC.Real.Ratio GHC.Integer.Type.Integer]
                      of {}
                   : ds1 xs
                   -> GHC.Base.++
                        @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                        xs
                        (GHC.Types.:
                           @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                           (case ds1 of ww3 { GHC.Real.:% ww4 ww5 ->
                            case GHC.Real.$w$s$c+
                                   MusiCompoNator.Core.down_dt
                                   GHC.Real.$fEnumRatio1
                                   ww4
                                   ww5 of ww6 { (#,#) ww7 ww8 ->
                            GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } })
                           (GHC.Types.[] @ (GHC.Real.Ratio GHC.Integer.Type.Integer))) }) -}
6433c007d290122dc3a687567f70d176
  ionian :: MusiCompoNator.Core.Pitch -> MusiCompoNator.Core.Scale
  {- Arity: 1, Strictness: <L,U(U,U)>m2, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Pitch) ->
                 case MusiCompoNator.Core.$wionian w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ MusiCompoNator.Core.Pitch ww1 ww2 }) -}
a3290cbc39204d509970c0b2061a059a
  iv :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.step MusiCompoNator.Core.iv1 x2 of wild {
                   [] -> GHC.List.badHead @ MusiCompoNator.Core.Pitch
                   : x3 ds1 -> x3 }) -}
463473555e457aede539411e86f082ce
  iv' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wiv' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
e177ccd0e60b01268f3cd2485526f0df
  iv'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wiv' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
3ad9fabe8e9c4ebbd4a20d730b887010
  iv1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
6fdb042e5072e8e0664c38549a367afb
  iv_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wiv_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
40babe7aa0756e60123a17db94508bb4
  iv__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wiv_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
29f127f5646a53ce10a3a8af8ee85069
  ix :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.step MusiCompoNator.Core.ix1 x2 of wild {
                   [] -> GHC.List.badHead @ MusiCompoNator.Core.Pitch
                   : x3 ds1 -> x3 }) -}
50c2fa74f9d8d7ed5e2500c875998c12
  ix' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wix' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
b7ee87b32958e99452ebce18c755a9cd
  ix'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wix' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
7a27da24e2ff9dbbad34b9b1b531a478
  ix1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
d4ad23709886024d78fa64c58ae2f7c6
  ix_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wix_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
e795a8d0083fd37485c7246857f9ba39
  ix__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wix_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
795c5d61e09abdabf56048c83ece1638
  locrian :: MusiCompoNator.Core.Pitch -> MusiCompoNator.Core.Scale
  {- Arity: 1, Strictness: <L,1*U(U,U)>,
     Unfolding: (\ (q :: MusiCompoNator.Core.Pitch) ->
                 MusiCompoNator.Core.$wstep
                   7#
                   (case MusiCompoNator.Core.$wionian
                           (case q of ww { GHC.Real.:% ww1 ww2 ->
                            case GHC.Real.$w$s$c-
                                   ww1
                                   ww2
                                   MusiCompoNator.Core.aeolian1
                                   GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                            GHC.Real.:%
                              @ GHC.Integer.Type.Integer
                              ww7
                              ww8 } }) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ MusiCompoNator.Core.Pitch ww1 ww2 })) -}
f27b2a21c11fac4b9ac5530f20676fec
  lydian :: MusiCompoNator.Core.Pitch -> MusiCompoNator.Core.Scale
  {- Arity: 1, Strictness: <L,1*U(U,U)>,
     Unfolding: (\ (q :: MusiCompoNator.Core.Pitch) ->
                 MusiCompoNator.Core.$wstep
                   4#
                   (case MusiCompoNator.Core.$wionian
                           (case q of ww { GHC.Real.:% ww1 ww2 ->
                            case GHC.Real.$w$s$c-
                                   ww1
                                   ww2
                                   MusiCompoNator.Core.aeolian3
                                   GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                            GHC.Real.:%
                              @ GHC.Integer.Type.Integer
                              ww7
                              ww8 } }) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ MusiCompoNator.Core.Pitch ww1 ww2 })) -}
27cc284f093f8a94c59299bf468c27ee
  mixolydian ::
    MusiCompoNator.Core.Pitch -> MusiCompoNator.Core.Scale
  {- Arity: 1, Strictness: <L,1*U(U,U)>,
     Unfolding: (\ (q :: MusiCompoNator.Core.Pitch) ->
                 MusiCompoNator.Core.$wstep
                   5#
                   (case MusiCompoNator.Core.$wionian
                           (case q of ww { GHC.Real.:% ww1 ww2 ->
                            case GHC.Real.$w$s$c-
                                   ww1
                                   ww2
                                   MusiCompoNator.Core.aeolian2
                                   GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                            GHC.Real.:%
                              @ GHC.Integer.Type.Integer
                              ww7
                              ww8 } }) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ MusiCompoNator.Core.Pitch ww1 ww2 })) -}
261dceb291c24c5c9809dba56e30bde9
  phrygian :: MusiCompoNator.Core.Pitch -> MusiCompoNator.Core.Scale
  {- Arity: 1, Strictness: <L,1*U(U,U)>,
     Unfolding: (\ (q :: MusiCompoNator.Core.Pitch) ->
                 MusiCompoNator.Core.$wstep
                   3#
                   (case MusiCompoNator.Core.$wionian
                           (case q of ww { GHC.Real.:% ww1 ww2 ->
                            case GHC.Real.$w$s$c-
                                   ww1
                                   ww2
                                   MusiCompoNator.Core.aeolian4
                                   GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                            GHC.Real.:%
                              @ GHC.Integer.Type.Integer
                              ww7
                              ww8 } }) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ MusiCompoNator.Core.Pitch ww1 ww2 })) -}
87f6a4ad8337f785e6c766cdb6d21c6c
  qn :: MusiCompoNator.Core.Beat
  {- Unfolding: (case GHC.Real.$w$s$cfromRational
                        MusiCompoNator.Core.en2
                        MusiCompoNator.Core.aeolian4 of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
00b32a24daa8216c1f419d79f0f289cd
  qns ::
    GHC.Types.Int
    -> MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
  {- Arity: 1, Strictness: <L,1*U(U)>m1, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 MusiCompoNator.Core.Measure
                   @ MusiCompoNator.Core.Beat
                   (case w of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.<# 0# y of lwild {
                      DEFAULT -> GHC.Types.[] @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                      1# -> MusiCompoNator.Core.$wxs2 y } })) -}
e4b45f99a7ecf58c52795f706bf553f0
  root :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.head @ MusiCompoNator.Core.Pitch) -}
e0a9ec6dd291410aa182583c8c2cde28
  sharp :: MusiCompoNator.Core.Pitch -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Real.Ratio GHC.Integer.Type.Integer) ->
                 case w1 of ww3 { GHC.Real.:% ww4 ww5 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.en2
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 of ww6 { (#,#) ww7 ww8 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } }) -}
ddde362a8637323b36c2f4e74090eebd
  sn :: MusiCompoNator.Core.Beat
  {- Unfolding: (case GHC.Real.$w$s$cfromRational
                        MusiCompoNator.Core.en2
                        MusiCompoNator.Core.sn1 of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
9c06a1874763d479b33e826c47550639
  sn1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (16) -}
c706a78c34f806c3741eaf1662428791
  sns ::
    GHC.Types.Int
    -> MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
  {- Arity: 1, Strictness: <L,1*U(U)>m1, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 MusiCompoNator.Core.Measure
                   @ MusiCompoNator.Core.Beat
                   (case w of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.<# 0# y of lwild {
                      DEFAULT -> GHC.Types.[] @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                      1# -> MusiCompoNator.Core.$wxs3 y } })) -}
1152fb075eb1d740780b8bd248e34436
  step ::
    GHC.Types.Int
    -> MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><L,U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: MusiCompoNator.Core.Scale) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MusiCompoNator.Core.$wstep ww1 w1 }) -}
ad84be4bd1be3d5c3e9db5f1d3cf3d27
  triplet ::
    MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
    -> MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
  {- Arity: 1,
     Unfolding: (MusiCompoNator.Core.$fFunctorRhythm_$cfmap
                   @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                   @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                   MusiCompoNator.Core.triplet1) -}
c66ab326c366865f480ab4012706bb05
  triplet1 ::
    GHC.Real.Ratio GHC.Integer.Type.Integer
    -> GHC.Real.Ratio GHC.Integer.Type.Integer
  {- Arity: 1,
     Unfolding: (GHC.Real.$fFractionalRatio_$s$c*
                   MusiCompoNator.Core.triplet2) -}
6f48050cdb00f834f98fb872d0211802
  triplet2 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- Unfolding: (case GHC.Real.$w$s$cfromRational
                        MusiCompoNator.Core.aeolian5
                        MusiCompoNator.Core.dotted3 of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
f9ee0138f5ab512616cc35a7160a6486
  tuplet ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
    -> MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (n :: GHC.Integer.Type.Integer)
                   (d1 :: GHC.Integer.Type.Integer) ->
                 MusiCompoNator.Core.$fFunctorRhythm_$cfmap
                   @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                   @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                   (let {
                      w :: GHC.Real.Ratio GHC.Integer.Type.Integer
                      = case GHC.Real.$w$s$cfromRational n d1 of ww { (#,#) ww1 ww2 ->
                        GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }
                    } in
                    \ (w1 :: GHC.Real.Ratio GHC.Integer.Type.Integer) ->
                    case w of ww { GHC.Real.:% ww1 ww2 ->
                    case w1 of ww3 { GHC.Real.:% ww4 ww5 ->
                    case GHC.Real.$w$sreduce
                           (GHC.Integer.Type.timesInteger ww1 ww4)
                           (GHC.Integer.Type.timesInteger ww2 ww5) of ww6 { (#,#) ww7 ww8 ->
                    GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } } })) -}
b63175f690e30d327a3a4875f44671b9
  up :: MusiCompoNator.Core.Pitch -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: GHC.Real.Ratio GHC.Integer.Type.Integer) ->
                 case w1 of ww3 { GHC.Real.:% ww4 ww5 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww4
                        ww5 of ww6 { (#,#) ww7 ww8 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } }) -}
c4b7c16e9fd9e2e7d82ac5daa2703d31
  v :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.step MusiCompoNator.Core.v1 x2 of wild {
                   [] -> GHC.List.badHead @ MusiCompoNator.Core.Pitch
                   : x3 ds1 -> x3 }) -}
4fe21665c554ae6b85506a6fcb09af7b
  v' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wv' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
90166faac0c0f39e75c0d9e980f01bdb
  v'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wv' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
96eb48c2fa5367449589c6090d96243b
  v1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
b711c5b1d491d72b061422e094276a8a
  v_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wv_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
2c303c25e2da73bbd76c3d34dccec0f8
  v__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wv_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
7a46549c5373e2ae93c6c2dd110e5ad8
  vi :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.step MusiCompoNator.Core.vi1 x2 of wild {
                   [] -> GHC.List.badHead @ MusiCompoNator.Core.Pitch
                   : x3 ds1 -> x3 }) -}
134aa479e4739a067e42a3d282cb566e
  vi' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wvi' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
78dd8d7950fd144033c05e3689bbea95
  vi'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wvi' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
7076f9466bee06e17412698cb2e85d85
  vi1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
27be15d48b80051feebc9a159ae87f11
  vi_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wvi_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
49bbf30669085141a9fc950cf3306d1c
  vi__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wvi_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
ab292db3379b3404f87f837ab95cd3a7
  vii :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.step MusiCompoNator.Core.vii1 x2 of wild {
                   [] -> GHC.List.badHead @ MusiCompoNator.Core.Pitch
                   : x3 ds1 -> x3 }) -}
d5ca1908cb32620c195f7a86850d9e9f
  vii' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wvii' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
7889ba8dd8d191054cc97cc38cc0fdab
  vii'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wvii' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
778148dd78a57eda6ea46d2996104599
  vii1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
deb221b2a9362801246cda97447ce4e2
  vii_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wvii_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
122664d19d953a84590f6087ebd7b068
  vii__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wvii_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
6417c720c27299a81eb157d66e6b1762
  viii :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.step
                        MusiCompoNator.Core.viii1
                        x2 of wild {
                   [] -> GHC.List.badHead @ MusiCompoNator.Core.Pitch
                   : x3 ds1 -> x3 }) -}
4dc52742212d8396de6b4e6b3baae7ae
  viii' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wviii' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
7d37d12f8cc3aec7e39dafef029cbf10
  viii'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wviii' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
c7b9a89208acdf7975c539b69827081d
  viii1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
befb830c08e7522d5fbee1c541d006c2
  viii_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wviii_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
539db578623e9992fe6f0b1b17168a13
  viii__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wviii_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
da05a9094dc2239cb61ee3d87b4b7fd9
  wn :: MusiCompoNator.Core.Beat
  {- Unfolding: (case GHC.Real.$w$s$cfromRational
                        MusiCompoNator.Core.en2
                        MusiCompoNator.Core.en2 of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
a1b96b59af6d3f586c07840b37af9718
  wns ::
    GHC.Types.Int
    -> MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
  {- Arity: 1, Strictness: <L,1*U(U)>m1, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 MusiCompoNator.Core.Measure
                   @ MusiCompoNator.Core.Beat
                   (case w of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.<# 0# y of lwild {
                      DEFAULT -> GHC.Types.[] @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                      1# -> MusiCompoNator.Core.$wxs4 y } })) -}
bcad17a0b34bc327871086e4049ce4bf
  x :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.step MusiCompoNator.Core.x1 x2 of wild {
                   [] -> GHC.List.badHead @ MusiCompoNator.Core.Pitch
                   : x3 ds1 -> x3 }) -}
2daf00abc9243f5d35c0fcaf3da5235f
  x' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wx' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
589d1037c16310518c74bb08c653c12b
  x'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wx' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
be5f236568772f9c00090ac8753efb3d
  x1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
46ebf0dba8e1ff4742de30f1d51b7fba
  x_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wx_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
5e94dc1c63c4f924b58e5e7eccac2337
  x__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wx_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
756159b2e769f408760b537b9dc562a0
  xi :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.step MusiCompoNator.Core.xi1 x2 of wild {
                   [] -> GHC.List.badHead @ MusiCompoNator.Core.Pitch
                   : x3 ds1 -> x3 }) -}
b4337efcf7b077de01ba72d1fec31553
  xi' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wxi' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
f369cf361d9a2a3383f6ade4015663bb
  xi'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wxi' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
eeb52f0bbcdd7b0047a5fde002821966
  xi1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
0d4637ff07fec7f807a6fc93f9379a4b
  xi_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wxi_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
0e80032b653b7fee9ead54aa88221cd1
  xi__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wxi_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
85888c7fe1ea6646853d0273f26817d4
  xii :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.step MusiCompoNator.Core.xii1 x2 of wild {
                   [] -> GHC.List.badHead @ MusiCompoNator.Core.Pitch
                   : x3 ds1 -> x3 }) -}
e789b77edf5e34bcb6c0de64134f90af
  xii' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wxii' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
dd7d3013ad1a3e0f116f6446da436fa4
  xii'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wxii' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
14e35ecf6c81bfa1eac48acdcd00db01
  xii1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 12#) -}
e9188cc036809edc2d652a8cda6834d3
  xii_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wxii_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
1480590aefef49bd739708009f482805
  xii__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wxii_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
e3c2e2a9d17fed97c5c70cd48f76289d
  xiii :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.step
                        MusiCompoNator.Core.xiii1
                        x2 of wild {
                   [] -> GHC.List.badHead @ MusiCompoNator.Core.Pitch
                   : x3 ds1 -> x3 }) -}
8c630c5d8be2adef092761eb85dc9195
  xiii' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wxiii' w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
c1c95b303c3e42ec084021cbed010d52
  xiii'' :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wxiii' w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c+
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
a6ef7114ca46262c3d1a9c139db0c180
  xiii1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 13#) -}
59270b7f2e9acda28de690957422967b
  xiii_ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wxiii_ w of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
0f3d229b14a7d09148fcde90cce489b6
  xiii__ :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, Strictness: <L,U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Core.$wxiii_ w of ww { (#,#) ww1 ww2 ->
                 case GHC.Real.$w$s$c-
                        ww1
                        ww2
                        MusiCompoNator.Core.down_dt
                        GHC.Real.$fEnumRatio1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww4 ww5 } }) -}
instance [safe] Data.Foldable.Foldable [MusiCompoNator.Core.Simultanity]
  = MusiCompoNator.Core.$fFoldableSimultanity
instance [safe] GHC.Base.Functor [MusiCompoNator.Core.Rhythm]
  = MusiCompoNator.Core.$fFunctorRhythm
instance [safe] GHC.Base.Functor [MusiCompoNator.Core.Simultanity]
  = MusiCompoNator.Core.$fFunctorSimultanity
instance [safe] MusiCompoNator.Core.Measurable [MusiCompoNator.Core.Rhythm]
  = MusiCompoNator.Core.$fMeasurableRhythm
instance [safe] GHC.Base.Monoid [MusiCompoNator.Core.Simultanity]
  = MusiCompoNator.Core.$fMonoidSimultanity
instance [safe] GHC.Base.Semigroup [MusiCompoNator.Core.Rhythm]
  = MusiCompoNator.Core.$fSemigroupRhythm
instance [safe] GHC.Base.Semigroup [MusiCompoNator.Core.Signature]
  = MusiCompoNator.Core.$fSemigroupSignature
instance [safe] GHC.Base.Semigroup [MusiCompoNator.Core.Simultanity]
  = MusiCompoNator.Core.$fSemigroupSimultanity
instance [safe] GHC.Show.Show [MusiCompoNator.Core.Rhythm]
  = MusiCompoNator.Core.$fShowRhythm
instance [safe] GHC.Show.Show [MusiCompoNator.Core.Signature]
  = MusiCompoNator.Core.$fShowSignature
instance [safe] GHC.Show.Show [MusiCompoNator.Core.Simultanity]
  = MusiCompoNator.Core.$fShowSimultanity
"SPEC $cfoldMap @ Any _" forall @ a2
                                ($dMonoid :: GHC.Base.Monoid Data.Semigroup.Internal.Any)
  MusiCompoNator.Core.$fFoldableSimultanity_$cfoldMap @ Data.Semigroup.Internal.Any
                                                      @ a2
                                                      $dMonoid
  = MusiCompoNator.Core.$fFoldableSimultanity_$s$cfoldMap @ a2
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

