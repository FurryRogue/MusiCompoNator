
==================== FINAL INTERFACE ====================
2019-05-14 04:18:34.539208156 UTC

interface MusiCompoNator-0.1.0.0-IGHgGetelKJ3ieYvvXydhc:MusiCompoNator.GeneralMidi 8063
  interface hash: 8b836fdb4f1fc705583814d5e0a6df8d
  ABI hash: 6bd37b5463a4c3953c8d056bb76e31c8
  export-list hash: 27b46489175af3c46e819f5c376576fa
  orphan hash: 318a8a30f056f122e5e01970881a5b92
  flag hash: 5ac350979ae091721e33adcb1a7c634a
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  MusiCompoNator.GeneralMidi.allPitch
  MusiCompoNator.GeneralMidi.allocCh
  MusiCompoNator.GeneralMidi.beatSize
  MusiCompoNator.GeneralMidi.bendw14
  MusiCompoNator.GeneralMidi.closeMC
  MusiCompoNator.GeneralMidi.collectPitches
  MusiCompoNator.GeneralMidi.defaultMidiPlayerState
  MusiCompoNator.GeneralMidi.depPhrasing
  MusiCompoNator.GeneralMidi.durationOf
  MusiCompoNator.GeneralMidi.endPitch
  MusiCompoNator.GeneralMidi.events
  MusiCompoNator.GeneralMidi.freeCh
  MusiCompoNator.GeneralMidi.getPb
  MusiCompoNator.GeneralMidi.handleEvent
  MusiCompoNator.GeneralMidi.hit
  MusiCompoNator.GeneralMidi.keyPress
  MusiCompoNator.GeneralMidi.lockUntil
  MusiCompoNator.GeneralMidi.midiVoice
  MusiCompoNator.GeneralMidi.mis
  MusiCompoNator.GeneralMidi.moveHead
  MusiCompoNator.GeneralMidi.notes
  MusiCompoNator.GeneralMidi.pbSteps
  MusiCompoNator.GeneralMidi.pbValue
  MusiCompoNator.GeneralMidi.phrase2eventMidi
  MusiCompoNator.GeneralMidi.putChannels
  MusiCompoNator.GeneralMidi.putCursor
  MusiCompoNator.GeneralMidi.resolveDep
  MusiCompoNator.GeneralMidi.resolvePhrasing
  MusiCompoNator.GeneralMidi.runMidiComposition
  MusiCompoNator.GeneralMidi.setBend
  MusiCompoNator.GeneralMidi.setSounding
  MusiCompoNator.GeneralMidi.startPitch
  MusiCompoNator.GeneralMidi.ticks
  MusiCompoNator.GeneralMidi.ve
  MusiCompoNator.GeneralMidi.writeEvent
  MusiCompoNator.GeneralMidi.writeEvents
  MusiCompoNator.GeneralMidi.writeOff
  MusiCompoNator.GeneralMidi.writeOn
  MusiCompoNator.GeneralMidi.Duration
  MusiCompoNator.GeneralMidi.EffectMidi{MusiCompoNator.GeneralMidi.MidiBend MusiCompoNator.GeneralMidi.MidiCut MusiCompoNator.GeneralMidi.MidiNotes MusiCompoNator.GeneralMidi.MidiTie MusiCompoNator.GeneralMidi.MidiVolume}
  MusiCompoNator.GeneralMidi.EventMidi{MusiCompoNator.GeneralMidi.Event}
  MusiCompoNator.GeneralMidi.MidiComposition
  MusiCompoNator.GeneralMidi.MidiInstrument{MusiCompoNator.GeneralMidi.Percussion MusiCompoNator.GeneralMidi.Piano}
  MusiCompoNator.GeneralMidi.MidiState{MusiCompoNator.GeneralMidi.MPS bank channels cursorB midi_events pb_sense pending quater sounding subdivision title velocity}
module dependencies: MusiCompoNator.Composition MusiCompoNator.Core
package dependencies: array-0.5.3.0 base-4.12.0.0 binary-0.8.6.0
                      bytestring-0.10.8.2 containers-0.6.0.1 deepseq-1.4.4.0
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0 mtl-2.2.2 transformers-0.5.5.0
                      zmidi-core-0.9.0
orphans: bytestring-0.10.8.2:Data.ByteString.Builder
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
import  -/  MusiCompoNator.Composition 8d84f1313db8a08e50e922a17313781e
  exports: 7d9424dac735b981a2ae78abb2234d78
  BendNext bf3c3852d344f9ec27395b097dfca51a
  Legato ea0bab394bed798e49a0546de7fdacce
  Phrase2 5d6f7b050b9b855adf3d14983463b005
  PhraseControl cb4d9de434048b8a17a5eae94374cec7
  Staccato 73de3f759355ef353c0de8af89d546f4
  TieNext 60ac0f7d23e63651fec40e80a2c31c39
  Voice 2e25dcaa65d0bf72796a58d31a68fca6
  Volume 3879bdc118b90e8e323d890063d5a2a4
  runVoice 50bb127adef85228d6cde696b0c47d3f
  unPhrase 9d5247246b1926496dca5bba8e7b1109
import  -/  MusiCompoNator.Core dbe69f021eb82eefbd6401926a0c3422
  exports: 8486fc8e0f9f670b51995717530546ca
  :=: cdef2ead1def023d62ca417110eb2b39
  Beat c6ca62f1d079d68a23afd68951c4f5e0
  Measurable 0d4d69ceea19c970984f8cd3c4048cdd
  Pitch 537f8031d76874bfdc1b47051e2e6fdc
  Scale 1b3fe72e3480886670d3576d5e99dc86
  Silence 9fea1553cbfacc50d91d5e74e0833040
  Sound d1fbe85b4b84f66c3cdbca5ce7830610
  unmeasure 72bff9471e0e3a28b81cfd9512a19584
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:Data.Functor 22aac80fdb6c7b7f60b4aaab86afee64
import  -/  base-4.12.0.0:Data.List ce2c69da408fdc014383cede9e1f9adf
import  -/  base-4.12.0.0:Data.OldList c2cab40fed7d27b5e717779f9a3c09ea
import  -/  base-4.12.0.0:Data.Ratio 96f9a1de850e5ea66ed6c5bd6817461b
import  -/  base-4.12.0.0:Data.Traversable 257e9f3b6739f5bfbaaf0ac0abb0ddc5
import  -/  base-4.12.0.0:Data.Tuple c92a835d04b6c075a7031d4e28e53c71
import  -/  base-4.12.0.0:Data.Word 5f1b3eee5598586d205b9ce2031bc057
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:GHC.Num 847723f2584d989dac1eada133ac3fb8
import  -/  base-4.12.0.0:GHC.Real f7dad82c1d43d80823865d3e6c6636e0
import  -/  base-4.12.0.0:GHC.Show 4e438f26d903388cc6c2c5d64ed01b98
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 7f56f3d142debd8666df241a1ddc7887
import  -/  mtl-2.2.2:Control.Monad.RWS 57f7419fbcadb058d9bb05ae36071220
import  -/  mtl-2.2.2:Control.Monad.Reader.Class bfd53ec9164fa16880d07775c83c6ec0
import  -/  mtl-2.2.2:Control.Monad.State.Class 7b1f06840718b1757a1de559220ba63b
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 7dda5503ee3995cbb9b9f0826404450e
import  -/  transformers-0.5.5.0:Control.Monad.Trans.RWS.Lazy 0c9453256ffabab7a67587e9f3b1fffd
import  -/  zmidi-core-0.9.0:ZMidi.Core 53b17082a5f95040cd3a036a84cc9bdc
import  -/  zmidi-core-0.9.0:ZMidi.Core.Datatypes 5dde0f0c0267a1142a1e38c7f09c1fa2
1933f04941aa57fc766597e12cac40ad
  $fFunctorEventMidi ::
    GHC.Base.Functor MusiCompoNator.GeneralMidi.EventMidi
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.GeneralMidi.EventMidi
                  MusiCompoNator.GeneralMidi.$fFunctorEventMidi_$cfmap
                  MusiCompoNator.GeneralMidi.$fFunctorEventMidi_$c<$ -}
1933f04941aa57fc766597e12cac40ad
  $fFunctorEventMidi_$c<$ ::
    a
    -> MusiCompoNator.GeneralMidi.EventMidi b
    -> MusiCompoNator.GeneralMidi.EventMidi a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,A,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (x1 :: a)
                   (ds :: MusiCompoNator.GeneralMidi.EventMidi b) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.Event b1 a1 e ->
                 MusiCompoNator.GeneralMidi.Event @ a b1 x1 e }) -}
1933f04941aa57fc766597e12cac40ad
  $fFunctorEventMidi_$cfmap ::
    (a -> b)
    -> MusiCompoNator.GeneralMidi.EventMidi a
    -> MusiCompoNator.GeneralMidi.EventMidi b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f :: a -> b)
                   (ds :: MusiCompoNator.GeneralMidi.EventMidi a) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.Event b1 a1 e ->
                 MusiCompoNator.GeneralMidi.Event @ b b1 (f a1) e }) -}
ca7f5074834c9f76e0aaa755c05f0c88
  $fShowEffectMidi ::
    GHC.Show.Show MusiCompoNator.GeneralMidi.EffectMidi
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.GeneralMidi.EffectMidi
                  MusiCompoNator.GeneralMidi.$fShowEffectMidi_$cshowsPrec
                  MusiCompoNator.GeneralMidi.$fShowEffectMidi_$cshow
                  MusiCompoNator.GeneralMidi.$fShowEffectMidi_$cshowList -}
ca7f5074834c9f76e0aaa755c05f0c88
  $fShowEffectMidi1 ::
    MusiCompoNator.GeneralMidi.EffectMidi -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: MusiCompoNator.GeneralMidi.EffectMidi)
                   (w1 :: GHC.Base.String) ->
                 MusiCompoNator.GeneralMidi.$w$cshowsPrec 0# w w1) -}
0b7a8d8c6cd14d7cd127b7930e88fd1b
  $fShowEffectMidi2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
ca7f5074834c9f76e0aaa755c05f0c88
  $fShowEffectMidi_$cshow ::
    MusiCompoNator.GeneralMidi.EffectMidi -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x1 :: MusiCompoNator.GeneralMidi.EffectMidi) ->
                 MusiCompoNator.GeneralMidi.$fShowEffectMidi_$cshowsPrec
                   MusiCompoNator.GeneralMidi.$fShowEffectMidi2
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ca7f5074834c9f76e0aaa755c05f0c88
  $fShowEffectMidi_$cshowList ::
    [MusiCompoNator.GeneralMidi.EffectMidi] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MusiCompoNator.GeneralMidi.EffectMidi])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MusiCompoNator.GeneralMidi.EffectMidi
                   MusiCompoNator.GeneralMidi.$fShowEffectMidi1
                   ls
                   s) -}
ca7f5074834c9f76e0aaa755c05f0c88
  $fShowEffectMidi_$cshowsPrec ::
    GHC.Types.Int
    -> MusiCompoNator.GeneralMidi.EffectMidi -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MusiCompoNator.GeneralMidi.EffectMidi)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 MusiCompoNator.GeneralMidi.$w$cshowsPrec ww1 w1 w2 }) -}
1933f04941aa57fc766597e12cac40ad
  $fShowEventMidi ::
    GHC.Show.Show a =>
    GHC.Show.Show (MusiCompoNator.GeneralMidi.EventMidi a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (MusiCompoNator.GeneralMidi.EventMidi a)
                  (MusiCompoNator.GeneralMidi.$fShowEventMidi_$cshowsPrec @ a v)
                  (MusiCompoNator.GeneralMidi.$fShowEventMidi_$cshow @ a v)
                  (MusiCompoNator.GeneralMidi.$fShowEventMidi_$cshowList @ a v) -}
93f96c41de8e65d480aa1cbb8c4445db
  $fShowEventMidi1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MusiCompoNator.GeneralMidi.$fShowEventMidi2) -}
ade75218b918b4508d5fb0becaa8026f
  $fShowEventMidi2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Event "#) -}
bd5645c13a130ffc486c871827e8d87e
  $fShowEventMidi3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
1933f04941aa57fc766597e12cac40ad
  $fShowEventMidi_$cshow ::
    GHC.Show.Show a =>
    MusiCompoNator.GeneralMidi.EventMidi a -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(U(U,U),U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x1 :: MusiCompoNator.GeneralMidi.EventMidi a) ->
                 MusiCompoNator.GeneralMidi.$fShowEventMidi_$cshowsPrec
                   @ a
                   $dShow
                   MusiCompoNator.GeneralMidi.$fShowEffectMidi2
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1933f04941aa57fc766597e12cac40ad
  $fShowEventMidi_$cshowList ::
    GHC.Show.Show a =>
    [MusiCompoNator.GeneralMidi.EventMidi a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [MusiCompoNator.GeneralMidi.EventMidi a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (MusiCompoNator.GeneralMidi.EventMidi a)
                   (MusiCompoNator.GeneralMidi.$fShowEventMidi_$cshowsPrec
                      @ a
                      $dShow
                      MusiCompoNator.GeneralMidi.$fShowEffectMidi2)
                   ls
                   s) -}
1933f04941aa57fc766597e12cac40ad
  $fShowEventMidi_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> MusiCompoNator.GeneralMidi.EventMidi a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U(U,U),U,U)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: MusiCompoNator.GeneralMidi.EventMidi a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { MusiCompoNator.GeneralMidi.Event ww3 ww4 ww5 ->
                 MusiCompoNator.GeneralMidi.$w$cshowsPrec1
                   @ a
                   w
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
006dd9a9c7821b5c03d5246e24055661
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Maybe.Maybe GHC.Word.Word8)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Maybe.Maybe GHC.Word.Word8)
                  (\ (ds :: GHC.Maybe.Maybe GHC.Word.Word8)
                     (ds1 :: GHC.Maybe.Maybe GHC.Word.Word8) ->
                   case ds of wild {
                     GHC.Maybe.Nothing
                     -> case ds1 of wild1 {
                          GHC.Maybe.Nothing -> GHC.Types.True
                          GHC.Maybe.Just ipv -> GHC.Types.False }
                     GHC.Maybe.Just a1
                     -> case ds1 of wild1 {
                          GHC.Maybe.Nothing -> GHC.Types.False
                          GHC.Maybe.Just b1 -> GHC.Word.eqWord8 a1 b1 } })
                  MusiCompoNator.GeneralMidi.$s$fEqMaybe_$s$fEqMaybe_$c/= -}
ff4d38e402b103e326ada2870d872ede
  $s$fEqMaybe_$s$fEqMaybe_$c/= ::
    GHC.Maybe.Maybe GHC.Word.Word8
    -> GHC.Maybe.Maybe GHC.Word.Word8 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x1 :: GHC.Maybe.Maybe GHC.Word.Word8)
                   (y :: GHC.Maybe.Maybe GHC.Word.Word8) ->
                 case x1 of wild {
                   GHC.Maybe.Nothing
                   -> case y of wild1 {
                        GHC.Maybe.Nothing -> GHC.Types.False
                        GHC.Maybe.Just ipv -> GHC.Types.True }
                   GHC.Maybe.Just a1
                   -> case y of wild1 {
                        GHC.Maybe.Nothing -> GHC.Types.True
                        GHC.Maybe.Just b1
                        -> case GHC.Word.eqWord8 a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
6cce2fca7bf3b54d7578ab9fa62ac6d2
  $s^1 :: GHC.Types.Double
  {- Strictness: x -}
eb9e812d4afe5cfd8a27470b6a4cd6d3
  $s^2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
34ede24e138816a34c89b3d8f3e9e97a
  $seven1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
85842fdcd3a3923c9352382cc8934e2d
  $smaximum1 :: MusiCompoNator.Core.Pitch
  {- Strictness: x -}
d47877defc7cdb6e78e9ccf58f8fe5ac
  $tc'Event :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3335772005274301522##
                   6195985706415831827##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'Event2
                   1#
                   MusiCompoNator.GeneralMidi.$tc'Event1) -}
017980ea9fb09e3fbbcd93a1d37eea9f
  $tc'Event1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9dec5599c63d25749e997195bc8fb21e
  $tc'Event2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'Event3) -}
f2641556b9ba6450e8fcaf9c7149fd8a
  $tc'Event3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Event"#) -}
fe1320e109df5362a0fe695b7031ca00
  $tc'MPS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11228496882497027631##
                   6591487301709022930##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'MPS2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'MPS1) -}
239adfed6bda33c087795ed9197bf437
  $tc'MPS1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2a04edc55abf3f8afe53a63fa82e8bfa
  $tc'MPS2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'MPS3) -}
33aee35ff944aa78d2476e68c76a98dd
  $tc'MPS3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MPS"#) -}
9e08f95209d44539dddf9dc82d98d6ad
  $tc'MidiBend :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6433674036690951974##
                   1312188716575633404##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'MidiBend2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'MidiBend1) -}
89957e5b5d727490443e8320ced6fc87
  $tc'MidiBend1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
119c3f53e91c03768038d3d174a4cb28
  $tc'MidiBend2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'MidiBend3) -}
3e91981be28c264e87204c2afc48c89f
  $tc'MidiBend3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MidiBend"#) -}
a01e7b5c69fbb9e5f0744f3059050181
  $tc'MidiCut :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14207948230253749679##
                   14073092389016917476##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'MidiCut2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'MidiCut1) -}
97daeb9716943fcd9b522e44e3e21f95
  $tc'MidiCut1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d68e37d46fb3c6bc3d34be2071ff6c94
  $tc'MidiCut2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'MidiCut3) -}
1c68db6ac1827784b4b7141c566274b8
  $tc'MidiCut3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MidiCut"#) -}
4c468b85bc30df69091103429ea9dfae
  $tc'MidiNotes :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3464122681890364101##
                   6824601431615010653##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'MidiNotes2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'MidiNotes1) -}
2f7923f6e0961e560d2d5a0acf336744
  $tc'MidiNotes1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e2f48f21b60d6e0c3d18076c85a604b5
  $tc'MidiNotes2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'MidiNotes3) -}
bf3e5b4e03db8bd1112e9cceba70dbf3
  $tc'MidiNotes3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MidiNotes"#) -}
182931b5dabcdaabaaba67a8669aa206
  $tc'MidiTie :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   895627502108813963##
                   16327329210876580651##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'MidiTie1
                   0#
                   MusiCompoNator.GeneralMidi.$tc'MidiBend1) -}
6bd258e11fce9eb6630702792f0cbf20
  $tc'MidiTie1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'MidiTie2) -}
e10763866f3360ebcb36adbd2c78009e
  $tc'MidiTie2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MidiTie"#) -}
aac89220c369c0abe8270f6924b8f4f0
  $tc'MidiVolume :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5838095262149126959##
                   17234370525675730018##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'MidiVolume2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'MidiVolume1) -}
cbdb6dd329e54bc2b9ca56740bbc64d2
  $tc'MidiVolume1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c5fde2cd74ea30fcc6a8197178ed9981
  $tc'MidiVolume2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'MidiVolume3) -}
829135c64292262c1aa5ebff64456ef2
  $tc'MidiVolume3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MidiVolume"#) -}
202867a9a7c733f290bbba9ed449cc3d
  $tc'Percussion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1032946085843698825##
                   14995609418228395661##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'Percussion2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'Percussion1) -}
fe4eed728f642c90ad27ad1541b4c2a4
  $tc'Percussion1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0b77624d42b2c5ef4121ed6f0201af99
  $tc'Percussion2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'Percussion3) -}
0a3bfb855de77275d6d9048ee9c02f86
  $tc'Percussion3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Percussion"#) -}
dd56d0aee6f5dd9875eb3a9d175d7533
  $tc'Piano :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3875923914149518601##
                   2638763356490595245##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tc'Piano2
                   0#
                   MusiCompoNator.GeneralMidi.$tc'Piano1) -}
a5091c95f1d1f613c15daf0e612a8fa2
  $tc'Piano1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fea9f2d25a3f931b7ce2d4025168abb5
  $tc'Piano2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tc'Piano3) -}
0a4aedeb89056f272536857f1b9fb03e
  $tc'Piano3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Piano"#) -}
b80d0013e62f6592ce24c05dd3a2ee05
  $tcEffectMidi :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9919322612666861201##
                   15678745564997707841##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tcEffectMidi1
                   0#
                   GHC.Types.krep$*) -}
d340d1088cc3064f3fd6fc4998d855c5
  $tcEffectMidi1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tcEffectMidi2) -}
a5cad81e2f1fc5758068afe98148fdfa
  $tcEffectMidi2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EffectMidi"#) -}
74054facdad91193ad34ff5c0c8e6adb
  $tcEventMidi :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4715618843690117664##
                   2903342114413422764##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tcEventMidi1
                   0#
                   GHC.Types.krep$*Arr*) -}
6af3097b70d5b8cbf1a36e2eec04c5fd
  $tcEventMidi1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tcEventMidi2) -}
0d17cd767e1a52eb7048504a0b6db1d1
  $tcEventMidi2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EventMidi"#) -}
ab63c8d2d394e800606e38d9471c59ba
  $tcMidiInstrument :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11049170789190451430##
                   1737762351712204949##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tcMidiInstrument1
                   0#
                   GHC.Types.krep$*) -}
6ded6136056f812558ad6104e4ae271d
  $tcMidiInstrument1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tcMidiInstrument2) -}
3ac65e61a5151ee1040e429131e99134
  $tcMidiInstrument2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MidiInstrument"#) -}
b75f84af1591045be4c08c60ece9eea8
  $tcMidiState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9859117688834905317##
                   11067287180371274125##
                   MusiCompoNator.GeneralMidi.$trModule
                   MusiCompoNator.GeneralMidi.$tcMidiState1
                   0#
                   GHC.Types.krep$*) -}
258b547509705eb4315ae15962fa450f
  $tcMidiState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$tcMidiState2) -}
5cba7e7574d8634940815101ec12e846
  $tcMidiState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MidiState"#) -}
07f20cca43ebfbfcb0af2e0070dec50a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MusiCompoNator.GeneralMidi.$trModule3
                   MusiCompoNator.GeneralMidi.$trModule1) -}
ccebd098b7fd01a9d12c6e15161e73e3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$trModule2) -}
6fcb0b5633c8cb662b12b9a8c9ad4308
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MusiCompoNator.GeneralMidi"#) -}
7e67dfe7d49927088e88797072eba874
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.GeneralMidi.$trModule4) -}
32245d7477db05db8d3b378c8c8d871c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("MusiCompoNator-0.1.0.0-IGHgGetelKJ3ieYvvXydhc"#) -}
ca7f5074834c9f76e0aaa755c05f0c88
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> MusiCompoNator.GeneralMidi.EffectMidi
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [2] -}
25cb6eb4f196bb593135e43b31bb4efc
  $w$cshowsPrec1 ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> MusiCompoNator.Core.Beat
    -> a
    -> MusiCompoNator.GeneralMidi.EffectMidi
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U(U,U)><L,U><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: MusiCompoNator.Core.Beat)
                   (ww2 :: a)
                   (ww3 :: MusiCompoNator.GeneralMidi.EffectMidi) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       MusiCompoNator.GeneralMidi.$fShowEventMidi3
                       ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x1 :: GHC.Base.String) ->
                     case ww1 of ww4 { GHC.Real.:% ww5 ww6 ->
                     case GHC.Real.$w$s$cshowsPrec
                            11#
                            ww5
                            ww6
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (f (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.showSpace1
                                     (MusiCompoNator.GeneralMidi.$w$cshowsPrec
                                        11#
                                        ww3
                                        x1)))) of ww7 { (#,#) ww8 ww9 ->
                     GHC.Types.: @ GHC.Types.Char ww8 ww9 } }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        MusiCompoNator.GeneralMidi.$fShowEventMidi1
                        (g x1)
                   1#
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           MusiCompoNator.GeneralMidi.$fShowEventMidi1
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) }) -}
dd3f9c6b21253b29637847a896b2508f
  $w$s^ ::
    GHC.Types.Double -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>, Inline: [1],
     Unfolding: (\ (w :: GHC.Types.Double)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger#
                        w1
                        MusiCompoNator.GeneralMidi.$s^2 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.eqInteger#
                             w1
                             MusiCompoNator.GeneralMidi.$s^2 of wild1 {
                        DEFAULT
                        -> case w of ww { GHC.Types.D# ww1 ->
                           MusiCompoNator.GeneralMidi.$wf ww1 w1 }
                        1# -> 1.0## }
                   1#
                   -> case MusiCompoNator.GeneralMidi.$s^1
                      ret_ty GHC.Prim.Double#
                      of {} }) -}
ab3ec219fde58130012cbe1de94a26bd
  $wallocCh ::
    MusiCompoNator.GeneralMidi.Duration
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# GHC.Maybe.Maybe GHC.Word.Word8,
          MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 2,
     Strictness: <L,1*U(U,U)><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>,
     Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.GeneralMidi.Duration)
                   (w1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 let {
                   ds1 :: Data.Functor.Identity.Identity
                            (GHC.Maybe.Maybe GHC.Word.Word8,
                             MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
                   = case w1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                     case ds of wild1 {
                       []
                       -> (GHC.Maybe.Nothing @ GHC.Word.Word8, wild,
                           GHC.Types.[]
                             @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))
                            `cast`
                          (Nth:3
                               (Nth:3
                                    (<[MusiCompoNator.Core.Pitch]>_R
                                     ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                                   <(GHC.Maybe.Maybe GHC.Word.Word8,
                                                     MusiCompoNator.GeneralMidi.MidiState,
                                                     [(GHC.Integer.Type.Integer,
                                                       ZMidi.Core.Datatypes.MidiEvent)])>_R))))
                       : ch rest
                       -> (GHC.Maybe.Just @ GHC.Word.Word8 ch,
                           MusiCompoNator.GeneralMidi.MPS
                             rest
                             (GHC.Types.:
                                @ (MusiCompoNator.Core.Beat, GHC.Word.Word8)
                                (case ds5 of ww { GHC.Real.:% ww1 ww2 ->
                                 case w of ww3 { GHC.Real.:% ww4 ww5 ->
                                 case GHC.Real.$w$s$c+ ww1 ww2 ww4 ww5 of ww6 { (#,#) ww7 ww8 ->
                                 GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } } },
                                 ch)
                                ds2)
                             ds3
                             ds4
                             ds5
                             ds6
                             ds7
                             ds8
                             ds9
                             ds10
                             ds11,
                           GHC.Types.[]
                             @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))
                            `cast`
                          (Nth:3
                               (Nth:3
                                    (<[MusiCompoNator.Core.Pitch]>_R
                                     ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                                   <(GHC.Maybe.Maybe GHC.Word.Word8,
                                                     MusiCompoNator.GeneralMidi.MidiState,
                                                     [(GHC.Integer.Type.Integer,
                                                       ZMidi.Core.Datatypes.MidiEvent)])>_R)))) } }
                 } in
                 (# case ds1
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(GHC.Maybe.Maybe GHC.Word.Word8,
                                MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                    b1 },
                    case ds1
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(GHC.Maybe.Maybe GHC.Word.Word8,
                                MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                    s'' },
                    case ds1
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(GHC.Maybe.Maybe GHC.Word.Word8,
                                MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                    w' } #)) -}
be84fd943a318005662765330e4977d8
  $wbeatSize ::
    (forall a. (GHC.Num.Num a, GHC.Classes.Ord a) => m a -> [a])
    -> m MusiCompoNator.Core.Beat -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <C(C(C(S))),1*C1(C1(C1(U)))><L,U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a. (GHC.Num.Num a, GHC.Classes.Ord a) => m a -> [a])
                   (w :: m MusiCompoNator.Core.Beat) ->
                 MusiCompoNator.GeneralMidi.beatSize_go
                   (ww
                      @ MusiCompoNator.Core.Beat
                      GHC.Real.$fFractionalRatio_$s$fNumRatio
                      GHC.Real.$fOrdRatio_$s$fOrdRatio
                      w)
                   MusiCompoNator.GeneralMidi.beatSize1) -}
5e6eb4726d1732f937fdc42c4415f733
  $wf ::
    GHC.Prim.Double# -> GHC.Integer.Type.Integer -> GHC.Prim.Double#
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [2] -}
1ad8a1dc515cbf6f8cf5b4e38be0aa3d
  $wkeyPress ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Prim.Word#
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger#
                        ww1
                        MusiCompoNator.GeneralMidi.$s^2 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.integerToWord
                             (GHC.Integer.Type.divInteger ww ww1) of wild1 { DEFAULT ->
                      GHC.Prim.narrow8Word# wild1 }
                   1# -> case GHC.Real.divZeroError ret_ty GHC.Prim.Word# of {} }) -}
0cd8aa0ce0084ca46e59a9aa7d2ca104
  $wmidiVoice ::
    MusiCompoNator.GeneralMidi.MidiInstrument
    -> MusiCompoNator.Composition.Voice a
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# (), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 4,
     Strictness: <L,U><L,1*C1(U(1*U,U(1*U,1*U,A)))><L,U><L,1*U(U,U,U,U,U,U,U,U,U,U,1*U)>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: MusiCompoNator.GeneralMidi.MidiInstrument)
                   (w1 :: MusiCompoNator.Composition.Voice a)
                   (w2 :: [MusiCompoNator.Core.Pitch])
                   (w3 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (# GHC.Tuple.(),
                    case w3 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                    let {
                      phs :: [MusiCompoNator.Composition.Phrase2]
                      = case MusiCompoNator.Composition.$wrunVoice
                               @ a
                               w1
                               w2 of ww { (#,,#) ww1 ww2 ww3 ->
                        ww2 }
                    } in
                    MusiCompoNator.GeneralMidi.MPS
                      ds
                      ds1
                      ds2
                      ds3
                      ds4
                      ds5
                      ds6
                      (case GHC.Base.map
                              @ (MusiCompoNator.Composition.Phrase
                                   MusiCompoNator.Composition.PhraseControl
                                   (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                                   MusiCompoNator.Core.Beat)
                              @ GHC.Integer.Type.Integer
                              MusiCompoNator.GeneralMidi.beatSize_$sbeatSize
                              phs of wild1 {
                         [] -> GHC.List.maximum1
                         : ipv ipv1
                         -> GHC.Integer.Type.lcmInteger
                              ds7
                              (GHC.List.maximum_go ipv1 ipv) })
                      ds8
                      ds9
                      (GHC.Base.++
                         @ (MusiCompoNator.GeneralMidi.EventMidi
                              (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int))
                         (MusiCompoNator.GeneralMidi.phrase2eventMidi
                            @ MusiCompoNator.GeneralMidi.MidiInstrument
                            w
                            phs)
                         ds10) },
                    GHC.Types.[]
                      @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent) #)) -}
79923b4b6742d8d2390f0b0a040699b0
  $wmoveHead ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# (), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>,
     Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 let {
                   ds1 :: Data.Functor.Identity.Identity
                            ((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
                   = case w1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                     letrec {
                       $wgo2 :: [(MusiCompoNator.Core.Beat, GHC.Word.Word8)]
                                -> MusiCompoNator.GeneralMidi.MidiState
                                -> (# (), MusiCompoNator.GeneralMidi.MidiState,
                                      [(GHC.Integer.Type.Integer,
                                        ZMidi.Core.Datatypes.MidiEvent)] #)
                         {- Arity: 2, Strictness: <S,1*U><L,U(U,U,U,U,U,U,U,U,U,U,U)>,
                            Inline: [2] -}
                       = \ (w2 :: [(MusiCompoNator.Core.Beat, GHC.Word.Word8)])
                           (w3 :: MusiCompoNator.GeneralMidi.MidiState) ->
                         case w2 of wild1 {
                           []
                           -> (# GHC.Tuple.(), w3,
                                 GHC.Types.[]
                                   @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent) #)
                           : y ys
                           -> case y of wild2 { (,) b' ch ->
                              case b' of ww { GHC.Real.:% ww1 ww2 ->
                              case ds5 of ww3 { GHC.Real.:% ww4 ww5 ->
                              case GHC.Integer.Type.leInteger#
                                     (GHC.Integer.Type.timesInteger ww1 ww5)
                                     (GHC.Integer.Type.timesInteger ww4 ww2) of wild3 {
                                DEFAULT -> $wgo2 ys w3
                                1#
                                -> let {
                                     ds12 :: Data.Functor.Identity.Identity
                                               ((), MusiCompoNator.GeneralMidi.MidiState,
                                                [(GHC.Integer.Type.Integer,
                                                  ZMidi.Core.Datatypes.MidiEvent)])
                                     = case $wgo2
                                              ys
                                              (case w3 of wild4 { MusiCompoNator.GeneralMidi.MPS ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                                               MusiCompoNator.GeneralMidi.MPS
                                                 (GHC.Types.: @ GHC.Word.Word8 ch ds13)
                                                 ds14
                                                 ds15
                                                 ds16
                                                 ds17
                                                 ds18
                                                 ds19
                                                 ds20
                                                 ds21
                                                 ds22
                                                 ds23 }) of ww7 { (#,,#) ww8 ww9 ww10 ->
                                       (ww8, ww9, ww10)
                                         `cast`
                                       (Sym (Data.Functor.Identity.N:Identity[0]
                                                 <((), MusiCompoNator.GeneralMidi.MidiState,
                                                   [(GHC.Integer.Type.Integer,
                                                     ZMidi.Core.Datatypes.MidiEvent)])>_R)) }
                                   } in
                                   (# case ds12
                                             `cast`
                                           (Data.Functor.Identity.N:Identity[0]
                                                <((), MusiCompoNator.GeneralMidi.MidiState,
                                                  [(GHC.Integer.Type.Integer,
                                                    ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild4 { (,,) b1 s'' w' ->
                                      b1 },
                                      case ds12
                                             `cast`
                                           (Data.Functor.Identity.N:Identity[0]
                                                <((), MusiCompoNator.GeneralMidi.MidiState,
                                                  [(GHC.Integer.Type.Integer,
                                                    ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild4 { (,,) b1 s'' w' ->
                                      s'' },
                                      GHC.Base.++
                                        @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)
                                        (GHC.Types.[]
                                           @ (GHC.Integer.Type.Integer,
                                              ZMidi.Core.Datatypes.MidiEvent))
                                        (case ds12
                                                `cast`
                                              (Data.Functor.Identity.N:Identity[0]
                                                   <((), MusiCompoNator.GeneralMidi.MidiState,
                                                     [(GHC.Integer.Type.Integer,
                                                       ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild4 { (,,) b1 s'' w' ->
                                         w' }) #) } } } } }
                     } in
                     case $wgo2
                            ds2
                            (MusiCompoNator.GeneralMidi.MPS
                               ds
                               (letrec {
                                  go :: [(MusiCompoNator.Core.Beat, GHC.Word.Word8)]
                                        -> [(MusiCompoNator.Core.Beat, GHC.Word.Word8)]
                                    {- Arity: 1, Strictness: <S,1*U> -}
                                  = \ (ds12 :: [(MusiCompoNator.Core.Beat, GHC.Word.Word8)]) ->
                                    case ds12 of wild1 {
                                      []
                                      -> GHC.Types.[] @ (MusiCompoNator.Core.Beat, GHC.Word.Word8)
                                      : y ys
                                      -> case y of wild2 { (,) b' ch ->
                                         case b' of ww { GHC.Real.:% ww1 ww2 ->
                                         case ds5 of ww3 { GHC.Real.:% ww4 ww5 ->
                                         case GHC.Real.$w$s$ccompare ww1 ww2 ww4 ww5 of wild3 {
                                           DEFAULT -> go ys
                                           GHC.Types.GT
                                           -> GHC.Types.:
                                                @ (MusiCompoNator.Core.Beat, GHC.Word.Word8)
                                                wild2
                                                (go ys) } } } } }
                                } in
                                go ds2)
                               ds3
                               ds4
                               w
                               ds6
                               ds7
                               ds8
                               ds9
                               ds10
                               ds11) of ww { (#,,#) ww1 ww2 ww3 ->
                     (ww1, ww2, ww3)
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <((), MusiCompoNator.GeneralMidi.MidiState,
                                 [(GHC.Integer.Type.Integer,
                                   ZMidi.Core.Datatypes.MidiEvent)])>_R)) } }
                 } in
                 (# case ds1
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <((), MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                    b1 },
                    case ds1
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <((), MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                    s'' },
                    case ds1
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <((), MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                    w' } #)) -}
55805b35fd9eb310e24cfb6d166c5316
  $wnotes ::
    MusiCompoNator.Core.Beat
    -> [MusiCompoNator.Composition.PhraseControl]
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.Core.Beat
    -> (# MusiCompoNator.Core.Beat, GHC.Types.Int,
          MusiCompoNator.GeneralMidi.EffectMidi #)
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><L,U>, Inline: [2] -}
4b473209d466411e001b9d15fd2a8160
  $wpbValue ::
    GHC.Prim.Word#
    -> GHC.Prim.Word#
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Prim.Word#
  {- Arity: 4, Strictness: <S,U><S,U><S,1*U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Prim.Word#)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.wordToInteger ww of dt1 { DEFAULT ->
                 case GHC.Real.$w$s$c-
                        ww2
                        ww3
                        dt1
                        GHC.Real.$fEnumRatio1 of ww6 { (#,#) ww7 ww8 ->
                 case GHC.Real.$w$s$cfromRational
                        MusiCompoNator.GeneralMidi.pbValue2
                        (GHC.Integer.Type.smallInteger
                           (GHC.Prim.word2Int# ww1)) of ww4 { (#,#) ww5 ww9 ->
                 case GHC.Real.$w$sreduce
                        (GHC.Integer.Type.timesInteger ww7 ww5)
                        (GHC.Integer.Type.timesInteger
                           ww8
                           ww9) of ww10 { (#,#) ww11 ww12 ->
                 case GHC.Integer.Type.eqInteger#
                        ww12
                        MusiCompoNator.GeneralMidi.$s^2 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.integerToWord
                             (GHC.Integer.Type.modInteger
                                (GHC.Integer.Type.plusInteger
                                   (GHC.Integer.Type.divInteger ww11 ww12)
                                   MusiCompoNator.GeneralMidi.pbValue1)
                                ZMidi.Core.Datatypes.$fNumWord2) of wild1 { DEFAULT ->
                      GHC.Prim.narrow16Word# wild1 }
                   1#
                   -> case GHC.Real.divZeroError
                      ret_ty GHC.Prim.Word#
                      of {} } } } } }) -}
81ac62d6b12c0eb5c554321ae7a32c62
  $wresolveDep ::
    [MusiCompoNator.Composition.PhraseControl]
    -> MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int
    -> [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]
    -> (# MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int,
          [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,U(U,U(U),U)><S,1*U>, Inline: [2] -}
58cfab5399cbebdcf0581e14c997d158
  $wrunMidiComposition ::
    MusiCompoNator.Core.Scale
    -> MusiCompoNator.GeneralMidi.MidiComposition a
    -> (# ZMidi.Core.Datatypes.MidiFile, a #)
  {- Arity: 2,
     Strictness: <L,U><L,1*C1(C1(U(1*U,U(A,A,A,A,A,A,A,U,1*U,1*U(U),A),1*U)))>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: MusiCompoNator.Core.Scale)
                   (w1 :: MusiCompoNator.GeneralMidi.MidiComposition a) ->
                 let {
                   ds :: Data.Functor.Identity.Identity
                           (a, MusiCompoNator.GeneralMidi.MidiState,
                            [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
                   = w1
                       `cast`
                     (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                          <MusiCompoNator.Core.Scale>_R
                          <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                          <MusiCompoNator.GeneralMidi.MidiState>_N
                          <Data.Functor.Identity.Identity>_R
                          <a>_N)
                       w
                       MusiCompoNator.GeneralMidi.defaultMidiPlayerState
                 } in
                 (# ZMidi.Core.Datatypes.MidiFile
                      (ZMidi.Core.Datatypes.MidiHeader
                         ZMidi.Core.Datatypes.MF1
                         MusiCompoNator.GeneralMidi.runMidiComposition10
                         (ZMidi.Core.Datatypes.TPB
                            (case MusiCompoNator.GeneralMidi.runMidiComposition9 of ww { GHC.Real.:% ww1 ww2 ->
                             case ds
                                    `cast`
                                  (Data.Functor.Identity.N:Identity[0]
                                       <(a, MusiCompoNator.GeneralMidi.MidiState,
                                         [(GHC.Integer.Type.Integer,
                                           ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) a1 ms w2 ->
                             case ms of wild1 { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                             case GHC.Integer.Type.integerToWord
                                    (MusiCompoNator.GeneralMidi.$wticks
                                       ds8
                                       ww1
                                       ww2) of wild2 { DEFAULT ->
                             GHC.Word.W16# (GHC.Prim.narrow16Word# wild2) } } } })))
                      (GHC.Types.:
                         @ ZMidi.Core.Datatypes.MidiTrack
                         (GHC.Types.:
                            @ (ZMidi.Core.Datatypes.DeltaTime, ZMidi.Core.Datatypes.MidiEvent)
                            (MusiCompoNator.GeneralMidi.runMidiComposition4
                               `cast`
                             (Sym (ZMidi.Core.Datatypes.N:DeltaTime[0])),
                             ZMidi.Core.Datatypes.MetaEvent
                               (ZMidi.Core.Datatypes.TextEvent
                                  ZMidi.Core.Datatypes.SEQUENCE_NAME
                                  (case ds
                                          `cast`
                                        (Data.Functor.Identity.N:Identity[0]
                                             <(a, MusiCompoNator.GeneralMidi.MidiState,
                                               [(GHC.Integer.Type.Integer,
                                                 ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) a1 ms w2 ->
                                   case ms of wild1 { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                   ds9 } })))
                            (GHC.Types.:
                               @ (ZMidi.Core.Datatypes.DeltaTime, ZMidi.Core.Datatypes.MidiEvent)
                               (MusiCompoNator.GeneralMidi.runMidiComposition4
                                  `cast`
                                (Sym (ZMidi.Core.Datatypes.N:DeltaTime[0])),
                                ZMidi.Core.Datatypes.MetaEvent
                                  (ZMidi.Core.Datatypes.SetTempo
                                     (case MusiCompoNator.GeneralMidi.runMidiComposition6 of wild { GHC.Types.D# x1 ->
                                      case ds
                                             `cast`
                                           (Data.Functor.Identity.N:Identity[0]
                                                <(a, MusiCompoNator.GeneralMidi.MidiState,
                                                  [(GHC.Integer.Type.Integer,
                                                    ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild1 { (,,) a1 ms w2 ->
                                      case ms of wild2 { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                                      case ds10 of wild3 { GHC.Types.I# i ->
                                      case GHC.Prim./##
                                             (GHC.Prim.*## x1 60.0##)
                                             (GHC.Prim.int2Double# i) of wild4 { DEFAULT ->
                                      let {
                                        n :: GHC.Prim.Int# = GHC.Prim.double2Int# wild4
                                      } in
                                      case GHC.Prim.<## wild4 (GHC.Prim.int2Double# n) of lwild {
                                        DEFAULT
                                        -> GHC.Word.W32#
                                             (GHC.Prim.narrow32Word# (GHC.Prim.int2Word# n))
                                        1#
                                        -> GHC.Word.W32#
                                             (GHC.Prim.narrow32Word#
                                                (GHC.Prim.int2Word#
                                                   (GHC.Prim.-# n 1#))) } } } } } })))
                               (case ds
                                       `cast`
                                     (Data.Functor.Identity.N:Identity[0]
                                          <(a, MusiCompoNator.GeneralMidi.MidiState,
                                            [(GHC.Integer.Type.Integer,
                                              ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) a1 ms w2 ->
                                GHC.Base.++
                                  @ (ZMidi.Core.Datatypes.DeltaTime, ZMidi.Core.Datatypes.MidiEvent)
                                  (MusiCompoNator.GeneralMidi.runMidiComposition_deltaTime
                                     MusiCompoNator.GeneralMidi.$s^2
                                     (Data.OldList.sortBy
                                        @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)
                                        MusiCompoNator.GeneralMidi.runMidiComposition5
                                        w2))
                                  MusiCompoNator.GeneralMidi.runMidiComposition1 })))
                           `cast`
                         (Sym (ZMidi.Core.Datatypes.N:MidiTrack[0]))
                         (GHC.Types.[] @ ZMidi.Core.Datatypes.MidiTrack)),
                    case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a, MusiCompoNator.GeneralMidi.MidiState,
                                [(GHC.Integer.Type.Integer,
                                  ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) a1 ms w2 ->
                    a1 } #)) -}
126fd6ac17b43fd1591b71b1199fb325
  $wsetBend ::
    MusiCompoNator.Core.Beat
    -> GHC.Word.Word8
    -> GHC.Maybe.Maybe GHC.Word.Word8
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# (), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 4,
     Strictness: <L,U(U,U)><L,U><S,1*U><L,U(U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: GHC.Word.Word8)
                   (w2 :: GHC.Maybe.Maybe GHC.Word.Word8)
                   (w3 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case w2 of wild {
                   GHC.Maybe.Nothing
                   -> (# GHC.Tuple.(), w3,
                         GHC.Types.[]
                           @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent) #)
                   GHC.Maybe.Just c
                   -> (# GHC.Tuple.(), w3,
                         GHC.Types.:
                           @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)
                           (case w of ww { GHC.Real.:% ww1 ww2 ->
                            case w3 of wild1 { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                            MusiCompoNator.GeneralMidi.$wticks ds7 ww1 ww2 } },
                            ZMidi.Core.Datatypes.VoiceEvent
                              ZMidi.Core.Datatypes.RS_OFF
                              (ZMidi.Core.Datatypes.Controller
                                 c
                                 MusiCompoNator.GeneralMidi.setBend4
                                 MusiCompoNator.GeneralMidi.defaultMidiPlayerState5))
                           (GHC.Types.:
                              @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)
                              (case w of ww { GHC.Real.:% ww1 ww2 ->
                               case w3 of wild1 { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                               MusiCompoNator.GeneralMidi.$wticks ds7 ww1 ww2 } },
                               ZMidi.Core.Datatypes.VoiceEvent
                                 ZMidi.Core.Datatypes.RS_OFF
                                 (ZMidi.Core.Datatypes.Controller
                                    c
                                    MusiCompoNator.GeneralMidi.setBend3
                                    MusiCompoNator.GeneralMidi.defaultMidiPlayerState5))
                              (GHC.Types.:
                                 @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)
                                 (case w of ww { GHC.Real.:% ww1 ww2 ->
                                  case w3 of wild1 { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                                  MusiCompoNator.GeneralMidi.$wticks ds7 ww1 ww2 } },
                                  ZMidi.Core.Datatypes.VoiceEvent
                                    ZMidi.Core.Datatypes.RS_OFF
                                    (ZMidi.Core.Datatypes.Controller
                                       c
                                       MusiCompoNator.GeneralMidi.setBend2
                                       w1))
                                 (GHC.Types.[]
                                    @ (GHC.Integer.Type.Integer,
                                       ZMidi.Core.Datatypes.MidiEvent)))) #) }) -}
b0c2484e06bb5ef351219a2adcb0442d
  $wsetSounding ::
    GHC.Word.Word8
    -> GHC.Word.Word8
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# (), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U)><L,U><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [2],
     Unfolding: (\ (w :: GHC.Word.Word8)
                   (w1 :: GHC.Word.Word8)
                   (w2 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (# GHC.Tuple.(),
                    case w2 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                    MusiCompoNator.GeneralMidi.MPS
                      ds
                      ds1
                      (let {
                         z1 :: [(GHC.Word.Word8, [GHC.Word.Word8])]
                         = letrec {
                             go :: [(GHC.Word.Word8, [GHC.Word.Word8])]
                                   -> [(GHC.Word.Word8, [GHC.Word.Word8])]
                               {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (ds11 :: [(GHC.Word.Word8, [GHC.Word.Word8])]) ->
                               case ds11 of wild1 {
                                 [] -> GHC.Types.[] @ (GHC.Word.Word8, [GHC.Word.Word8])
                                 : y ys
                                 -> case y of wild2 { (,) ch' xs ->
                                    case ch' of wild3 { GHC.Word.W8# x1 ->
                                    case w of wild4 { GHC.Word.W8# y1 ->
                                    case GHC.Prim.neWord# x1 y1 of lwild {
                                      DEFAULT -> go ys
                                      1#
                                      -> GHC.Types.:
                                           @ (GHC.Word.Word8, [GHC.Word.Word8])
                                           wild2
                                           (go ys) } } } } }
                           } in
                           go ds2
                       } in
                       letrec {
                         go :: [(GHC.Word.Word8, [GHC.Word.Word8])]
                               -> [(GHC.Word.Word8, [GHC.Word.Word8])]
                           {- Arity: 1, Strictness: <S,1*U> -}
                         = \ (ds11 :: [(GHC.Word.Word8, [GHC.Word.Word8])]) ->
                           case ds11 of wild1 {
                             [] -> z1
                             : y ys
                             -> case y of wild2 { (,) ch' xs ->
                                case ch' of wild3 { GHC.Word.W8# x1 ->
                                case w of wild4 { GHC.Word.W8# y1 ->
                                case GHC.Prim.eqWord# x1 y1 of lwild {
                                  DEFAULT -> go ys
                                  1#
                                  -> GHC.Types.:
                                       @ (GHC.Word.Word8, [GHC.Word.Word8])
                                       (wild3, GHC.Types.: @ GHC.Word.Word8 w1 xs)
                                       (go ys) } } } } }
                       } in
                       go ds2)
                      ds3
                      ds4
                      ds5
                      ds6
                      ds7
                      ds8
                      ds9
                      ds10 },
                    GHC.Types.[]
                      @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent) #)) -}
d24a86217075f6bfb299b2528a17b6a3
  $wticks ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Integer.Type.Integer)
                   (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger#
                        ww1
                        MusiCompoNator.GeneralMidi.$s^2 of wild {
                   DEFAULT
                   -> GHC.Integer.Type.timesInteger
                        (GHC.Integer.Type.divInteger w ww1)
                        ww
                   1#
                   -> case GHC.Real.divZeroError
                      ret_ty GHC.Integer.Type.Integer
                      of {} }) -}
4d1da15a02d53e26699a37d20c14f38b
  $wwriteEvent ::
    MusiCompoNator.Core.Beat
    -> [GHC.Maybe.Maybe GHC.Word.Word8]
    -> MusiCompoNator.GeneralMidi.EffectMidi
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3, Strictness: <L,U(U,U)><S,1*U><L,U>, Inline: [2] -}
600f89b7704c3e14b685d2920c2383d9
  $wwriteEvents ::
    [MusiCompoNator.GeneralMidi.EventMidi
       (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)]
    -> MusiCompoNator.Core.Scale
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# (), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 3,
     Strictness: <S,1*U><L,U><L,U(U,U,U,U,U(U,U),U,U,U,U,U,U)>,
     Inline: [2] -}
3de3f7abe884b845a5733a87d2795d0b
  $wwriteOff ::
    MusiCompoNator.Core.Beat
    -> [GHC.Maybe.Maybe GHC.Word.Word8]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (# (), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)] #)
  {- Arity: 3,
     Strictness: <L,U(U,U)><S,1*U><L,U(U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: [2] -}
e94858255779299ee6ae8bcc8fcc0018
  type Duration = MusiCompoNator.Core.Beat
ca7f5074834c9f76e0aaa755c05f0c88
  data EffectMidi
    = MidiBend MusiCompoNator.GeneralMidi.EffectMidi
               MusiCompoNator.GeneralMidi.EffectMidi
    | MidiTie MusiCompoNator.GeneralMidi.EffectMidi
              MusiCompoNator.GeneralMidi.EffectMidi
    | MidiVolume GHC.Word.Word8 MusiCompoNator.GeneralMidi.EffectMidi
    | MidiCut MusiCompoNator.Core.Beat
              MusiCompoNator.GeneralMidi.EffectMidi
    | MidiNotes MusiCompoNator.Core.Beat [MusiCompoNator.Core.Pitch]
1933f04941aa57fc766597e12cac40ad
  data EventMidi a
    = Event MusiCompoNator.Core.Beat
            a
            MusiCompoNator.GeneralMidi.EffectMidi
4e9f52ce76c7b112954117457ee46272
  type MidiComposition =
    Control.Monad.Trans.RWS.Lazy.RWS
      MusiCompoNator.Core.Scale
      [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]
      MusiCompoNator.GeneralMidi.MidiState
    :: * -> *
f403f28834488e54394ad8d709767ba2
  data MidiInstrument
    = Piano GHC.Word.Word8 | Percussion GHC.Word.Word8 GHC.Word.Word8
71fa434465045e2f26c155e461ce5b93
  data MidiState
    = MPS {channels :: [GHC.Word.Word8],
           pending :: [(MusiCompoNator.Core.Beat, GHC.Word.Word8)],
           sounding :: [(GHC.Word.Word8, [GHC.Word.Word8])],
           pb_sense :: [(GHC.Word.Word8, GHC.Word.Word8)],
           cursorB :: MusiCompoNator.Core.Beat,
           bank :: GHC.Word.Word8,
           velocity :: GHC.Word.Word8,
           subdivision :: GHC.Integer.Type.Integer,
           title :: GHC.Base.String,
           quater :: GHC.Types.Int,
           midi_events :: [MusiCompoNator.GeneralMidi.EventMidi
                             (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)]}
0c0e8ffa3e71a8b5967383014354a2c3
  allPitch ::
    MusiCompoNator.GeneralMidi.EffectMidi
    -> [MusiCompoNator.Core.Pitch]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
77d29b91361ae3d5bf85e0d393664851
  allocCh ::
    MusiCompoNator.GeneralMidi.Duration
    -> MusiCompoNator.GeneralMidi.MidiComposition
         (GHC.Maybe.Maybe GHC.Word.Word8)
  {- Arity: 3,
     Strictness: <L,1*U(U,U)><L,A><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.allocCh1
                  `cast`
                (<MusiCompoNator.GeneralMidi.Duration>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <[MusiCompoNator.Core.Pitch]>_R
                               <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                               <MusiCompoNator.GeneralMidi.MidiState>_N
                               <Data.Functor.Identity.Identity>_R
                               <GHC.Maybe.Maybe GHC.Word.Word8>_N)) -}
d38c49b4c30a845167700827689699ea
  allocCh1 ::
    MusiCompoNator.GeneralMidi.Duration
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> Data.Functor.Identity.Identity
         (GHC.Maybe.Maybe GHC.Word.Word8,
          MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3,
     Strictness: <L,1*U(U,U)><L,A><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: MusiCompoNator.GeneralMidi.Duration)
                   (w1 :: [MusiCompoNator.Core.Pitch])
                   (w2 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wallocCh
                        w
                        w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(GHC.Maybe.Maybe GHC.Word.Word8,
                             MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer,
                               ZMidi.Core.Datatypes.MidiEvent)])>_R)) }) -}
71fa434465045e2f26c155e461ce5b93
  bank :: MusiCompoNator.GeneralMidi.MidiState -> GHC.Word.Word8
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLL),1*U(A,A,A,A,A,1*U(U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds6 }) -}
516cf4e6feff9f75d613b9ed27a6056f
  beatSize ::
    MusiCompoNator.Core.Measurable m =>
    m MusiCompoNator.Core.Beat -> GHC.Integer.Type.Integer
  {- Arity: 2,
     Strictness: <S(LLLC(C(C(S)))),1*U(A,A,A,1*C1(C1(C1(U))))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ m :: * -> *
                   (w :: MusiCompoNator.Core.Measurable m)
                   (w1 :: m MusiCompoNator.Core.Beat) ->
                 case w of ww { MusiCompoNator.Core.C:Measurable ww1 ww2 ww3 ww4 ->
                 MusiCompoNator.GeneralMidi.$wbeatSize @ m ww4 w1 }) -}
895840d2f10304b2eb90ce4e5f46a1c8
  beatSize1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
d748f084d0d97fe03b170cf2a9fdf880
  beatSize_$sbeatSize ::
    MusiCompoNator.Composition.Phrase
      MusiCompoNator.Composition.PhraseControl
      (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
      MusiCompoNator.Core.Beat
    -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (m :: MusiCompoNator.Composition.Phrase
                           MusiCompoNator.Composition.PhraseControl
                           (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                           MusiCompoNator.Core.Beat) ->
                 case MusiCompoNator.Composition.$wunPhrase
                        @ MusiCompoNator.Core.Beat
                        @ MusiCompoNator.Composition.PhraseControl
                        @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                        GHC.Real.$fFractionalRatio_$s$fNumRatio
                        GHC.Real.$fOrdRatio_$s$fOrdRatio
                        m of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.GeneralMidi.beatSize_go
                   (MusiCompoNator.Core.$w$cunmeasure
                      @ MusiCompoNator.Core.Beat
                      GHC.Real.$fFractionalRatio_$s$fNumRatio
                      ww3)
                   MusiCompoNator.GeneralMidi.beatSize1 }) -}
fc960e6da975c24b4df263e7cd5716c6
  beatSize_go ::
    [GHC.Real.Ratio GHC.Integer.Type.Integer]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
fec69359d7c2e92bfaf9163507750a96
  bendw14 ::
    GHC.Word.Word8
    -> MusiCompoNator.Core.Pitch -> ZMidi.Core.Datatypes.Word14
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(SS),1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (sense :: GHC.Word.Word8) (p :: MusiCompoNator.Core.Pitch) ->
                 MusiCompoNator.GeneralMidi.pbValue
                   (MusiCompoNator.GeneralMidi.keyPress p)
                   sense
                   p) -}
71fa434465045e2f26c155e461ce5b93
  channels ::
    MusiCompoNator.GeneralMidi.MidiState -> [GHC.Word.Word8]
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds1 }) -}
b487da48d486b31ed19e42d2b396caab
  closeMC :: MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.closeMC1
                  `cast`
                (Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                          <[MusiCompoNator.Core.Pitch]>_R
                          <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                          <MusiCompoNator.GeneralMidi.MidiState>_N
                          <Data.Functor.Identity.Identity>_R
                          <()>_N)) -}
086245e5137700fc81bae3350e96d326
  closeMC1 ::
    [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> Data.Functor.Identity.Identity
         ((), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [MusiCompoNator.Core.Pitch])
                   (w1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 let {
                   ds1 :: Data.Functor.Identity.Identity
                            ((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
                   = case w1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                     case MusiCompoNator.GeneralMidi.$wwriteEvents
                            (Data.OldList.sortBy
                               @ (MusiCompoNator.GeneralMidi.EventMidi
                                    (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int))
                               MusiCompoNator.GeneralMidi.closeMC2
                               ds11)
                            w
                            wild of ww { (#,,#) ww1 ww2 ww3 ->
                     (ww1, ww2, ww3)
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <((), MusiCompoNator.GeneralMidi.MidiState,
                                 [(GHC.Integer.Type.Integer,
                                   ZMidi.Core.Datatypes.MidiEvent)])>_R)) } }
                 } in
                 (case ds1
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <((), MusiCompoNator.GeneralMidi.MidiState,
                              [(GHC.Integer.Type.Integer,
                                ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                  b1 },
                  case ds1
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <((), MusiCompoNator.GeneralMidi.MidiState,
                              [(GHC.Integer.Type.Integer,
                                ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                  s'' },
                  case ds1
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <((), MusiCompoNator.GeneralMidi.MidiState,
                              [(GHC.Integer.Type.Integer,
                                ZMidi.Core.Datatypes.MidiEvent)])>_R) of wild { (,,) b1 s'' w' ->
                  w' })
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer,
                               ZMidi.Core.Datatypes.MidiEvent)])>_R))) -}
cbb4e7cd84f79c7b6f18b08ef293225d
  closeMC2 ::
    MusiCompoNator.GeneralMidi.EventMidi
      (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)
    -> MusiCompoNator.GeneralMidi.EventMidi
         (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)
    -> GHC.Types.Ordering
  {- Arity: 2,
     Strictness: <S(S(SS)LL),1*U(1*U(U,U),A,A)><S(S(SS)LL),1*U(1*U(U,U),A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.EventMidi
                            (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int))
                   (ds1 :: MusiCompoNator.GeneralMidi.EventMidi
                             (MusiCompoNator.GeneralMidi.MidiInstrument,
                              GHC.Types.Int))[OneShot] ->
                 case ds of wild { MusiCompoNator.GeneralMidi.Event b ds2 ds3 ->
                 case ds1 of wild1 { MusiCompoNator.GeneralMidi.Event b' ds4 ds5 ->
                 GHC.Real.$fEnumRatio_$s$ccompare b b' } }) -}
992ababf70d8e77f2c755b8c57e2a810
  collectPitches ::
    [MusiCompoNator.GeneralMidi.EventMidi a]
    -> [MusiCompoNator.Core.Pitch]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (es :: [MusiCompoNator.GeneralMidi.EventMidi a]) ->
                 MusiCompoNator.GeneralMidi.collectPitches1 @ a es) -}
da72da566929948562cd6a4916d549b0
  collectPitches1 ::
    [MusiCompoNator.GeneralMidi.EventMidi a]
    -> [MusiCompoNator.Core.Pitch]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
71fa434465045e2f26c155e461ce5b93
  cursorB ::
    MusiCompoNator.GeneralMidi.MidiState -> MusiCompoNator.Core.Beat
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLL),1*U(A,A,A,A,1*U(U,U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds5 }) -}
c9c70760e2dda3a6cb765d1abe03d526
  defaultMidiPlayerState :: MusiCompoNator.GeneralMidi.MidiState
  {- Unfolding: (MusiCompoNator.GeneralMidi.MPS
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState10
                   (GHC.Types.[] @ (MusiCompoNator.Core.Beat, GHC.Word.Word8))
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState8
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState7
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState6
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState5
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState4
                   MusiCompoNator.GeneralMidi.beatSize1
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState2
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState1
                   (GHC.Types.[]
                      @ (MusiCompoNator.GeneralMidi.EventMidi
                           (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)))) -}
2fb6148e9a7679834bdb54de40b9caeb
  defaultMidiPlayerState1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 120#) -}
4b9c9a2c2cb0334f3c56dfb64b30442d
  defaultMidiPlayerState10 :: [GHC.Word.Word8]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Word.Word8
                   (GHC.Word.$w$cenumFromTo2 0## 8##)
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState11) -}
66a16175c8befb6c6c2fd24c29a855b8
  defaultMidiPlayerState11 :: [GHC.Word.Word8]
  {- Unfolding: (GHC.Word.$w$cenumFromTo2 10## 15##) -}
b69a3e43510dda2fd9b35cb5405269af
  defaultMidiPlayerState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState3) -}
dc713afb85a893bbdb1abfb2cc84768c
  defaultMidiPlayerState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("untitled"#) -}
a64a4f0a2435647e64766bfa439f75ea
  defaultMidiPlayerState4 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 127##) -}
bde7a40981e3ca9d72b576a76ceb8095
  defaultMidiPlayerState5 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 0##) -}
937c1be39918b8e875a303f5b1fad8ab
  defaultMidiPlayerState6 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   MusiCompoNator.GeneralMidi.$s^2
                   GHC.Real.$fEnumRatio1) -}
fdc6b5bf6dbe2de65dd102f3e7589c5c
  defaultMidiPlayerState7 :: [(GHC.Word.Word8, GHC.Word.Word8)]
  {- Unfolding: (GHC.List.zip
                   @ GHC.Word.Word8
                   @ GHC.Word.Word8
                   (GHC.Word.$w$cenumFromTo2 0## 15##)
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState_xs) -}
427a38fe1aa33b26243d55dd26af6e5a
  defaultMidiPlayerState8 :: [(GHC.Word.Word8, [GHC.Word.Word8])]
  {- Unfolding: (GHC.List.zip
                   @ GHC.Word.Word8
                   @ [GHC.Word.Word8]
                   (GHC.Word.$w$cenumFromTo2 0## 15##)
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState9) -}
4d1324502b4cff24c90d7558e34e9980
  defaultMidiPlayerState9 :: [[GHC.Word.Word8]]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Word.Word8]
                   (GHC.Types.[] @ GHC.Word.Word8)
                   (GHC.Types.[] @ [GHC.Word.Word8])) -}
3e272a04c0827c4effde1e07f8751cf7
  defaultMidiPlayerState_xs :: [GHC.Word.Word8]
  {- HasNoCafRefs, Strictness: m2 -}
35e864301a6742d77b060fc90a51067b
  depPhrasing ::
    [MusiCompoNator.Composition.PhraseControl]
    -> ([MusiCompoNator.Composition.PhraseControl],
        [MusiCompoNator.Composition.PhraseControl])
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (cs :: [MusiCompoNator.Composition.PhraseControl]) ->
                 (GHC.Base.build
                    @ MusiCompoNator.Composition.PhraseControl
                    (\ @ b
                       (c :: MusiCompoNator.Composition.PhraseControl -> b -> b)[OneShot]
                       (n :: b)[OneShot] ->
                     GHC.Base.foldr
                       @ MusiCompoNator.Composition.PhraseControl
                       @ b
                       (GHC.List.filterFB
                          @ MusiCompoNator.Composition.PhraseControl
                          @ b
                          c
                          MusiCompoNator.GeneralMidi.depPhrasing2)
                       n
                       cs),
                  GHC.Base.build
                    @ MusiCompoNator.Composition.PhraseControl
                    (\ @ b
                       (c :: MusiCompoNator.Composition.PhraseControl -> b -> b)[OneShot]
                       (n :: b)[OneShot] ->
                     GHC.Base.foldr
                       @ MusiCompoNator.Composition.PhraseControl
                       @ b
                       (GHC.List.filterFB
                          @ MusiCompoNator.Composition.PhraseControl
                          @ b
                          c
                          MusiCompoNator.GeneralMidi.depPhrasing1)
                       n
                       cs))) -}
89ed0ed178ca612e21a05b3c250a3050
  depPhrasing1 ::
    MusiCompoNator.Composition.PhraseControl -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: MusiCompoNator.Composition.PhraseControl) ->
                 case c of wild {
                   DEFAULT -> GHC.Types.False
                   MusiCompoNator.Composition.Volume a1 -> GHC.Types.True
                   MusiCompoNator.Composition.Legato -> GHC.Types.True
                   MusiCompoNator.Composition.Staccato a1 -> GHC.Types.True }) -}
0160cd9e6b925b7745b1b222fffacbde
  depPhrasing2 ::
    MusiCompoNator.Composition.PhraseControl -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: MusiCompoNator.Composition.PhraseControl) ->
                 case c of wild {
                   DEFAULT -> GHC.Types.True
                   MusiCompoNator.Composition.Volume a1 -> GHC.Types.False
                   MusiCompoNator.Composition.Legato -> GHC.Types.False
                   MusiCompoNator.Composition.Staccato a1 -> GHC.Types.False }) -}
9790b173b80eccd7ee2d9eda8b6cd3ea
  durationOf ::
    MusiCompoNator.GeneralMidi.EffectMidi -> GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
b8c3b91bed188fb60d91425842e37744
  endPitch ::
    MusiCompoNator.GeneralMidi.EffectMidi
    -> [MusiCompoNator.Core.Pitch]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
095bba9394c7edcc4e2e3d72e8665a16
  events ::
    MusiCompoNator.Composition.Phrase2
    -> [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ph :: MusiCompoNator.Composition.Phrase2) ->
                 case MusiCompoNator.Composition.$wunPhrase
                        @ MusiCompoNator.Core.Beat
                        @ MusiCompoNator.Composition.PhraseControl
                        @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                        GHC.Real.$fFractionalRatio_$s$fNumRatio
                        GHC.Real.$fOrdRatio_$s$fOrdRatio
                        ph of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.GeneralMidi.resolvePhrasing
                   MusiCompoNator.GeneralMidi.defaultMidiPlayerState6
                   (GHC.List.zip3
                      @ [MusiCompoNator.Composition.PhraseControl]
                      @ [MusiCompoNator.Core.Pitch]
                      @ MusiCompoNator.Core.Beat
                      ww1
                      (GHC.Base.map
                         @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                         @ [MusiCompoNator.Core.Pitch]
                         MusiCompoNator.GeneralMidi.events_l
                         ww2)
                      (MusiCompoNator.Core.$w$cunmeasure
                         @ MusiCompoNator.Core.Beat
                         GHC.Real.$fFractionalRatio_$s$fNumRatio
                         ww3)) }) -}
4c81c40d4fcb263dce310f4701a4c685
  events_l ::
    MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch
    -> [MusiCompoNator.Core.Pitch]
  {- Arity: 1, Strictness: <S,1*U> -}
c5c6cbb35a91e1f3f7b7e49624af3f31
  freeCh ::
    GHC.Word.Word8 -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.freeCh1
                  `cast`
                (<GHC.Word.Word8>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((), MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <()>_N)) -}
b679629738b10d8e39c3999cd103d725
  freeCh1 ::
    GHC.Word.Word8
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> ((), MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (ch :: GHC.Word.Word8)
                   (eta :: [MusiCompoNator.Core.Pitch])
                   (eta1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (GHC.Tuple.(),
                  case eta1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                  MusiCompoNator.GeneralMidi.MPS
                    (GHC.Types.: @ GHC.Word.Word8 ch ds)
                    ds1
                    ds2
                    ds3
                    ds4
                    ds5
                    ds6
                    ds7
                    ds8
                    ds9
                    ds10 },
                  GHC.Types.[]
                    @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))) -}
789fe9847f941dd03ff0408a9cf6e5f3
  getPb ::
    GHC.Word.Word8
    -> MusiCompoNator.GeneralMidi.MidiComposition GHC.Word.Word8
  {- Arity: 3,
     Strictness: <L,U(U)><L,A><L,U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.getPb1
                  `cast`
                (<GHC.Word.Word8>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <(GHC.Word.Word8, MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <GHC.Word.Word8>_N)) -}
7e5c06a1a2c98ddda3e3e2161b52f299
  getPb1 ::
    GHC.Word.Word8
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> (GHC.Word.Word8, MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3,
     Strictness: <L,U(U)><L,A><L,U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (ch :: GHC.Word.Word8)
                   (eta :: [MusiCompoNator.Core.Pitch])
                   (eta1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (case eta1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                  letrec {
                    go :: [(GHC.Word.Word8, GHC.Word.Word8)] -> GHC.Word.Word8
                      <join 1> {- Arity: 1 -}
                    = \ (ds11 :: [(GHC.Word.Word8, GHC.Word.Word8)]) ->
                      case ds11 of wild1 {
                        [] -> GHC.List.badHead @ GHC.Word.Word8
                        : y ys
                        -> case y of wild2 { (,) ch' pb ->
                           case ch of wild3 { GHC.Word.W8# x1 ->
                           case ch' of wild4 { GHC.Word.W8# y1 ->
                           case GHC.Prim.eqWord# x1 y1 of lwild {
                             DEFAULT -> go ys 1# -> pb } } } } }
                  } in
                  go ds3 },
                  eta1,
                  GHC.Types.[]
                    @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))) -}
f5a60867bdaee6aa60dd8d3bd928ca69
  handleEvent ::
    MusiCompoNator.GeneralMidi.MidiInstrument
    -> [GHC.Maybe.Maybe GHC.Word.Word8]
    -> MusiCompoNator.GeneralMidi.EffectMidi
    -> MusiCompoNator.GeneralMidi.MidiComposition
         MusiCompoNator.Core.Beat
  {- Arity: 3, Strictness: <L,A><L,A><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiInstrument)
                   (ds1 :: [GHC.Maybe.Maybe GHC.Word.Word8])
                   (e :: MusiCompoNator.GeneralMidi.EffectMidi) ->
                 let {
                   eta :: GHC.Real.Rational = MusiCompoNator.GeneralMidi.durationOf e
                 } in
                 (\ (eta1 :: [MusiCompoNator.Core.Pitch])
                    (eta2 :: MusiCompoNator.GeneralMidi.MidiState) ->
                  (eta, eta2,
                   GHC.Types.[]
                     @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)))
                   `cast`
                 ((<[MusiCompoNator.Core.Pitch]>_R
                   ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                   ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                 <(GHC.Real.Rational, MusiCompoNator.GeneralMidi.MidiState,
                                   [(GHC.Integer.Type.Integer,
                                     ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                       <[MusiCompoNator.Core.Pitch]>_R
                                                                                       <[(GHC.Integer.Type.Integer,
                                                                                          ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                       <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                       <GHC.Real.Rational>_N))) -}
97d5e1621a77edc00056ed7a74f75242
  hit :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: MusiCompoNator.Core.Scale) ->
                 MusiCompoNator.GeneralMidi.defaultMidiPlayerState6) -}
0fea24f427e17c9f99fab2a8b7dae014
  keyPress :: GHC.Real.Rational -> GHC.Word.Word8
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Real.Rational) ->
                 case w of ww { GHC.Real.:% ww1 ww2 ->
                 case MusiCompoNator.GeneralMidi.$wkeyPress
                        ww1
                        ww2 of ww3 { DEFAULT ->
                 GHC.Word.W8# ww3 } }) -}
10dc1309c905398ef0aba69fe0589c45
  lockUntil ::
    GHC.Word.Word8
    -> MusiCompoNator.Core.Beat
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,U><L,A><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.lockUntil1
                  `cast`
                (<GHC.Word.Word8>_R
                 ->_R <MusiCompoNator.Core.Beat>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((), MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <()>_N)) -}
0c839235cb73ed7668bc6eeba8689bc2
  lockUntil1 ::
    GHC.Word.Word8
    -> MusiCompoNator.Core.Beat
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> ((), MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,U><L,A><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (4, True, False)
                (\ (ch :: GHC.Word.Word8)
                   (b :: MusiCompoNator.Core.Beat)
                   (eta :: [MusiCompoNator.Core.Pitch])
                   (eta1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (GHC.Tuple.(),
                  case eta1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                  MusiCompoNator.GeneralMidi.MPS
                    ds
                    (GHC.Types.:
                       @ (MusiCompoNator.Core.Beat, GHC.Word.Word8)
                       (b, ch)
                       ds1)
                    ds2
                    ds3
                    ds4
                    ds5
                    ds6
                    ds7
                    ds8
                    ds9
                    ds10 },
                  GHC.Types.[]
                    @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))) -}
f8b4d2cd56a6b2d211957999189258e7
  midiVoice ::
    MusiCompoNator.GeneralMidi.MidiInstrument
    -> MusiCompoNator.Composition.Voice a
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 4,
     Strictness: <L,U><L,1*C1(U(1*U,U(1*U,1*U,A)))><L,U><L,1*U(U,U,U,U,U,U,U,U,U,U,1*U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.midiVoice1
                  `cast`
                (forall (a :: <*>_N).
                 <MusiCompoNator.GeneralMidi.MidiInstrument>_R
                 ->_R <MusiCompoNator.Composition.Voice a>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((), MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <()>_N)) -}
6bbedbb898479ac22fea513d9299b338
  midiVoice1 ::
    MusiCompoNator.GeneralMidi.MidiInstrument
    -> MusiCompoNator.Composition.Voice a
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> ((), MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 4,
     Strictness: <L,U><L,1*C1(U(1*U,U(1*U,1*U,A)))><L,U><L,1*U(U,U,U,U,U,U,U,U,U,U,1*U)>m,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (w :: MusiCompoNator.GeneralMidi.MidiInstrument)
                   (w1 :: MusiCompoNator.Composition.Voice a)
                   (w2 :: [MusiCompoNator.Core.Pitch])
                   (w3 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wmidiVoice
                        @ a
                        w
                        w1
                        w2
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
71fa434465045e2f26c155e461ce5b93
  midi_events ::
    MusiCompoNator.GeneralMidi.MidiState
    -> [MusiCompoNator.GeneralMidi.EventMidi
          (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)]
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds11 }) -}
1fbfb3232ff5992d4824748945317c8c
  mis :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: MusiCompoNator.Core.Scale) ->
                 MusiCompoNator.GeneralMidi.mis_x) -}
5a2f000ac1dba67dbdd9cac605894bf2
  mis_dt :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-120) -}
d444dd3482c500ec6158555ce04cd92d
  mis_x :: MusiCompoNator.Core.Pitch
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   MusiCompoNator.GeneralMidi.mis_dt
                   GHC.Real.$fEnumRatio1) -}
e99f3e50c346effbf2c6cf59af0d2900
  moveHead ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.moveHead1
                  `cast`
                (<MusiCompoNator.Core.Beat>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <[MusiCompoNator.Core.Pitch]>_R
                               <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                               <MusiCompoNator.GeneralMidi.MidiState>_N
                               <Data.Functor.Identity.Identity>_R
                               <()>_N)) -}
669a652a7c51ccb063e3af277f717f33
  moveHead1 ::
    MusiCompoNator.Core.Beat
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> Data.Functor.Identity.Identity
         ((), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: [MusiCompoNator.Core.Pitch])
                   (w2 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wmoveHead
                        w
                        w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer,
                               ZMidi.Core.Datatypes.MidiEvent)])>_R)) }) -}
5132f626430c9d873db79c0a948673f8
  notes ::
    MusiCompoNator.Core.Beat
    -> [MusiCompoNator.Composition.PhraseControl]
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.Core.Beat
    -> MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><L,U>m, Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: [MusiCompoNator.Composition.PhraseControl])
                   (w2 :: [MusiCompoNator.Core.Pitch])
                   (w3 :: MusiCompoNator.Core.Beat) ->
                 case MusiCompoNator.GeneralMidi.$wnotes
                        w
                        w1
                        w2
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.GeneralMidi.Event @ GHC.Types.Int ww1 ww2 ww3 }) -}
9833b9b9657d4de5b78d450a6fb04f66
  pbSteps ::
    GHC.Integer.Type.Integer
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> MusiCompoNator.Core.Pitch
    -> [ZMidi.Core.Datatypes.Word14]
  {- Arity: 4, Strictness: <L,1*U><L,U(U)><L,U(U)><L,1*U(U,U)>,
     Unfolding: (\ (n :: GHC.Integer.Type.Integer)
                   (key :: GHC.Word.Word8)
                   (sense :: GHC.Word.Word8)
                   (value :: MusiCompoNator.Core.Pitch) ->
                 let {
                   m :: GHC.Real.Ratio GHC.Integer.Type.Integer
                   = case GHC.Real.$w$s$cfromRational
                            n
                            MusiCompoNator.GeneralMidi.pbSteps1 of ww { (#,#) ww1 ww2 ->
                     GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }
                 } in
                 let {
                   pivot :: MusiCompoNator.Core.Pitch
                   = case key of wild { GHC.Word.W8# x# ->
                     case GHC.Integer.Type.wordToInteger x# of dt1 { DEFAULT ->
                     GHC.Real.:%
                       @ GHC.Integer.Type.Integer
                       dt1
                       GHC.Real.$fEnumRatio1 } }
                 } in
                 let {
                   lvl19 :: GHC.Real.Ratio GHC.Integer.Type.Integer
                   = case value of ww { GHC.Real.:% ww1 ww2 ->
                     case pivot of ww3 { GHC.Real.:% ww4 ww5 ->
                     case GHC.Real.$w$s$c- ww1 ww2 ww4 ww5 of ww6 { (#,#) ww7 ww8 ->
                     GHC.Real.:% @ GHC.Integer.Type.Integer ww7 ww8 } } }
                 } in
                 letrec {
                   $wgo2 :: [GHC.Real.Ratio GHC.Integer.Type.Integer]
                            -> [ZMidi.Core.Datatypes.Word14]
                     {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
                   = \ (w :: [GHC.Real.Ratio GHC.Integer.Type.Integer]) ->
                     case w of wild {
                       [] -> GHC.Types.[] @ ZMidi.Core.Datatypes.Word14
                       : y ys
                       -> GHC.Types.:
                            @ ZMidi.Core.Datatypes.Word14
                            (case key of ww { GHC.Word.W8# ww1 ->
                             case sense of ww2 { GHC.Word.W8# ww3 ->
                             case lvl19 of ww4 { GHC.Real.:% ww5 ww6 ->
                             case y of ww7 { GHC.Real.:% ww8 ww9 ->
                             case m of ww10 { GHC.Real.:% ww11 ww12 ->
                             case GHC.Real.$w$s$c/
                                    ww8
                                    ww9
                                    ww11
                                    ww12 of ww13 { (#,#) ww14 ww15 ->
                             case GHC.Real.$w$sreduce
                                    (GHC.Integer.Type.timesInteger ww5 ww14)
                                    (GHC.Integer.Type.timesInteger
                                       ww6
                                       ww15) of ww16 { (#,#) ww17 ww18 ->
                             case pivot of ww19 { GHC.Real.:% ww20 ww21 ->
                             case GHC.Real.$w$s$c+
                                    ww17
                                    ww18
                                    ww20
                                    ww21 of ww22 { (#,#) ww23 ww24 ->
                             case MusiCompoNator.GeneralMidi.$wpbValue
                                    ww1
                                    ww3
                                    ww23
                                    ww24 of ww25 { DEFAULT ->
                             (GHC.Word.W16# ww25)
                               `cast`
                             (Sym (ZMidi.Core.Datatypes.N:Word14[0])) } } } } } } } } } })
                            ($wgo2 ys) }
                 } in
                 $wgo2
                   (GHC.Real.$w$snumericEnumFromTo
                      MusiCompoNator.GeneralMidi.pbSteps1
                      GHC.Real.$fEnumRatio1
                      m)) -}
7d118e3d280fdea414536e7bb53c81c3
  pbSteps1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
ad6f694dc1b75223984929b044c95261
  pbValue ::
    GHC.Word.Word8
    -> GHC.Word.Word8
    -> MusiCompoNator.Core.Pitch
    -> ZMidi.Core.Datatypes.Word14
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SS),1*U(U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Word.Word8)
                   (w1 :: GHC.Word.Word8)
                   (w2 :: MusiCompoNator.Core.Pitch) ->
                 case w of ww { GHC.Word.W8# ww1 ->
                 case w1 of ww2 { GHC.Word.W8# ww3 ->
                 case w2 of ww4 { GHC.Real.:% ww5 ww6 ->
                 case MusiCompoNator.GeneralMidi.$wpbValue
                        ww1
                        ww3
                        ww5
                        ww6 of ww7 { DEFAULT ->
                 (GHC.Word.W16# ww7)
                   `cast`
                 (Sym (ZMidi.Core.Datatypes.N:Word14[0])) } } } }) -}
de29eb54407425abb7b2f1ae8f503862
  pbValue1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (8192) -}
dda2a1169b39742d3b2446bb9a7c95fa
  pbValue2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (8191) -}
71fa434465045e2f26c155e461ce5b93
  pb_sense ::
    MusiCompoNator.GeneralMidi.MidiState
    -> [(GHC.Word.Word8, GHC.Word.Word8)]
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds4 }) -}
71fa434465045e2f26c155e461ce5b93
  pending ::
    MusiCompoNator.GeneralMidi.MidiState
    -> [(MusiCompoNator.Core.Beat, GHC.Word.Word8)]
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds2 }) -}
84cdcde04f7e0a83dcfbdcaafb108f07
  phrase2eventMidi ::
    i
    -> [MusiCompoNator.Composition.Phrase2]
    -> [MusiCompoNator.GeneralMidi.EventMidi (i, GHC.Types.Int)]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ i
                   (i1 :: i)
                   (phs :: [MusiCompoNator.Composition.Phrase2]) ->
                 letrec {
                   go :: [MusiCompoNator.Composition.Phrase
                            MusiCompoNator.Composition.PhraseControl
                            (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                            MusiCompoNator.Core.Beat]
                         -> [MusiCompoNator.GeneralMidi.EventMidi (i, GHC.Types.Int)]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [MusiCompoNator.Composition.Phrase
                                 MusiCompoNator.Composition.PhraseControl
                                 (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                                 MusiCompoNator.Core.Beat]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.[]
                            @ (MusiCompoNator.GeneralMidi.EventMidi (i, GHC.Types.Int))
                       : y ys
                       -> let {
                            ys1 :: [MusiCompoNator.GeneralMidi.EventMidi (i, GHC.Types.Int)]
                            = go ys
                          } in
                          letrec {
                            go1 :: [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]
                                   -> [MusiCompoNator.GeneralMidi.EventMidi (i, GHC.Types.Int)]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds1 :: [MusiCompoNator.GeneralMidi.EventMidi
                                           GHC.Types.Int]) ->
                              case ds1 of wild1 {
                                [] -> ys1
                                : y1 ys2
                                -> GHC.Types.:
                                     @ (MusiCompoNator.GeneralMidi.EventMidi (i, GHC.Types.Int))
                                     (case y1 of wild2 { MusiCompoNator.GeneralMidi.Event b a e ->
                                      MusiCompoNator.GeneralMidi.Event
                                        @ (i, GHC.Types.Int)
                                        b
                                        (i1, a)
                                        e })
                                     (go1 ys2) }
                          } in
                          go1 (MusiCompoNator.GeneralMidi.events y) }
                 } in
                 go phs) -}
bfb261aaf7175b098b18b8542b75777d
  putChannels ::
    [GHC.Word.Word8] -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(A,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.putChannels1
                  `cast`
                (<[GHC.Word.Word8]>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((), MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <()>_N)) -}
011cb0ff8774d1f20118148df24d5fab
  putChannels1 ::
    [GHC.Word.Word8]
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> ((), MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(A,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (chs :: [GHC.Word.Word8])
                   (eta :: [MusiCompoNator.Core.Pitch])
                   (eta1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (GHC.Tuple.(),
                  case eta1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                  MusiCompoNator.GeneralMidi.MPS
                    chs
                    ds1
                    ds2
                    ds3
                    ds4
                    ds5
                    ds6
                    ds7
                    ds8
                    ds9
                    ds10 },
                  GHC.Types.[]
                    @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))) -}
a1ba3e5095d3cadea78bb935d797b896
  putCursor ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,A,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.putCursor1
                  `cast`
                (<MusiCompoNator.Core.Beat>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((), MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <()>_N)) -}
e19176dc8d404915edae217cb075315c
  putCursor1 ::
    MusiCompoNator.Core.Beat
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> ((), MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,A,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (b :: MusiCompoNator.Core.Beat)
                   (eta :: [MusiCompoNator.Core.Pitch])
                   (eta1 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 (GHC.Tuple.(),
                  case eta1 of wild { MusiCompoNator.GeneralMidi.MPS ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                  MusiCompoNator.GeneralMidi.MPS
                    ds
                    ds1
                    ds2
                    ds3
                    b
                    ds5
                    ds6
                    ds7
                    ds8
                    ds9
                    ds10 },
                  GHC.Types.[]
                    @ (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent))) -}
71fa434465045e2f26c155e461ce5b93
  quater :: MusiCompoNator.GeneralMidi.MidiState -> GHC.Types.Int
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds10 }) -}
a32a568a83615c43b45cbd4cdc90f579
  resolveDep ::
    [MusiCompoNator.Composition.PhraseControl]
    -> MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int
    -> [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]
    -> [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,U(U,U(U),U)><S,1*U>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [MusiCompoNator.Composition.PhraseControl])
                   (w1 :: MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int)
                   (w2 :: [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]) ->
                 case MusiCompoNator.GeneralMidi.$wresolveDep
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int)
                   ww1
                   ww2 }) -}
b6a57474e73abf4bd8ed45d89effd80a
  resolvePhrasing ::
    MusiCompoNator.Core.Beat
    -> [([MusiCompoNator.Composition.PhraseControl],
         [MusiCompoNator.Core.Pitch], MusiCompoNator.Core.Beat)]
    -> [MusiCompoNator.GeneralMidi.EventMidi GHC.Types.Int]
  {- Arity: 2, Strictness: <L,U(U,U)><S,1*U> -}
1d3d9354fb38d3382c0599a2e1cad8bf
  runMidiComposition ::
    MusiCompoNator.Core.Scale
    -> MusiCompoNator.GeneralMidi.MidiComposition a
    -> (ZMidi.Core.Datatypes.MidiFile, a)
  {- Arity: 2,
     Strictness: <L,U><L,1*C1(C1(U(1*U,U(A,A,A,A,A,A,A,U,1*U,1*U(U),A),1*U)))>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: MusiCompoNator.Core.Scale)
                   (w1 :: MusiCompoNator.GeneralMidi.MidiComposition a) ->
                 case MusiCompoNator.GeneralMidi.$wrunMidiComposition
                        @ a
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
2dca7cba3772491bdc5c9bb3520dbe1e
  runMidiComposition1 ::
    [(ZMidi.Core.Datatypes.DeltaTime, ZMidi.Core.Datatypes.MidiEvent)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (ZMidi.Core.Datatypes.DeltaTime, ZMidi.Core.Datatypes.MidiEvent)
                   MusiCompoNator.GeneralMidi.runMidiComposition2
                   (GHC.Types.[]
                      @ (ZMidi.Core.Datatypes.DeltaTime,
                         ZMidi.Core.Datatypes.MidiEvent))) -}
5524b47ad7a6fd671390f236bb79093c
  runMidiComposition10 :: GHC.Word.Word16
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W16# 1##) -}
34ec560c0f99183be7c8705bbac564ed
  runMidiComposition2 ::
    (ZMidi.Core.Datatypes.DeltaTime, ZMidi.Core.Datatypes.MidiEvent)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((MusiCompoNator.GeneralMidi.runMidiComposition4
                    `cast`
                  (Sym (ZMidi.Core.Datatypes.N:DeltaTime[0])),
                  MusiCompoNator.GeneralMidi.runMidiComposition3)) -}
1afac65a6701f5e895da8b65e8774a7a
  runMidiComposition3 :: ZMidi.Core.Datatypes.MidiEvent
  {- HasNoCafRefs, Strictness: m6,
     Unfolding: (ZMidi.Core.Datatypes.MetaEvent
                   ZMidi.Core.Datatypes.EndOfTrack) -}
8a2544857dc54b2ccca399b61b741471
  runMidiComposition4 :: GHC.Word.Word32
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W32# 0##) -}
13906ae744513af5ac39fe994ce6fbe4
  runMidiComposition5 ::
    (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)
    -> (GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x1 :: (GHC.Integer.Type.Integer,
                           ZMidi.Core.Datatypes.MidiEvent))
                   (y :: (GHC.Integer.Type.Integer,
                          ZMidi.Core.Datatypes.MidiEvent))[OneShot] ->
                 case x1 of wild { (,) x2 ds1 ->
                 case y of wild1 { (,) x3 ds2 ->
                 GHC.Integer.Type.compareInteger x2 x3 } }) -}
474f4517aea263f28a362bca74d6627d
  runMidiComposition6 :: GHC.Types.Double
  {- Unfolding: (case MusiCompoNator.GeneralMidi.$w$s^
                        MusiCompoNator.GeneralMidi.runMidiComposition8
                        MusiCompoNator.GeneralMidi.runMidiComposition7 of ww { DEFAULT ->
                 GHC.Types.D# ww }) -}
464ae4ac122cebcd5769b171daebae05
  runMidiComposition7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (6) -}
aa31db6f1bf36b4bb1f1c765ab788d80
  runMidiComposition8 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 10.0##) -}
14f235cc0a5333ed3f83cf125f32ad07
  runMidiComposition9 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- Unfolding: (case GHC.Real.$w$s$cfromRational
                        MusiCompoNator.GeneralMidi.pbSteps1
                        MusiCompoNator.GeneralMidi.beatSize1 of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
00af9059d93ce0adb6a7ab447852c29b
  runMidiComposition_deltaTime ::
    GHC.Integer.Type.Integer
    -> [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]
    -> [(ZMidi.Core.Datatypes.DeltaTime,
         ZMidi.Core.Datatypes.MidiEvent)]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
fb553cf561c96b1ff40c4928c905b57c
  setBend ::
    MusiCompoNator.Core.Beat
    -> GHC.Word.Word8
    -> GHC.Maybe.Maybe GHC.Word.Word8
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 5,
     Strictness: <L,U(U,U)><L,U><S,1*U><L,A><L,U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.setBend1
                  `cast`
                (<MusiCompoNator.Core.Beat>_R
                 ->_R <GHC.Word.Word8>_R
                 ->_R <GHC.Maybe.Maybe GHC.Word.Word8>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <MusiCompoNator.Core.Scale>_R
                               <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                               <MusiCompoNator.GeneralMidi.MidiState>_N
                               <Data.Functor.Identity.Identity>_R
                               <()>_N)) -}
7af809ae1a0b3bcc4a69f1737ddee338
  setBend1 ::
    MusiCompoNator.Core.Beat
    -> GHC.Word.Word8
    -> GHC.Maybe.Maybe GHC.Word.Word8
    -> MusiCompoNator.Core.Scale
    -> MusiCompoNator.GeneralMidi.MidiState
    -> Data.Functor.Identity.Identity
         ((), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 5,
     Strictness: <L,U(U,U)><L,U><S,1*U><L,A><L,U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: GHC.Word.Word8)
                   (w2 :: GHC.Maybe.Maybe GHC.Word.Word8)
                   (w3 :: MusiCompoNator.Core.Scale)
                   (w4 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wsetBend
                        w
                        w1
                        w2
                        w4 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer,
                               ZMidi.Core.Datatypes.MidiEvent)])>_R)) }) -}
9356dd45378eeaa61eca7ac30231e228
  setBend2 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 6##) -}
6034b25062fbbddd4d71c5a87d5d9cba
  setBend3 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 100##) -}
929c6d19509853ce6182b55f8ddf2053
  setBend4 :: GHC.Word.Word8
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W8# 101##) -}
2ebcf66b59a57793fe010725d222b3e0
  setSounding ::
    GHC.Word.Word8
    -> GHC.Word.Word8 -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U)><L,U><L,A><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.setSounding1
                  `cast`
                (<GHC.Word.Word8>_R
                 ->_R <GHC.Word.Word8>_R
                 ->_R (<[MusiCompoNator.Core.Pitch]>_R
                       ->_R <MusiCompoNator.GeneralMidi.MidiState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((), MusiCompoNator.GeneralMidi.MidiState,
                                       [(GHC.Integer.Type.Integer,
                                         ZMidi.Core.Datatypes.MidiEvent)])>_R)) ; Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                                                                           <[MusiCompoNator.Core.Pitch]>_R
                                                                                           <[(GHC.Integer.Type.Integer,
                                                                                              ZMidi.Core.Datatypes.MidiEvent)]>_N
                                                                                           <MusiCompoNator.GeneralMidi.MidiState>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <()>_N)) -}
0454cfd3db26e0452f18dad059016b10
  setSounding1 ::
    GHC.Word.Word8
    -> GHC.Word.Word8
    -> [MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.GeneralMidi.MidiState
    -> ((), MusiCompoNator.GeneralMidi.MidiState,
        [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U)><L,U><L,A><L,1*U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Word.Word8)
                   (w1 :: GHC.Word.Word8)
                   (w2 :: [MusiCompoNator.Core.Pitch])
                   (w3 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wsetSounding
                        w
                        w1
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
71fa434465045e2f26c155e461ce5b93
  sounding ::
    MusiCompoNator.GeneralMidi.MidiState
    -> [(GHC.Word.Word8, [GHC.Word.Word8])]
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds3 }) -}
38875ce9e8362e54c77cde5e972fe57a
  startPitch ::
    MusiCompoNator.GeneralMidi.EffectMidi
    -> [MusiCompoNator.Core.Pitch]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
71fa434465045e2f26c155e461ce5b93
  subdivision ::
    MusiCompoNator.GeneralMidi.MidiState -> GHC.Integer.Type.Integer
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds8 }) -}
4728fbfe46d6b453380f2286999f8cc9
  ticks ::
    GHC.Integer.Type.Integer
    -> MusiCompoNator.Core.Beat -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,U><S(SS),1*U(U,U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Integer.Type.Integer)
                   (w1 :: MusiCompoNator.Core.Beat) ->
                 case w1 of ww { GHC.Real.:% ww1 ww2 ->
                 MusiCompoNator.GeneralMidi.$wticks w ww1 ww2 }) -}
71fa434465045e2f26c155e461ce5b93
  title :: MusiCompoNator.GeneralMidi.MidiState -> GHC.Base.String
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds9 }) -}
6ffa94835be16ca6488ab648ee9a5db1
  ve ::
    ZMidi.Core.Datatypes.MidiVoiceEvent
    -> ZMidi.Core.Datatypes.MidiEvent
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (ZMidi.Core.Datatypes.VoiceEvent
                   ZMidi.Core.Datatypes.RS_OFF) -}
71fa434465045e2f26c155e461ce5b93
  velocity :: MusiCompoNator.GeneralMidi.MidiState -> GHC.Word.Word8
  RecSel Left MusiCompoNator.GeneralMidi.MidiState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLL),1*U(A,A,A,A,A,A,1*U(U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case ds of wild { MusiCompoNator.GeneralMidi.MPS ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ->
                 ds7 }) -}
eeacab609ce9f88cd9c6598dab2fa297
  writeEvent ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.GeneralMidi.MidiInstrument
    -> [GHC.Maybe.Maybe GHC.Word.Word8]
    -> MusiCompoNator.GeneralMidi.EffectMidi
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 4, Strictness: <L,U(U,U)><L,A><S,1*U><L,U>, Inline: [2],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: MusiCompoNator.GeneralMidi.MidiInstrument)
                   (w2 :: [GHC.Maybe.Maybe GHC.Word.Word8])
                   (w3 :: MusiCompoNator.GeneralMidi.EffectMidi) ->
                 MusiCompoNator.GeneralMidi.$wwriteEvent w w2 w3) -}
5c9e24f90686936d22e2a031f90ee791
  writeEvents ::
    [MusiCompoNator.GeneralMidi.EventMidi
       (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)]
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3,
     Strictness: <S,1*U><L,U><L,U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.writeEvents1
                  `cast`
                (<[MusiCompoNator.GeneralMidi.EventMidi
                     (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)]>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <MusiCompoNator.Core.Scale>_R
                               <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                               <MusiCompoNator.GeneralMidi.MidiState>_N
                               <Data.Functor.Identity.Identity>_R
                               <()>_N)) -}
bc6b352ea2a75e2f2b909480c1c823a2
  writeEvents1 ::
    [MusiCompoNator.GeneralMidi.EventMidi
       (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)]
    -> MusiCompoNator.Core.Scale
    -> MusiCompoNator.GeneralMidi.MidiState
    -> Data.Functor.Identity.Identity
         ((), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 3,
     Strictness: <S,1*U><L,U><L,U(U,U,U,U,U(U,U),U,U,U,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [MusiCompoNator.GeneralMidi.EventMidi
                            (MusiCompoNator.GeneralMidi.MidiInstrument, GHC.Types.Int)])
                   (w1 :: MusiCompoNator.Core.Scale)
                   (w2 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wwriteEvents
                        w
                        w1
                        w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer,
                               ZMidi.Core.Datatypes.MidiEvent)])>_R)) }) -}
67db2f18d70af5de66ed1fe6eecbd2bb
  writeOff ::
    MusiCompoNator.Core.Beat
    -> [GHC.Maybe.Maybe GHC.Word.Word8]
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 4,
     Strictness: <L,U(U,U)><S,1*U><L,A><L,U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.GeneralMidi.writeOff1
                  `cast`
                (<MusiCompoNator.Core.Beat>_R
                 ->_R <[GHC.Maybe.Maybe GHC.Word.Word8]>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <MusiCompoNator.Core.Scale>_R
                               <[(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)]>_N
                               <MusiCompoNator.GeneralMidi.MidiState>_N
                               <Data.Functor.Identity.Identity>_R
                               <()>_N)) -}
b1f53ac1efa28311cf21b42c61eb4bcd
  writeOff1 ::
    MusiCompoNator.Core.Beat
    -> [GHC.Maybe.Maybe GHC.Word.Word8]
    -> MusiCompoNator.Core.Scale
    -> MusiCompoNator.GeneralMidi.MidiState
    -> Data.Functor.Identity.Identity
         ((), MusiCompoNator.GeneralMidi.MidiState,
          [(GHC.Integer.Type.Integer, ZMidi.Core.Datatypes.MidiEvent)])
  {- Arity: 4,
     Strictness: <L,U(U,U)><S,1*U><L,A><L,U(U,U,U,U,U,U,U,U,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: [GHC.Maybe.Maybe GHC.Word.Word8])
                   (w2 :: MusiCompoNator.Core.Scale)
                   (w3 :: MusiCompoNator.GeneralMidi.MidiState) ->
                 case MusiCompoNator.GeneralMidi.$wwriteOff
                        w
                        w1
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((), MusiCompoNator.GeneralMidi.MidiState,
                             [(GHC.Integer.Type.Integer,
                               ZMidi.Core.Datatypes.MidiEvent)])>_R)) }) -}
bde06ba9d03ef86643a45800c878cd1d
  writeOn ::
    MusiCompoNator.Core.Beat
    -> [MusiCompoNator.Core.Pitch]
    -> [GHC.Maybe.Maybe GHC.Word.Word8]
    -> MusiCompoNator.GeneralMidi.MidiComposition ()
  {- Arity: 3, Strictness: <L,U(U,U)><S,1*U><L,1*U> -}
instance GHC.Base.Functor [MusiCompoNator.GeneralMidi.EventMidi]
  = MusiCompoNator.GeneralMidi.$fFunctorEventMidi
instance GHC.Show.Show [MusiCompoNator.GeneralMidi.EffectMidi]
  = MusiCompoNator.GeneralMidi.$fShowEffectMidi
instance GHC.Show.Show [MusiCompoNator.GeneralMidi.EventMidi]
  = MusiCompoNator.GeneralMidi.$fShowEventMidi
"SPEC beatSize @ (Phrase PhraseControl (Simultanity Pitch))" forall ($dMeasurable :: MusiCompoNator.Core.Measurable
                                                                                       (MusiCompoNator.Composition.Phrase
                                                                                          MusiCompoNator.Composition.PhraseControl
                                                                                          (MusiCompoNator.Core.Simultanity
                                                                                             MusiCompoNator.Core.Pitch)))
  MusiCompoNator.GeneralMidi.beatSize @ (MusiCompoNator.Composition.Phrase
                                           MusiCompoNator.Composition.PhraseControl
                                           (MusiCompoNator.Core.Simultanity
                                              MusiCompoNator.Core.Pitch))
                                      $dMeasurable
  = MusiCompoNator.GeneralMidi.beatSize_$sbeatSize
"SPEC/MusiCompoNator.GeneralMidi $fEqMaybe @ Word8" [orphan] forall (v :: GHC.Classes.Eq
                                                                            GHC.Word.Word8)
  GHC.Maybe.$fEqMaybe @ GHC.Word.Word8 v
  = MusiCompoNator.GeneralMidi.$s$fEqMaybe
"SPEC/MusiCompoNator.GeneralMidi $fEqMaybe_$c/= @ Word8" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                    GHC.Word.Word8)
  GHC.Maybe.$fEqMaybe_$c/= @ GHC.Word.Word8 $dEq
  = MusiCompoNator.GeneralMidi.$s$fEqMaybe_$s$fEqMaybe_$c/=
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

