
==================== FINAL INTERFACE ====================
2019-05-14 04:18:32.590063437 UTC

interface MusiCompoNator-0.1.0.0-IGHgGetelKJ3ieYvvXydhc:MusiCompoNator.Composition 8063
  interface hash: 092665cdff796ee10e5acf5bed77a79a
  ABI hash: 8d84f1313db8a08e50e922a17313781e
  export-list hash: 7d9424dac735b981a2ae78abb2234d78
  orphan hash: cd8f2a00613ca5001e09a8cd60fc5baf
  flag hash: d6fb4c70088bda35d669fdf08ab0d44d
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  MusiCompoNator.Composition.absPitch
  MusiCompoNator.Composition.appLast
  MusiCompoNator.Composition.applyMode
  MusiCompoNator.Composition.arpeggio
  MusiCompoNator.Composition.bendInto
  MusiCompoNator.Composition.chord
  MusiCompoNator.Composition.derive
  MusiCompoNator.Composition.emptyVS
  MusiCompoNator.Composition.getPhrases
  MusiCompoNator.Composition.getScale
  MusiCompoNator.Composition.getTime
  MusiCompoNator.Composition.inKey
  MusiCompoNator.Composition.legato
  MusiCompoNator.Composition.liftL
  MusiCompoNator.Composition.line
  MusiCompoNator.Composition.mode
  MusiCompoNator.Composition.moreV
  MusiCompoNator.Composition.note
  MusiCompoNator.Composition.phrase
  MusiCompoNator.Composition.pitch
  MusiCompoNator.Composition.putPhrases
  MusiCompoNator.Composition.putScale
  MusiCompoNator.Composition.putTime
  MusiCompoNator.Composition.rest
  MusiCompoNator.Composition.runVoice
  MusiCompoNator.Composition.shift
  MusiCompoNator.Composition.silence
  MusiCompoNator.Composition.singleV
  MusiCompoNator.Composition.staccato
  MusiCompoNator.Composition.tie
  MusiCompoNator.Composition.transpose
  MusiCompoNator.Composition.unPhrase
  MusiCompoNator.Composition.volume
  MusiCompoNator.Composition.CPhrase
  MusiCompoNator.Composition.ControlPitchBeatTrifunctor{MusiCompoNator.Composition.lift3 MusiCompoNator.Composition.liftC MusiCompoNator.Composition.liftH MusiCompoNator.Composition.liftR}
  MusiCompoNator.Composition.Phrase{MusiCompoNator.Composition.:+: MusiCompoNator.Composition.:<: MusiCompoNator.Composition.Ctrl MusiCompoNator.Composition.Sig}
  MusiCompoNator.Composition.Phrase1
  MusiCompoNator.Composition.Phrase2
  MusiCompoNator.Composition.PhraseControl{MusiCompoNator.Composition.BendNext MusiCompoNator.Composition.Legato MusiCompoNator.Composition.Staccato MusiCompoNator.Composition.TieNext MusiCompoNator.Composition.Volume}
  MusiCompoNator.Composition.Prim{MusiCompoNator.Composition.Mode MusiCompoNator.Composition.Voicing}
  MusiCompoNator.Composition.Voice
  MusiCompoNator.Composition.VoiceState{MusiCompoNator.Composition.VS cursor phrases scale}
module dependencies: MusiCompoNator.Core
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0 mtl-2.2.2 transformers-0.5.5.0
orphans: transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
import  -/  MusiCompoNator.Core dbe69f021eb82eefbd6401926a0c3422
  exports: 8486fc8e0f9f670b51995717530546ca
  :=: cdef2ead1def023d62ca417110eb2b39
  Beat c6ca62f1d079d68a23afd68951c4f5e0
  Measurable 0d4d69ceea19c970984f8cd3c4048cdd
  Pitch 537f8031d76874bfdc1b47051e2e6fdc
  Rhythm 655c5ce74bf7309122bccab2bafdbb6f
  Scale 1b3fe72e3480886670d3576d5e99dc86
  Sequence 89af6fb046850de66e6ad48992f0c379
  Signature 59dccd3f690c8ffc282ab94f1cc1392b
  Silence 9fea1553cbfacc50d91d5e74e0833040
  Simultanity d7bae5616d683cf167db8ba1cff1a2f1
  Sound d1fbe85b4b84f66c3cdbca5ce7830610
  beat b0e8e7d2d5ad98c8d40dfe27fe6ed403
  duration af47bf45117bdbd65d878e5713b0937b
  index cddc512b35f5bba35cd92e37c81efa92
  measure 2e4d71bf77e87aaba555b32f2789378b
  signature 03f91bb01640b591aa88100402061732
  step 6d23e18065472205b31d15eeb8503aee
  unmeasure 72bff9471e0e3a28b81cfd9512a19584
  withSignature 974f1f3257f715cbf237593fccc6ae5b
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:Data.Functor 22aac80fdb6c7b7f60b4aaab86afee64
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:GHC.Num 847723f2584d989dac1eada133ac3fb8
import  -/  base-4.12.0.0:GHC.Real f7dad82c1d43d80823865d3e6c6636e0
import  -/  base-4.12.0.0:GHC.Show 4e438f26d903388cc6c2c5d64ed01b98
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  mtl-2.2.2:Control.Monad.State d44e211fd4e6fedd1cd68c2f55562f8e
import  -/  mtl-2.2.2:Control.Monad.State.Class 7b1f06840718b1757a1de559220ba63b
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy e3240683c533154c999a29320b0a7472
fixities infixr 3 :+:, infixr 4 :<:
a3158c66e6d523956b90124ecb464140
  $dmliftC ::
    (MusiCompoNator.Composition.ControlPitchBeatTrifunctor f,
     GHC.Num.Num b, GHC.Classes.Ord b) =>
    ([c] -> [c']) -> f c p b -> f c' p b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(C(C(C(C(C(S)))))))LLL),1*U(1*C1(C1(C1(C1(C1(C1(C1(U))))))),A,A,A)><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ f :: * -> * -> * -> *
                   ($dControlPitchBeatTrifunctor :: MusiCompoNator.Composition.ControlPitchBeatTrifunctor
                                                      f)
                   @ b
                   @ c
                   @ c'
                   @ p
                   ($dNum :: GHC.Num.Num b)
                   ($dOrd :: GHC.Classes.Ord b)
                   (f1 :: [c] -> [c']) ->
                 MusiCompoNator.Composition.lift3
                   @ f
                   $dControlPitchBeatTrifunctor
                   @ b
                   @ b
                   @ c
                   @ c'
                   @ p
                   @ p
                   $dNum
                   $dOrd
                   $dNum
                   $dOrd
                   f1
                   (GHC.Base.id @ (MusiCompoNator.Core.Sequence p))
                   (GHC.Base.id @ (MusiCompoNator.Core.Rhythm b))) -}
b9b44f2e9f9784a3288a4b997a3dfa5c
  $dmliftH ::
    (MusiCompoNator.Composition.ControlPitchBeatTrifunctor f,
     GHC.Num.Num b, GHC.Classes.Ord b) =>
    (MusiCompoNator.Core.Sequence p -> MusiCompoNator.Core.Sequence p')
    -> f c p b -> f c p' b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(C(C(C(C(C(C(C(S)))))))LLL),1*U(1*C1(C1(C1(C1(C1(C1(C1(U))))))),A,A,A)><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ f :: * -> * -> * -> *
                   ($dControlPitchBeatTrifunctor :: MusiCompoNator.Composition.ControlPitchBeatTrifunctor
                                                      f)
                   @ b
                   @ p
                   @ p'
                   @ c
                   ($dNum :: GHC.Num.Num b)
                   ($dOrd :: GHC.Classes.Ord b)
                   (f1 :: MusiCompoNator.Core.Sequence p
                          -> MusiCompoNator.Core.Sequence p') ->
                 MusiCompoNator.Composition.lift3
                   @ f
                   $dControlPitchBeatTrifunctor
                   @ b
                   @ b
                   @ c
                   @ c
                   @ p
                   @ p'
                   $dNum
                   $dOrd
                   $dNum
                   $dOrd
                   (GHC.Base.id @ [c])
                   f1
                   (GHC.Base.id @ (MusiCompoNator.Core.Rhythm b))) -}
9c74269011f0697fe92f876e50168250
  $dmliftR ::
    (MusiCompoNator.Composition.ControlPitchBeatTrifunctor f,
     GHC.Num.Num b, GHC.Classes.Ord b, GHC.Num.Num b',
     GHC.Classes.Ord b') =>
    (MusiCompoNator.Core.Rhythm b -> MusiCompoNator.Core.Rhythm b')
    -> f c p b -> f c p b'
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(C(C(C(C(C(C(C(S)))))))LLL),1*U(1*C1(C1(C1(C1(C1(C1(C1(U))))))),A,A,A)><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ f :: * -> * -> * -> *
                   ($dControlPitchBeatTrifunctor :: MusiCompoNator.Composition.ControlPitchBeatTrifunctor
                                                      f)
                   @ b
                   @ b'
                   @ c
                   @ p
                   ($dNum :: GHC.Num.Num b)
                   ($dOrd :: GHC.Classes.Ord b)
                   ($dNum1 :: GHC.Num.Num b')
                   ($dOrd1 :: GHC.Classes.Ord b')
                   (f1 :: MusiCompoNator.Core.Rhythm b
                          -> MusiCompoNator.Core.Rhythm b') ->
                 MusiCompoNator.Composition.lift3
                   @ f
                   $dControlPitchBeatTrifunctor
                   @ b
                   @ b'
                   @ c
                   @ c
                   @ p
                   @ p
                   $dNum
                   $dOrd
                   $dNum1
                   $dOrd1
                   (GHC.Base.id @ [c])
                   (GHC.Base.id @ (MusiCompoNator.Core.Sequence p))
                   f1) -}
b1d66be8f4a437ffd192934f04370c77
  $fControlPitchBeatTrifunctorPhrase ::
    MusiCompoNator.Composition.ControlPitchBeatTrifunctor
      MusiCompoNator.Composition.Phrase
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.Composition.Phrase
                  MusiCompoNator.Composition.$fControlPitchBeatTrifunctorPhrase_$clift3
                  MusiCompoNator.Composition.$fControlPitchBeatTrifunctorPhrase_$cliftC
                  MusiCompoNator.Composition.$fControlPitchBeatTrifunctorPhrase_$cliftH
                  MusiCompoNator.Composition.$fControlPitchBeatTrifunctorPhrase_$cliftR -}
2c50d2f2c8f4094abc923cb3e46d63d4
  $fControlPitchBeatTrifunctorPhrase_$clift3 ::
    (GHC.Num.Num b, GHC.Classes.Ord b, GHC.Num.Num b',
     GHC.Classes.Ord b') =>
    ([c] -> [c'])
    -> (MusiCompoNator.Core.Sequence p
        -> MusiCompoNator.Core.Sequence p')
    -> (MusiCompoNator.Core.Rhythm b -> MusiCompoNator.Core.Rhythm b')
    -> MusiCompoNator.Composition.Phrase c p b
    -> MusiCompoNator.Composition.Phrase c' p' b'
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U(C(C1(U)),A,A,A,A,A,C(U))><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,C(U)><L,1*C1(U)><L,1*C1(U)><S,1*U>m2,
     Inline: [2],
     Unfolding: InlineRule (8, True, False)
                (\ @ b
                   @ b'
                   @ c
                   @ c'
                   @ p
                   @ p'
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: GHC.Num.Num b')
                   (w3 :: GHC.Classes.Ord b')
                   (w4 :: [c] -> [c'])
                   (w5 :: MusiCompoNator.Core.Sequence p
                          -> MusiCompoNator.Core.Sequence p')
                   (w6 :: MusiCompoNator.Core.Rhythm b
                          -> MusiCompoNator.Core.Rhythm b')
                   (w7 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$w$clift3
                        @ b
                        @ b'
                        @ c
                        @ c'
                        @ p
                        @ p'
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig @ c' @ p' @ b' ww1 ww2 }) -}
b788d3554c735c0a067cd8facaebc169
  $fControlPitchBeatTrifunctorPhrase_$cliftC ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    ([c] -> [c'])
    -> MusiCompoNator.Composition.Phrase c p b
    -> MusiCompoNator.Composition.Phrase c' p b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,C(U)><S,1*U>m2,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   @ c
                   @ c'
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: [c] -> [c'])
                   (w3 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$w$cliftC
                        @ b
                        @ c
                        @ c'
                        @ p
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig @ c' @ p @ b ww1 ww2 }) -}
4fae5762662718257c262931717c19c5
  $fControlPitchBeatTrifunctorPhrase_$cliftH ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    (MusiCompoNator.Core.Sequence p -> MusiCompoNator.Core.Sequence p')
    -> MusiCompoNator.Composition.Phrase c p b
    -> MusiCompoNator.Composition.Phrase c p' b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,1*C1(U)><S,1*U>m2,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   @ p
                   @ p'
                   @ c
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: MusiCompoNator.Core.Sequence p
                          -> MusiCompoNator.Core.Sequence p')
                   (w3 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$w$cliftH
                        @ b
                        @ p
                        @ p'
                        @ c
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig @ c @ p' @ b ww1 ww2 }) -}
6c1357aff747402b78a3ae0ed6e36b14
  $fControlPitchBeatTrifunctorPhrase_$cliftR ::
    (GHC.Num.Num b, GHC.Classes.Ord b, GHC.Num.Num b',
     GHC.Classes.Ord b') =>
    (MusiCompoNator.Core.Rhythm b -> MusiCompoNator.Core.Rhythm b')
    -> MusiCompoNator.Composition.Phrase c p b
    -> MusiCompoNator.Composition.Phrase c p b'
  {- Arity: 6,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U(C(C1(U)),A,A,A,A,A,C(U))><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,1*C1(U)><S,1*U>m2,
     Unfolding: InlineRule (6, True, False)
                (\ @ b
                   @ b'
                   @ c
                   @ p
                   ($dNum :: GHC.Num.Num b)
                   ($dOrd :: GHC.Classes.Ord b)
                   ($dNum1 :: GHC.Num.Num b')
                   ($dOrd1 :: GHC.Classes.Ord b')
                   (f :: MusiCompoNator.Core.Rhythm b
                         -> MusiCompoNator.Core.Rhythm b')
                   (x :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.unPhrase
                        @ b
                        @ c
                        @ p
                        $dNum
                        $dOrd
                        x of wild { (,,) c1 p1 b1 ->
                 MusiCompoNator.Composition.phrase
                   @ b'
                   @ c
                   @ p
                   $dNum1
                   $dOrd1
                   (c1, p1, f b1) }) -}
cb4d9de434048b8a17a5eae94374cec7
  $fEqPhraseControl ::
    GHC.Classes.Eq MusiCompoNator.Composition.PhraseControl
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.Composition.PhraseControl
                  MusiCompoNator.Composition.$fEqPhraseControl_$c==
                  MusiCompoNator.Composition.$fEqPhraseControl_$c/= -}
cb4d9de434048b8a17a5eae94374cec7
  $fEqPhraseControl_$c/= ::
    MusiCompoNator.Composition.PhraseControl
    -> MusiCompoNator.Composition.PhraseControl -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: MusiCompoNator.Composition.PhraseControl)
                   (y :: MusiCompoNator.Composition.PhraseControl) ->
                 case MusiCompoNator.Composition.$fEqPhraseControl_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
cb4d9de434048b8a17a5eae94374cec7
  $fEqPhraseControl_$c== ::
    MusiCompoNator.Composition.PhraseControl
    -> MusiCompoNator.Composition.PhraseControl -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: MusiCompoNator.Composition.PhraseControl)
                   (ds1 :: MusiCompoNator.Composition.PhraseControl) ->
                 case ds of wild {
                   MusiCompoNator.Composition.BendNext
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MusiCompoNator.Composition.BendNext -> GHC.Types.True }
                   MusiCompoNator.Composition.TieNext
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MusiCompoNator.Composition.TieNext -> GHC.Types.True }
                   MusiCompoNator.Composition.Volume a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MusiCompoNator.Composition.Volume b1
                        -> case a1 of wild2 { GHC.Real.:% a2 a3 ->
                           case b1 of wild3 { GHC.Real.:% b2 b3 ->
                           case GHC.Integer.Type.eqInteger# a2 b2 of wild4 {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case GHC.Integer.Type.eqInteger# a3 b3 of wild5 { DEFAULT ->
                                GHC.Prim.tagToEnum# @ GHC.Types.Bool wild5 } } } } }
                   MusiCompoNator.Composition.Legato
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MusiCompoNator.Composition.Legato -> GHC.Types.True }
                   MusiCompoNator.Composition.Staccato a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        MusiCompoNator.Composition.Staccato b1
                        -> case a1 of wild2 { GHC.Real.:% a2 a3 ->
                           case b1 of wild3 { GHC.Real.:% b2 b3 ->
                           case GHC.Integer.Type.eqInteger# a2 b2 of wild4 {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case GHC.Integer.Type.eqInteger# a3 b3 of wild5 { DEFAULT ->
                                GHC.Prim.tagToEnum# @ GHC.Types.Bool wild5 } } } } } }) -}
9d5247246b1926496dca5bba8e7b1109
  $fMeasurablePhrase ::
    MusiCompoNator.Core.Measurable
      (MusiCompoNator.Composition.Phrase
         c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch))
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ c.
                  @ (MusiCompoNator.Composition.Phrase
                       c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch))
                  (MusiCompoNator.Composition.$fMeasurablePhrase_$cwithSignature @ c)
                  (MusiCompoNator.Composition.$fMeasurablePhrase_$csignature @ c)
                  (MusiCompoNator.Composition.$fMeasurablePhrase_$cmeasure @ c)
                  (MusiCompoNator.Composition.$fMeasurablePhrase_$cunmeasure @ c) -}
9d5247246b1926496dca5bba8e7b1109
  $fMeasurablePhrase0 ::
    MusiCompoNator.Core.Measurable
      (MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ c.
                  @ (MusiCompoNator.Composition.Phrase
                       c MusiCompoNator.Composition.Prim)
                  (MusiCompoNator.Composition.$fMeasurablePhrase0_$cwithSignature
                     @ c)
                  (MusiCompoNator.Composition.$fMeasurablePhrase0_$csignature @ c)
                  (MusiCompoNator.Composition.$fMeasurablePhrase0_$cmeasure @ c)
                  (MusiCompoNator.Composition.$fMeasurablePhrase0_$cunmeasure @ c) -}
9d5247246b1926496dca5bba8e7b1109
  $fMeasurablePhrase0_$cmeasure ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    [a]
    -> MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><L,A>, Inline: [2],
     Unfolding: InlineRule (2, True, True)
                (\ @ c @ a (w :: GHC.Num.Num a) (w1 :: GHC.Classes.Ord a) ->
                 MusiCompoNator.Composition.$w$cmeasure1 @ c @ a w) -}
9d5247246b1926496dca5bba8e7b1109
  $fMeasurablePhrase0_$csignature ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Composition.Phrase
      c MusiCompoNator.Composition.Prim a
    -> MusiCompoNator.Core.Signature a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ c
                   @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (ph :: MusiCompoNator.Composition.Phrase
                            c MusiCompoNator.Composition.Prim a) ->
                 MusiCompoNator.Core.$fMeasurableRhythm_$csignature
                   @ a
                   $dNum
                   $dOrd
                   (case MusiCompoNator.Composition.unPhrase
                           @ a
                           @ c
                           @ MusiCompoNator.Composition.Prim
                           $dNum
                           $dOrd
                           ph of wild { (,,) ds ds1 r ->
                    r })) -}
9d5247246b1926496dca5bba8e7b1109
  $fMeasurablePhrase0_$cunmeasure ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Composition.Phrase
      c MusiCompoNator.Composition.Prim a
    -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ c
                   @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (ph :: MusiCompoNator.Composition.Phrase
                            c MusiCompoNator.Composition.Prim a) ->
                 case MusiCompoNator.Composition.unPhrase
                        @ a
                        @ c
                        @ MusiCompoNator.Composition.Prim
                        $dNum
                        $dOrd
                        ph of wild { (,,) ds ds1 r ->
                 MusiCompoNator.Core.$w$cunmeasure @ a $dNum r }) -}
9d5247246b1926496dca5bba8e7b1109
  $fMeasurablePhrase0_$cwithSignature ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Core.Signature a
    -> MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim a
    -> MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ c @ a ($dNum :: GHC.Num.Num a) ($dOrd :: GHC.Classes.Ord a) ->
                 MusiCompoNator.Composition.Sig
                   @ c
                   @ MusiCompoNator.Composition.Prim
                   @ a) -}
d9d39cf0ea7b20f8946db3d6dde98f3b
  $fMeasurablePhrase1 ::
    [MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                   (MusiCompoNator.Core.Silence @ MusiCompoNator.Core.Pitch)
                   (GHC.Types.[]
                      @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch))) -}
e5b0340b5c5980549fa435f8e175343a
  $fMeasurablePhrase2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
9d5247246b1926496dca5bba8e7b1109
  $fMeasurablePhrase_$cmeasure ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    [a]
    -> MusiCompoNator.Composition.Phrase
         c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><L,A>, Inline: [2],
     Unfolding: InlineRule (2, True, True)
                (\ @ c @ a (w :: GHC.Num.Num a) (w1 :: GHC.Classes.Ord a) ->
                 MusiCompoNator.Composition.$w$cmeasure @ c @ a w) -}
9d5247246b1926496dca5bba8e7b1109
  $fMeasurablePhrase_$csignature ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Composition.Phrase
      c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
    -> MusiCompoNator.Core.Signature a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ c
                   @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (ph :: MusiCompoNator.Composition.Phrase
                            c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a) ->
                 MusiCompoNator.Core.$fMeasurableRhythm_$csignature
                   @ a
                   $dNum
                   $dOrd
                   (case MusiCompoNator.Composition.unPhrase
                           @ a
                           @ c
                           @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                           $dNum
                           $dOrd
                           ph of wild { (,,) ds ds1 r ->
                    r })) -}
9d5247246b1926496dca5bba8e7b1109
  $fMeasurablePhrase_$cunmeasure ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Composition.Phrase
      c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
    -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ c
                   @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (ph :: MusiCompoNator.Composition.Phrase
                            c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a) ->
                 case MusiCompoNator.Composition.unPhrase
                        @ a
                        @ c
                        @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                        $dNum
                        $dOrd
                        ph of wild { (,,) ds ds1 r ->
                 MusiCompoNator.Core.$w$cunmeasure @ a $dNum r }) -}
9d5247246b1926496dca5bba8e7b1109
  $fMeasurablePhrase_$cwithSignature ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    MusiCompoNator.Core.Signature a
    -> MusiCompoNator.Composition.Phrase
         c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
    -> MusiCompoNator.Composition.Phrase
         c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ c @ a ($dNum :: GHC.Num.Num a) ($dOrd :: GHC.Classes.Ord a) ->
                 MusiCompoNator.Composition.Sig
                   @ c
                   @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                   @ a) -}
9d5247246b1926496dca5bba8e7b1109
  $fSemigroupPhrase ::
    GHC.Base.Semigroup (MusiCompoNator.Composition.Phrase c p b)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ c @ p @ b.
                  @ (MusiCompoNator.Composition.Phrase c p b)
                  (MusiCompoNator.Composition.:+: @ c @ p @ b)
                  (MusiCompoNator.Composition.$fSemigroupPhrase_$csconcat
                     @ c
                     @ p
                     @ b)
                  (MusiCompoNator.Composition.$fSemigroupPhrase_$cstimes
                     @ c
                     @ p
                     @ b) -}
9d5247246b1926496dca5bba8e7b1109
  $fSemigroupPhrase1 ::
    MusiCompoNator.Composition.Phrase c p b
    -> [MusiCompoNator.Composition.Phrase c p b]
    -> MusiCompoNator.Composition.Phrase c p b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
9d5247246b1926496dca5bba8e7b1109
  $fSemigroupPhrase_$csconcat ::
    GHC.Base.NonEmpty (MusiCompoNator.Composition.Phrase c p b)
    -> MusiCompoNator.Composition.Phrase c p b
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ c
                   @ p
                   @ b
                   (ds :: GHC.Base.NonEmpty
                            (MusiCompoNator.Composition.Phrase c p b)) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 MusiCompoNator.Composition.$fSemigroupPhrase1
                   @ b
                   @ p
                   @ c
                   a1
                   as }) -}
9d5247246b1926496dca5bba8e7b1109
  $fSemigroupPhrase_$cstimes ::
    GHC.Real.Integral b2 =>
    b2
    -> MusiCompoNator.Composition.Phrase c p b1
    -> MusiCompoNator.Composition.Phrase c p b1
  {- Arity: 1, Strictness: <L,U> -}
2e25dcaa65d0bf72796a58d31a68fca6
  $fSemigroupStateT ::
    GHC.Base.Semigroup (MusiCompoNator.Composition.Voice a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (MusiCompoNator.Composition.Voice a)
                  (MusiCompoNator.Composition.$fSemigroupStateT_$s$fMonadStateT_$c>>
                     @ MusiCompoNator.Composition.VoiceState
                     @ a
                     @ a)
                  (MusiCompoNator.Composition.$fSemigroupStateT_$csconcat @ a)
                  (MusiCompoNator.Composition.$fSemigroupStateT_$cstimes @ a) -}
2e25dcaa65d0bf72796a58d31a68fca6
  $fSemigroupStateT1 ::
    MusiCompoNator.Composition.Voice a
    -> [MusiCompoNator.Composition.Voice a]
    -> MusiCompoNator.Composition.Voice a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
2e25dcaa65d0bf72796a58d31a68fca6
  $fSemigroupStateT_$csconcat ::
    GHC.Base.NonEmpty (MusiCompoNator.Composition.Voice a)
    -> MusiCompoNator.Composition.Voice a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: GHC.Base.NonEmpty (MusiCompoNator.Composition.Voice a)) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 MusiCompoNator.Composition.$fSemigroupStateT1 @ a a1 as }) -}
2e25dcaa65d0bf72796a58d31a68fca6
  $fSemigroupStateT_$cstimes ::
    GHC.Real.Integral b =>
    b
    -> MusiCompoNator.Composition.Voice a
    -> MusiCompoNator.Composition.Voice a
  {- Arity: 1, Strictness: <L,U> -}
1f3cab5312292be0710593367af5172c
  $fSemigroupStateT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT
      s Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(A,1*U))><C(S),1*C1(U(U,U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s Data.Functor.Identity.Identity a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity b)
                   (s1 :: s) ->
                 k `cast`
                 (Control.Monad.Trans.State.Lazy.N:StateT[0]
                      <s>_N <Data.Functor.Identity.Identity>_R <b>_N)
                   (case (m1
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <a>_N)
                            s1)
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a, s)>_R) of wild { (,) a1 s' ->
                    s' }))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
9d5247246b1926496dca5bba8e7b1109
  $fShowPhrase ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show p) =>
    GHC.Show.Show (MusiCompoNator.Composition.Phrase c p b)
  DFunId
  {- Arity: 3,
     Strictness: <L,U(A,A,C(C(U)))><L,U(A,C(U),C(C(U)))><L,U(A,A,C(C(U)))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ c
                      @ p
                      @ b
                      (v :: GHC.Show.Show c)
                      (v1 :: GHC.Show.Show b)
                      (v2 :: GHC.Show.Show p).
                  @ (MusiCompoNator.Composition.Phrase c p b)
                  (MusiCompoNator.Composition.$fShowPhrase_$cshowsPrec
                     @ c
                     @ p
                     @ b
                     v
                     v1
                     v2)
                  (MusiCompoNator.Composition.$fShowPhrase_$cshow
                     @ c
                     @ p
                     @ b
                     v
                     v1
                     v2)
                  (MusiCompoNator.Composition.$fShowPhrase_$cshowList
                     @ c
                     @ p
                     @ b
                     v
                     v1
                     v2) -}
f56f1a1a51a0d8f39d443f2da3829e2f
  $fShowPhrase1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
cb4d9de434048b8a17a5eae94374cec7
  $fShowPhraseControl ::
    GHC.Show.Show MusiCompoNator.Composition.PhraseControl
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ MusiCompoNator.Composition.PhraseControl
                  MusiCompoNator.Composition.$fShowPhraseControl_$cshowsPrec
                  MusiCompoNator.Composition.$fShowPhraseControl_$cshow
                  MusiCompoNator.Composition.$fShowPhraseControl_$cshowList -}
cb4d9de434048b8a17a5eae94374cec7
  $fShowPhraseControl1 ::
    MusiCompoNator.Composition.PhraseControl -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (MusiCompoNator.Composition.$fShowPhraseControl_$cshowsPrec
                   MusiCompoNator.Composition.$fShowPhrase1) -}
6a70e07b7c9b451117f9c2927bb0b638
  $fShowPhraseControl2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Staccato "#) -}
f3185966e912d127ce9e9de769978bb6
  $fShowPhraseControl3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MusiCompoNator.Composition.$fShowPhraseControl4) -}
f223cd67c410bf27c9a6fb7d1f8a68bb
  $fShowPhraseControl4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Legato"#) -}
be36cac00c66c38fc180a2787e320980
  $fShowPhraseControl5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Volume "#) -}
b046b9446d62980b03c6ec3bd5e3c0df
  $fShowPhraseControl6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MusiCompoNator.Composition.$fShowPhraseControl7) -}
2728cd0800b6f4d8aad4f3e16056827a
  $fShowPhraseControl7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TieNext"#) -}
2345b72748462814f85308e839d85eed
  $fShowPhraseControl8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   MusiCompoNator.Composition.$fShowPhraseControl9) -}
3b8e210057feda611ad8120b57b7c3cd
  $fShowPhraseControl9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BendNext"#) -}
cb4d9de434048b8a17a5eae94374cec7
  $fShowPhraseControl_$cshow ::
    MusiCompoNator.Composition.PhraseControl -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: MusiCompoNator.Composition.PhraseControl) ->
                 case x of wild {
                   MusiCompoNator.Composition.BendNext
                   -> MusiCompoNator.Composition.$fShowPhraseControl8
                   MusiCompoNator.Composition.TieNext
                   -> MusiCompoNator.Composition.$fShowPhraseControl6
                   MusiCompoNator.Composition.Volume b1
                   -> GHC.CString.unpackAppendCString#
                        MusiCompoNator.Composition.$fShowPhraseControl5
                        (case b1 of ww2 { GHC.Real.:% ww3 ww4 ->
                         case GHC.Real.$w$s$cshowsPrec
                                11#
                                ww3
                                ww4
                                (GHC.Types.[] @ GHC.Types.Char) of ww5 { (#,#) ww6 ww7 ->
                         GHC.Types.: @ GHC.Types.Char ww6 ww7 } })
                   MusiCompoNator.Composition.Legato
                   -> MusiCompoNator.Composition.$fShowPhraseControl3
                   MusiCompoNator.Composition.Staccato b1
                   -> GHC.CString.unpackAppendCString#
                        MusiCompoNator.Composition.$fShowPhraseControl2
                        (case b1 of ww2 { GHC.Real.:% ww3 ww4 ->
                         case GHC.Real.$w$s$cshowsPrec
                                11#
                                ww3
                                ww4
                                (GHC.Types.[] @ GHC.Types.Char) of ww5 { (#,#) ww6 ww7 ->
                         GHC.Types.: @ GHC.Types.Char ww6 ww7 } }) }) -}
cb4d9de434048b8a17a5eae94374cec7
  $fShowPhraseControl_$cshowList ::
    [MusiCompoNator.Composition.PhraseControl] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [MusiCompoNator.Composition.PhraseControl])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ MusiCompoNator.Composition.PhraseControl
                   MusiCompoNator.Composition.$fShowPhraseControl1
                   ls
                   s) -}
cb4d9de434048b8a17a5eae94374cec7
  $fShowPhraseControl_$cshowsPrec ::
    GHC.Types.Int
    -> MusiCompoNator.Composition.PhraseControl -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: MusiCompoNator.Composition.PhraseControl)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   MusiCompoNator.Composition.BendNext
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        MusiCompoNator.Composition.$fShowPhraseControl8
                        eta
                   MusiCompoNator.Composition.TieNext
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        MusiCompoNator.Composition.$fShowPhraseControl6
                        eta
                   MusiCompoNator.Composition.Volume b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             MusiCompoNator.Composition.$fShowPhraseControl5
                             (case b1 of ww2 { GHC.Real.:% ww3 ww4 ->
                              case GHC.Real.$w$s$cshowsPrec
                                     11#
                                     ww3
                                     ww4
                                     eta of ww5 { (#,#) ww6 ww7 ->
                              GHC.Types.: @ GHC.Types.Char ww6 ww7 } })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                MusiCompoNator.Composition.$fShowPhraseControl5
                                (case b1 of ww2 { GHC.Real.:% ww3 ww4 ->
                                 case GHC.Real.$w$s$cshowsPrec
                                        11#
                                        ww3
                                        ww4
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) of ww5 { (#,#) ww6 ww7 ->
                                 GHC.Types.: @ GHC.Types.Char ww6 ww7 } })) } }
                   MusiCompoNator.Composition.Legato
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        MusiCompoNator.Composition.$fShowPhraseControl3
                        eta
                   MusiCompoNator.Composition.Staccato b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             MusiCompoNator.Composition.$fShowPhraseControl2
                             (case b1 of ww2 { GHC.Real.:% ww3 ww4 ->
                              case GHC.Real.$w$s$cshowsPrec
                                     11#
                                     ww3
                                     ww4
                                     eta of ww5 { (#,#) ww6 ww7 ->
                              GHC.Types.: @ GHC.Types.Char ww6 ww7 } })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                MusiCompoNator.Composition.$fShowPhraseControl2
                                (case b1 of ww2 { GHC.Real.:% ww3 ww4 ->
                                 case GHC.Real.$w$s$cshowsPrec
                                        11#
                                        ww3
                                        ww4
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           eta) of ww5 { (#,#) ww6 ww7 ->
                                 GHC.Types.: @ GHC.Types.Char ww6 ww7 } })) } } }) -}
9d5247246b1926496dca5bba8e7b1109
  $fShowPhrase_$cshow ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show p) =>
    MusiCompoNator.Composition.Phrase c p b -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,U(A,A,C(C(U)))><L,U(A,C(U),C(C(U)))><L,U(A,A,C(C(U)))><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ c
                   @ p
                   @ b
                   ($dShow :: GHC.Show.Show c)
                   ($dShow1 :: GHC.Show.Show b)
                   ($dShow2 :: GHC.Show.Show p)
                   (x :: MusiCompoNator.Composition.Phrase c p b) ->
                 MusiCompoNator.Composition.$fShowPhrase_$cshowsPrec
                   @ c
                   @ p
                   @ b
                   $dShow
                   $dShow1
                   $dShow2
                   MusiCompoNator.Composition.$fShowPhrase1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9d5247246b1926496dca5bba8e7b1109
  $fShowPhrase_$cshowList ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show p) =>
    [MusiCompoNator.Composition.Phrase c p b] -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(A,A,C(C(U)))><L,U(A,C(U),C(C(U)))><L,U(A,A,C(C(U)))><S,1*U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ c
                   @ p
                   @ b
                   ($dShow :: GHC.Show.Show c)
                   ($dShow1 :: GHC.Show.Show b)
                   ($dShow2 :: GHC.Show.Show p)
                   (ls :: [MusiCompoNator.Composition.Phrase c p b])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (MusiCompoNator.Composition.Phrase c p b)
                   (MusiCompoNator.Composition.$fShowPhrase_$cshowsPrec
                      @ c
                      @ p
                      @ b
                      $dShow
                      $dShow1
                      $dShow2
                      MusiCompoNator.Composition.$fShowPhrase1)
                   ls
                   s) -}
9d5247246b1926496dca5bba8e7b1109
  $fShowPhrase_$cshowsPrec ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show p) =>
    GHC.Types.Int
    -> MusiCompoNator.Composition.Phrase c p b -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(A,A,C(C(U)))><L,U(A,C(U),C(C(U)))><L,U(A,A,C(C(U)))><S(S),1*U(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ c
                   @ p
                   @ b
                   (w :: GHC.Show.Show c)
                   (w1 :: GHC.Show.Show b)
                   (w2 :: GHC.Show.Show p)
                   (w3 :: GHC.Types.Int)
                   (w4 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case w3 of ww { GHC.Types.I# ww1 ->
                 MusiCompoNator.Composition.$w$cshowsPrec
                   @ c
                   @ p
                   @ b
                   w
                   w1
                   w2
                   ww1
                   w4 }) -}
7437ba3b3c6bc70ec5b32cbf3cff3613
  $tc':+: :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10695754662963332827##
                   7395352746665049511##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc':+:2
                   3#
                   MusiCompoNator.Composition.$tc':+:1) -}
07c30abcb2bd64be03bc833e234d2bc2
  $tc':+:1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4ee22c96a1b74a74bd9a01b7b73b2927
  $tc':+:2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc':+:3) -}
e4dbe61bfa120d99e8945209822da833
  $tc':+:3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("':+:"#) -}
7f9f8e3dfc00f57d8f49a301e961dbc6
  $tc':<: :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9344215620469168488##
                   9288255788106869004##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc':<:2
                   3#
                   MusiCompoNator.Composition.$tc':<:1) -}
58f715b8b4ac48724a8db8da4ae95154
  $tc':<:1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7ee476ff5958410639f4c6f57a087627
  $tc':<:2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc':<:3) -}
5972e02c72c72038dd8fa80cd7c34c9d
  $tc':<:3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("':<:"#) -}
6021524a5451d956c09cf06e2e6af674
  $tc'BendNext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8088390602678151976##
                   9091784849155898733##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'BendNext2
                   0#
                   MusiCompoNator.Composition.$tc'BendNext1) -}
d727ad08fc76b55f8f6dc46034927a96
  $tc'BendNext1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
7bd490c25c8c13fdd72e015388d9b233
  $tc'BendNext2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'BendNext3) -}
62950bfb362c8126ba6e1c48d28c4346
  $tc'BendNext3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BendNext"#) -}
2cf305bb20b7292e66df035e563ecc1c
  $tc'Ctrl :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10924375966570397099##
                   8006231629954977958##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Ctrl2
                   3#
                   MusiCompoNator.Composition.$tc'Ctrl1) -}
02dcb8a80f6e130263c70a3055b5c5a0
  $tc'Ctrl1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2d1fb823d52fb46889430831a6be88bc
  $tc'Ctrl2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Ctrl3) -}
652fa5f0246d2e00d52c1309965cb021
  $tc'Ctrl3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ctrl"#) -}
306a7f095c172c3906469e5321de52a1
  $tc'Legato :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10754212643829172639##
                   15388374225520781604##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Legato1
                   0#
                   MusiCompoNator.Composition.$tc'BendNext1) -}
f75a16d712071faac4c028df1bc95067
  $tc'Legato1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Legato2) -}
2f4e8d1fe81f5d91ffe93c799e20a0be
  $tc'Legato2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Legato"#) -}
a3ac5ddd0012ff570d22f7919b3fc1c5
  $tc'Mode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2763800558082840000##
                   512624157321340590##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Mode2
                   0#
                   MusiCompoNator.Composition.$tc'Mode1) -}
80cca30d8bcaf46d16dcb14c2f12a76a
  $tc'Mode1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b0877657ef5e70cbbdb0d270102bb52d
  $tc'Mode2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Mode3) -}
01d693d8ecbfa2ca006d6f1e387379b9
  $tc'Mode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Mode"#) -}
f9f7932e4599dda42e5a64a312893672
  $tc'Sig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16176332431950702239##
                   16261294079097339676##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Sig2
                   3#
                   MusiCompoNator.Composition.$tc'Sig1) -}
12e48eebf50a29781136fcb452189fdf
  $tc'Sig1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
df1988d3853238f5b66508355905b3ef
  $tc'Sig2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Sig3) -}
6c53f1e5472197b6375e05a846163e2b
  $tc'Sig3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Sig"#) -}
bc84b6b852dfc3fd1100d0d1d18a3cd1
  $tc'Staccato :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13329513605556663869##
                   10149609572902463814##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Staccato2
                   0#
                   MusiCompoNator.Composition.$tc'Staccato1) -}
34cd0ca38b8ae4ca2e7d068c1310ceb0
  $tc'Staccato1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c200d403ec343ec21a9478ea5a2251a1
  $tc'Staccato2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Staccato3) -}
c18c43968777bdebcf2d8418b9138e90
  $tc'Staccato3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Staccato"#) -}
9f6416054ad0d0b1f9f14809d96c8379
  $tc'TieNext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3918184260353636356##
                   16886305074470035144##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'TieNext1
                   0#
                   MusiCompoNator.Composition.$tc'BendNext1) -}
3a452951f7d757557b8502d2c8bf6160
  $tc'TieNext1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'TieNext2) -}
7e099ac5c8916d0156cf18d815490c0c
  $tc'TieNext2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TieNext"#) -}
622db62de17ecd64fee82ee212c2dfd4
  $tc'VS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2346171781677926543##
                   3525688830098404758##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'VS2
                   0#
                   MusiCompoNator.Composition.$tc'VS1) -}
ed59b30b8620e8477b0f465433b4bfae
  $tc'VS1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dc10a0b4a63dc9cafbc6c3222d070d13
  $tc'VS2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'VS3) -}
0277cc2ff686cf0f57e2fd7e1f44bee3
  $tc'VS3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VS"#) -}
00e8be876a27224ad152132b39b604af
  $tc'Voicing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15713034629999737581##
                   17293099255953744886##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Voicing2
                   0#
                   MusiCompoNator.Composition.$tc'Voicing1) -}
0ed7ce7328a39ceca9d7057fcc152556
  $tc'Voicing1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5c16f1ab32802c37ba299d5ff49c357b
  $tc'Voicing2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Voicing3) -}
115d81819d6cd4e6a3029fd24c8be40b
  $tc'Voicing3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Voicing"#) -}
6dc1e274be1b4ea2c55fd9a8c4be7efb
  $tc'Volume :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11967610701227996129##
                   3290849505340837376##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tc'Volume1
                   0#
                   MusiCompoNator.Composition.$tc'Staccato1) -}
b1f6e97c4a0ccd419d92bbcb4197396c
  $tc'Volume1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tc'Volume2) -}
2ba3c042ec70d23ebeb97b4b6e9555c0
  $tc'Volume2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Volume"#) -}
1c4dcb7b3756d7e9e6dda6228527b397
  $tcControlPitchBeatTrifunctor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8066387325727585536##
                   3875925908235820739##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tcControlPitchBeatTrifunctor2
                   0#
                   MusiCompoNator.Composition.$tcControlPitchBeatTrifunctor1) -}
a5afaebed52e381c62a814aeff4fa542
  $tcControlPitchBeatTrifunctor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f836008c169c2f92c35832d49959b639
  $tcControlPitchBeatTrifunctor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tcControlPitchBeatTrifunctor3) -}
3d0f3ff3192f61a045d19da32da37d78
  $tcControlPitchBeatTrifunctor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ControlPitchBeatTrifunctor"#) -}
dd41eae46b4c6cf466b8eea2f8f13181
  $tcPhrase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10045438353821820433##
                   756978895294371045##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tcPhrase2
                   0#
                   MusiCompoNator.Composition.$tcPhrase1) -}
d976cd1689fba09958297336a39bede6
  $tcPhrase1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cc41c76dc241b8cbcb1c4465d33f7cda
  $tcPhrase2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tcPhrase3) -}
8ff78a563e903674eecf54ed4c6281f9
  $tcPhrase3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Phrase"#) -}
8bc3a231511a9d712037939c45f88560
  $tcPhraseControl :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2749868702034088075##
                   9271719508709802547##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tcPhraseControl1
                   0#
                   GHC.Types.krep$*) -}
588f769e29c54fab957a109739da68f4
  $tcPhraseControl1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tcPhraseControl2) -}
ed1cdbcfb9df6f2b2450e21ce8f92eff
  $tcPhraseControl2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PhraseControl"#) -}
f6fea2647a8c797f9e139293de682ae3
  $tcPrim :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3990634474915550768##
                   15300467382707400857##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tcPrim1
                   0#
                   GHC.Types.krep$*) -}
87ebb3d09f9f6ad81486cdbc7f641326
  $tcPrim1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tcPrim2) -}
0deb3271b30ac8c045c46b13dff3610f
  $tcPrim2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prim"#) -}
b2d2b15a6e368aa0019a09dd78b6a6e1
  $tcVoiceState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8977225480379171596##
                   12863015969660803565##
                   MusiCompoNator.Composition.$trModule
                   MusiCompoNator.Composition.$tcVoiceState1
                   0#
                   GHC.Types.krep$*) -}
0d5066796170c7605eda8e96f33b6522
  $tcVoiceState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$tcVoiceState2) -}
a14918b5b6ec55ed1e8402535ffc5e69
  $tcVoiceState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("VoiceState"#) -}
2f9427597ef949d885e9e3bf8245d187
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MusiCompoNator.Composition.$trModule3
                   MusiCompoNator.Composition.$trModule1) -}
16a55028eccba6f1066f7375cca6534b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$trModule2) -}
1df5b9546ecdad6564fd065cd600c7e7
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MusiCompoNator.Composition"#) -}
375856ed8c9a40c0b02a731b58158113
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   MusiCompoNator.Composition.$trModule4) -}
5ab902848f14920e5fcf8c204f499790
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("MusiCompoNator-0.1.0.0-IGHgGetelKJ3ieYvvXydhc"#) -}
52544f9441aec860c376abfeba7b0b40
  $w$clift3 ::
    (GHC.Num.Num b, GHC.Classes.Ord b, GHC.Num.Num b',
     GHC.Classes.Ord b') =>
    ([c] -> [c'])
    -> (MusiCompoNator.Core.Sequence p
        -> MusiCompoNator.Core.Sequence p')
    -> (MusiCompoNator.Core.Rhythm b -> MusiCompoNator.Core.Rhythm b')
    -> MusiCompoNator.Composition.Phrase c p b
    -> (# MusiCompoNator.Core.Signature b',
          MusiCompoNator.Composition.Phrase c' p' b' #)
  {- Arity: 8,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U(C(C1(U)),A,A,A,A,A,C(U))><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,C(U)><L,1*C1(U)><L,1*C1(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ b
                   @ b'
                   @ c
                   @ c'
                   @ p
                   @ p'
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: GHC.Num.Num b')
                   (w3 :: GHC.Classes.Ord b')
                   (w4 :: [c] -> [c'])
                   (w5 :: MusiCompoNator.Core.Sequence p
                          -> MusiCompoNator.Core.Sequence p')
                   (w6 :: MusiCompoNator.Core.Rhythm b
                          -> MusiCompoNator.Core.Rhythm b')
                   (w7 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$wunPhrase
                        @ b
                        @ c
                        @ p
                        w
                        w1
                        w7 of ww { (#,,#) ww1 ww2 ww3 ->
                 let {
                   ww4 :: MusiCompoNator.Core.Rhythm b' = w6 ww3
                 } in
                 (# MusiCompoNator.Core.$fMeasurableRhythm_$csignature
                      @ b'
                      w2
                      w3
                      ww4,
                    MusiCompoNator.Composition.phrase5
                      @ b'
                      @ p'
                      @ c'
                      (GHC.Base.map
                         @ ([c'], p', b')
                         @ (MusiCompoNator.Composition.Phrase c' p' b')
                         (MusiCompoNator.Composition.phrase4 @ c' @ p' @ b')
                         (GHC.List.zip3
                            @ [c']
                            @ p'
                            @ b'
                            (GHC.Base.map @ [c] @ [c'] w4 ww1)
                            (w5 ww2)
                            (MusiCompoNator.Core.$w$cunmeasure @ b' w2 ww4))) #) }) -}
1ce2180d5865da4a288f365eb7621267
  $w$cliftC ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    ([c] -> [c'])
    -> MusiCompoNator.Composition.Phrase c p b
    -> (# MusiCompoNator.Core.Signature b,
          MusiCompoNator.Composition.Phrase c' p b #)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,C(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ b
                   @ c
                   @ c'
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: [c] -> [c'])
                   (w3 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$wunPhrase
                        @ b
                        @ c
                        @ p
                        w
                        w1
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.Composition.$wphrase
                   @ b
                   @ c'
                   @ p
                   w
                   w1
                   (GHC.Base.map @ [c] @ [c'] w2 ww1)
                   ww2
                   ww3 }) -}
80fb317958cb3e84dfb82b1484b0fae1
  $w$cliftH ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    (MusiCompoNator.Core.Sequence p -> MusiCompoNator.Core.Sequence p')
    -> MusiCompoNator.Composition.Phrase c p b
    -> (# MusiCompoNator.Core.Signature b,
          MusiCompoNator.Composition.Phrase c p' b #)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,1*C1(U)><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ b
                   @ p
                   @ p'
                   @ c
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: MusiCompoNator.Core.Sequence p
                          -> MusiCompoNator.Core.Sequence p')
                   (w3 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$wunPhrase
                        @ b
                        @ c
                        @ p
                        w
                        w1
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.Composition.$wphrase
                   @ b
                   @ c
                   @ p'
                   w
                   w1
                   ww1
                   (w2 ww2)
                   ww3 }) -}
9d5247246b1926496dca5bba8e7b1109
  $w$cmeasure ::
    GHC.Num.Num a =>
    [a]
    -> MusiCompoNator.Composition.Phrase
         c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))>, Inline: [2],
     Unfolding: (\ @ c @ a (w :: GHC.Num.Num a) ->
                 let {
                   f :: a
                   = GHC.Num.fromInteger
                       @ a
                       w
                       MusiCompoNator.Composition.$fMeasurablePhrase2
                 } in
                 let {
                   f1 :: [a] = GHC.Types.: @ a f (GHC.Types.[] @ a)
                 } in
                 let {
                   f2 :: MusiCompoNator.Core.Rhythm a
                   = MusiCompoNator.Core.Measure @ a f1
                 } in
                 let {
                   f3 :: MusiCompoNator.Composition.Phrase
                           c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
                   = MusiCompoNator.Composition.:<:
                       @ c
                       @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                       @ a
                       MusiCompoNator.Composition.$fMeasurablePhrase1
                       f2
                 } in
                 letrec {
                   go :: [a]
                         -> MusiCompoNator.Composition.Phrase
                              c (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch) a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       [] -> f3
                       : y ys
                       -> MusiCompoNator.Composition.:+:
                            @ c
                            @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                            @ a
                            (MusiCompoNator.Composition.:<:
                               @ c
                               @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                               @ a
                               MusiCompoNator.Composition.$fMeasurablePhrase1
                               (MusiCompoNator.Core.Measure
                                  @ a
                                  (GHC.Types.: @ a y (GHC.Types.[] @ a))))
                            (go ys) }
                 } in
                 \ (x :: [a]) -> go x) -}
9d5247246b1926496dca5bba8e7b1109
  $w$cmeasure1 ::
    GHC.Num.Num a =>
    [a]
    -> MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))>, Inline: [2],
     Unfolding: (\ @ c @ a (w :: GHC.Num.Num a) ->
                 let {
                   f :: a
                   = GHC.Num.fromInteger
                       @ a
                       w
                       MusiCompoNator.Composition.$fMeasurablePhrase2
                 } in
                 let {
                   f1 :: [a] = GHC.Types.: @ a f (GHC.Types.[] @ a)
                 } in
                 let {
                   f2 :: MusiCompoNator.Core.Rhythm a
                   = MusiCompoNator.Core.Measure @ a f1
                 } in
                 let {
                   f3 :: MusiCompoNator.Composition.Phrase
                           c MusiCompoNator.Composition.Prim a
                   = MusiCompoNator.Composition.:<:
                       @ c
                       @ MusiCompoNator.Composition.Prim
                       @ a
                       MusiCompoNator.Composition.silence
                       f2
                 } in
                 letrec {
                   go :: [a]
                         -> MusiCompoNator.Composition.Phrase
                              c MusiCompoNator.Composition.Prim a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [a]) ->
                     case ds of wild {
                       [] -> f3
                       : y ys
                       -> MusiCompoNator.Composition.:+:
                            @ c
                            @ MusiCompoNator.Composition.Prim
                            @ a
                            (MusiCompoNator.Composition.:<:
                               @ c
                               @ MusiCompoNator.Composition.Prim
                               @ a
                               MusiCompoNator.Composition.silence
                               (MusiCompoNator.Core.Measure
                                  @ a
                                  (GHC.Types.: @ a y (GHC.Types.[] @ a))))
                            (go ys) }
                 } in
                 \ (x :: [a]) -> go x) -}
9d5247246b1926496dca5bba8e7b1109
  $w$cshowsPrec ::
    (GHC.Show.Show c, GHC.Show.Show b, GHC.Show.Show p) =>
    GHC.Prim.Int#
    -> MusiCompoNator.Composition.Phrase c p b -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,U(A,A,C(C(U)))><L,U(A,C(U),C(C(U)))><L,U(A,A,C(C(U)))><S,U><S,1*U>,
     Inline: [2] -}
b5e1d15a32e92585bcdc157556e5091a
  $w$sliftL ::
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> MusiCompoNator.Composition.CPhrase p MusiCompoNator.Core.Beat
    -> (# MusiCompoNator.Core.Signature MusiCompoNator.Core.Beat,
          MusiCompoNator.Composition.Phrase
            MusiCompoNator.Composition.PhraseControl
            p
            MusiCompoNator.Core.Beat #)
  {- Arity: 2, Strictness: <L,1*C1(U)><L,1*U>, Inline: [2],
     Unfolding: (\ @ p
                   (w :: [GHC.Types.Int] -> [GHC.Types.Int])
                   (w1 :: MusiCompoNator.Composition.CPhrase
                            p MusiCompoNator.Core.Beat) ->
                 let {
                   ds :: ([[MusiCompoNator.Composition.PhraseControl]], [p],
                          [MusiCompoNator.Core.Beat])
                   = case MusiCompoNator.Composition.$w$sunPhrase
                            @ MusiCompoNator.Composition.PhraseControl
                            @ p
                            w1 of ww { (#,,#) ww1 ww2 ww3 ->
                     let {
                       lvl8 :: [GHC.Types.Int]
                       = w (case GHC.List.$wlenAcc
                                   @ [MusiCompoNator.Composition.PhraseControl]
                                   ww1
                                   0# of ww4 { DEFAULT ->
                            GHC.Enum.eftInt 1# ww4 })
                     } in
                     letrec {
                       go2 :: [([MusiCompoNator.Composition.PhraseControl], p,
                                MusiCompoNator.Core.Beat)]
                              -> [GHC.Types.Int]
                              -> ([[MusiCompoNator.Composition.PhraseControl]], [p],
                                  [MusiCompoNator.Core.Beat])
                         {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                       = \ (ds1 :: [([MusiCompoNator.Composition.PhraseControl], p,
                                     MusiCompoNator.Core.Beat)])
                           (_ys :: [GHC.Types.Int]) ->
                         case ds1 of wild {
                           [] -> MusiCompoNator.Composition.appLast3 @ p
                           : ipv ipv1
                           -> case _ys of wild1 {
                                [] -> MusiCompoNator.Composition.appLast3 @ p
                                : ipv2 ipv3
                                -> let {
                                     r :: ([[MusiCompoNator.Composition.PhraseControl]], [p],
                                           [MusiCompoNator.Core.Beat])
                                     = go2 ipv1 ipv3
                                   } in
                                   letrec {
                                     go :: [GHC.Types.Int]
                                           -> ([[MusiCompoNator.Composition.PhraseControl]], [p],
                                               [MusiCompoNator.Core.Beat])
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [GHC.Types.Int]) ->
                                       case ds2 of wild2 {
                                         [] -> r
                                         : y ys
                                         -> case ipv2 of wild3 { GHC.Types.I# x ->
                                            case y of wild4 { GHC.Types.I# y1 ->
                                            let {
                                              ds3 :: ([[MusiCompoNator.Composition.PhraseControl]],
                                                      [p], [MusiCompoNator.Core.Beat])
                                              = go ys
                                            } in
                                            case GHC.Prim.==# x y1 of lwild {
                                              DEFAULT -> ds3
                                              1#
                                              -> case ipv of wild5 { (,,) a1 b1 c1 ->
                                                 (GHC.Types.:
                                                    @ [MusiCompoNator.Composition.PhraseControl]
                                                    a1
                                                    (case ds3 of wild6 { (,,) as bs cs -> as }),
                                                  GHC.Types.:
                                                    @ p
                                                    b1
                                                    (case ds3 of wild6 { (,,) as bs cs -> bs }),
                                                  GHC.Types.:
                                                    @ MusiCompoNator.Core.Beat
                                                    c1
                                                    (case ds3 of wild6 { (,,) as bs cs ->
                                                     cs })) } } } } }
                                   } in
                                   go lvl8 } }
                     } in
                     go2
                       (GHC.List.zip3
                          @ [MusiCompoNator.Composition.PhraseControl]
                          @ p
                          @ MusiCompoNator.Core.Beat
                          ww1
                          ww2
                          (MusiCompoNator.Core.$w$cunmeasure
                             @ MusiCompoNator.Core.Beat
                             GHC.Real.$fFractionalRatio_$s$fNumRatio
                             ww3))
                       MusiCompoNator.Composition.appLast2 }
                 } in
                 MusiCompoNator.Composition.$w$sphrase
                   @ MusiCompoNator.Composition.PhraseControl
                   @ p
                   (case ds of wild { (,,) c' p' b' -> c' })
                   (case ds of wild { (,,) c' p' b' -> p' })
                   (MusiCompoNator.Core.Measure
                      @ MusiCompoNator.Core.Beat
                      (case ds of wild { (,,) c' p' b' -> b' }))) -}
040c600de2b6bb789c3aa256769124c7
  $w$sphrase ::
    [[c]]
    -> MusiCompoNator.Core.Sequence p
    -> MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
    -> (# MusiCompoNator.Core.Signature MusiCompoNator.Core.Beat,
          MusiCompoNator.Composition.Phrase c p MusiCompoNator.Core.Beat #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>, Inline: [2],
     Unfolding: (\ @ c
                   @ p
                   (ww :: [[c]])
                   (ww1 :: MusiCompoNator.Core.Sequence p)
                   (ww2 :: MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat) ->
                 (# MusiCompoNator.Composition.phrase3 ww2,
                    MusiCompoNator.Composition.phrase2
                      @ p
                      @ c
                      (GHC.Base.map
                         @ ([c], p, MusiCompoNator.Core.Beat)
                         @ (MusiCompoNator.Composition.Phrase c p MusiCompoNator.Core.Beat)
                         (MusiCompoNator.Composition.phrase1 @ c @ p)
                         (GHC.List.zip3
                            @ [c]
                            @ p
                            @ MusiCompoNator.Core.Beat
                            ww
                            ww1
                            (MusiCompoNator.Core.$w$cunmeasure
                               @ MusiCompoNator.Core.Beat
                               GHC.Real.$fFractionalRatio_$s$fNumRatio
                               ww2))) #)) -}
282b2107d6222a532953d3e5f273bd67
  $w$sunPhrase ::
    MusiCompoNator.Composition.Phrase c p MusiCompoNator.Core.Beat
    -> (# [[c]], MusiCompoNator.Core.Sequence p,
          MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
2ca4df307f3d00b2b823c4d75a64d7b4
  $wappLast ::
    MusiCompoNator.Composition.PhraseControl
    -> MusiCompoNator.Composition.Phrase1
    -> (# MusiCompoNator.Core.Signature MusiCompoNator.Core.Beat,
          MusiCompoNator.Composition.Phrase
            MusiCompoNator.Composition.PhraseControl
            MusiCompoNator.Composition.Prim
            MusiCompoNator.Core.Beat #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Composition.PhraseControl)
                   (w1 :: MusiCompoNator.Composition.Phrase1) ->
                 (# MusiCompoNator.Composition.phrase3
                      (case MusiCompoNator.Composition.$w$sunPhrase
                              @ MusiCompoNator.Composition.PhraseControl
                              @ MusiCompoNator.Composition.Prim
                              w1 of ww { (#,,#) ww1 ww2 ww3 ->
                       ww3 }),
                    MusiCompoNator.Composition.:+:
                      @ MusiCompoNator.Composition.PhraseControl
                      @ MusiCompoNator.Composition.Prim
                      @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                      (case MusiCompoNator.Composition.$w$sliftL
                              @ MusiCompoNator.Composition.Prim
                              (GHC.List.init @ GHC.Types.Int)
                              w1 of ww { (#,#) ww1 ww2 ->
                       MusiCompoNator.Composition.Sig
                         @ MusiCompoNator.Composition.PhraseControl
                         @ MusiCompoNator.Composition.Prim
                         @ MusiCompoNator.Core.Beat
                         ww1
                         ww2 })
                      (case MusiCompoNator.Composition.$w$sliftL
                              @ MusiCompoNator.Composition.Prim
                              MusiCompoNator.Composition.appLast1
                              w1 of ww { (#,#) ww1 ww2 ->
                       case MusiCompoNator.Composition.$w$sunPhrase
                              @ MusiCompoNator.Composition.PhraseControl
                              @ MusiCompoNator.Composition.Prim
                              (MusiCompoNator.Composition.Sig
                                 @ MusiCompoNator.Composition.PhraseControl
                                 @ MusiCompoNator.Composition.Prim
                                 @ MusiCompoNator.Core.Beat
                                 ww1
                                 ww2) of ww3 { (#,,#) ww4 ww5 ww6 ->
                       MusiCompoNator.Composition.Sig
                         @ MusiCompoNator.Composition.PhraseControl
                         @ MusiCompoNator.Composition.Prim
                         @ MusiCompoNator.Core.Beat
                         (MusiCompoNator.Composition.phrase3 ww6)
                         (MusiCompoNator.Composition.phrase2
                            @ MusiCompoNator.Composition.Prim
                            @ MusiCompoNator.Composition.PhraseControl
                            (GHC.Base.map
                               @ ([MusiCompoNator.Composition.PhraseControl],
                                  MusiCompoNator.Composition.Prim, MusiCompoNator.Core.Beat)
                               @ (MusiCompoNator.Composition.Phrase
                                    MusiCompoNator.Composition.PhraseControl
                                    MusiCompoNator.Composition.Prim
                                    MusiCompoNator.Core.Beat)
                               (MusiCompoNator.Composition.phrase1
                                  @ MusiCompoNator.Composition.PhraseControl
                                  @ MusiCompoNator.Composition.Prim)
                               (GHC.List.zip3
                                  @ [MusiCompoNator.Composition.PhraseControl]
                                  @ MusiCompoNator.Composition.Prim
                                  @ MusiCompoNator.Core.Beat
                                  (GHC.Base.map
                                     @ [MusiCompoNator.Composition.PhraseControl]
                                     @ [MusiCompoNator.Composition.PhraseControl]
                                     (GHC.Types.: @ MusiCompoNator.Composition.PhraseControl w)
                                     ww4)
                                  ww5
                                  (MusiCompoNator.Core.$w$cunmeasure
                                     @ MusiCompoNator.Core.Beat
                                     GHC.Real.$fFractionalRatio_$s$fNumRatio
                                     ww6)))) } }) #)) -}
247253f22001b621210d149775d41a87
  $wgo ::
    [MusiCompoNator.Core.Beat]
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [2] -}
83019084854a4741b79a3470946c4de3
  $wliftL ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> MusiCompoNator.Composition.CPhrase p b
    -> (# MusiCompoNator.Core.Signature b,
          MusiCompoNator.Composition.Phrase
            MusiCompoNator.Composition.PhraseControl p b #)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,1*C1(U)><L,1*U>,
     Inline: [2],
     Unfolding: (\ @ b
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: [GHC.Types.Int] -> [GHC.Types.Int])
                   (w3 :: MusiCompoNator.Composition.CPhrase p b) ->
                 let {
                   ds :: ([[MusiCompoNator.Composition.PhraseControl]], [p], [b])
                   = case MusiCompoNator.Composition.$wunPhrase
                            @ b
                            @ MusiCompoNator.Composition.PhraseControl
                            @ p
                            w
                            w1
                            w3 of ww { (#,,#) ww1 ww2 ww3 ->
                     let {
                       lvl8 :: [GHC.Types.Int]
                       = w2
                           (case GHC.List.$wlenAcc
                                   @ [MusiCompoNator.Composition.PhraseControl]
                                   ww1
                                   0# of ww4 { DEFAULT ->
                            GHC.Enum.eftInt 1# ww4 })
                     } in
                     letrec {
                       go2 :: [([MusiCompoNator.Composition.PhraseControl], p, b)]
                              -> [GHC.Types.Int]
                              -> ([[MusiCompoNator.Composition.PhraseControl]], [p], [b])
                         {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                       = \ (ds1 :: [([MusiCompoNator.Composition.PhraseControl], p, b)])
                           (_ys :: [GHC.Types.Int]) ->
                         case ds1 of wild {
                           [] -> MusiCompoNator.Composition.liftL1 @ p @ b
                           : ipv ipv1
                           -> case _ys of wild1 {
                                [] -> MusiCompoNator.Composition.liftL1 @ p @ b
                                : ipv2 ipv3
                                -> let {
                                     r :: ([[MusiCompoNator.Composition.PhraseControl]], [p], [b])
                                     = go2 ipv1 ipv3
                                   } in
                                   letrec {
                                     go :: [GHC.Types.Int]
                                           -> ([[MusiCompoNator.Composition.PhraseControl]], [p],
                                               [b])
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [GHC.Types.Int]) ->
                                       case ds2 of wild2 {
                                         [] -> r
                                         : y ys
                                         -> case ipv2 of wild3 { GHC.Types.I# x ->
                                            case y of wild4 { GHC.Types.I# y1 ->
                                            let {
                                              ds3 :: ([[MusiCompoNator.Composition.PhraseControl]],
                                                      [p], [b])
                                              = go ys
                                            } in
                                            case GHC.Prim.==# x y1 of lwild {
                                              DEFAULT -> ds3
                                              1#
                                              -> case ipv of wild5 { (,,) a1 b1 c1 ->
                                                 (GHC.Types.:
                                                    @ [MusiCompoNator.Composition.PhraseControl]
                                                    a1
                                                    (case ds3 of wild6 { (,,) as bs cs -> as }),
                                                  GHC.Types.:
                                                    @ p
                                                    b1
                                                    (case ds3 of wild6 { (,,) as bs cs -> bs }),
                                                  GHC.Types.:
                                                    @ b
                                                    c1
                                                    (case ds3 of wild6 { (,,) as bs cs ->
                                                     cs })) } } } } }
                                   } in
                                   go lvl8 } }
                     } in
                     go2
                       (GHC.List.zip3
                          @ [MusiCompoNator.Composition.PhraseControl]
                          @ p
                          @ b
                          ww1
                          ww2
                          (MusiCompoNator.Core.$w$cunmeasure @ b w ww3))
                       MusiCompoNator.Composition.appLast2 }
                 } in
                 MusiCompoNator.Composition.$wphrase
                   @ b
                   @ MusiCompoNator.Composition.PhraseControl
                   @ p
                   w
                   w1
                   (case ds of wild { (,,) c' p' b' -> c' })
                   (case ds of wild { (,,) c' p' b' -> p' })
                   (MusiCompoNator.Core.Measure
                      @ b
                      (case ds of wild { (,,) c' p' b' -> b' }))) -}
3f51b3536657bb8195897ba95c5845a8
  $wmoreV ::
    [MusiCompoNator.Composition.Phrase1]
    -> MusiCompoNator.Composition.VoiceState
    -> (# (), MusiCompoNator.Composition.VoiceState #)
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U(U,U),U)>, Inline: [2] -}
b0a0f4bdbb2ac8fcfe35b7e4f568ab1a
  $wphrase ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    [[c]]
    -> MusiCompoNator.Core.Sequence p
    -> MusiCompoNator.Core.Rhythm b
    -> (# MusiCompoNator.Core.Signature b,
          MusiCompoNator.Composition.Phrase c p b #)
  {- Arity: 5,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,1*U><L,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ @ b
                   @ c
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (ww :: [[c]])
                   (ww1 :: MusiCompoNator.Core.Sequence p)
                   (ww2 :: MusiCompoNator.Core.Rhythm b) ->
                 (# MusiCompoNator.Core.$fMeasurableRhythm_$csignature @ b w w1 ww2,
                    MusiCompoNator.Composition.phrase5
                      @ b
                      @ p
                      @ c
                      (GHC.Base.map
                         @ ([c], p, b)
                         @ (MusiCompoNator.Composition.Phrase c p b)
                         (MusiCompoNator.Composition.phrase4 @ c @ p @ b)
                         (GHC.List.zip3
                            @ [c]
                            @ p
                            @ b
                            ww
                            ww1
                            (MusiCompoNator.Core.$w$cunmeasure @ b w ww2))) #)) -}
ab3576fa2510c7a5d7017252b3c40149
  $wrunVoice ::
    MusiCompoNator.Composition.Voice a
    -> MusiCompoNator.Core.Scale
    -> (# a, [MusiCompoNator.Composition.Phrase2],
          MusiCompoNator.Core.Beat #)
  {- Arity: 2, Strictness: <L,1*C1(U(1*U,U(1*U,1*U,A)))><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: MusiCompoNator.Composition.Voice a)
                   (w1 :: MusiCompoNator.Core.Scale) ->
                 let {
                   ds :: Data.Functor.Identity.Identity
                           (a, MusiCompoNator.Composition.VoiceState)
                   = w `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <MusiCompoNator.Composition.VoiceState>_N
                          <Data.Functor.Identity.Identity>_R
                          <a>_N)
                       (MusiCompoNator.Composition.VS
                          (GHC.Types.[] @ MusiCompoNator.Composition.Phrase1)
                          MusiCompoNator.Composition.emptyVS1
                          w1)
                 } in
                 (# case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a,
                                MusiCompoNator.Composition.VoiceState)>_R) of wild { (,) a1 vs ->
                    a1 },
                    case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a,
                                MusiCompoNator.Composition.VoiceState)>_R) of wild { (,) a1 vs ->
                    case vs of wild1 { MusiCompoNator.Composition.VS ds1 ds2 ds3 ->
                    GHC.Base.map
                      @ (MusiCompoNator.Composition.Phrase
                           MusiCompoNator.Composition.PhraseControl
                           MusiCompoNator.Composition.Prim
                           MusiCompoNator.Core.Beat)
                      @ (MusiCompoNator.Composition.Phrase
                           MusiCompoNator.Composition.PhraseControl
                           (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                           MusiCompoNator.Core.Beat)
                      (\ (x :: MusiCompoNator.Composition.Phrase
                                 MusiCompoNator.Composition.PhraseControl
                                 MusiCompoNator.Composition.Prim
                                 MusiCompoNator.Core.Beat) ->
                       case MusiCompoNator.Composition.$w$sunPhrase
                              @ MusiCompoNator.Composition.PhraseControl
                              @ MusiCompoNator.Composition.Prim
                              x of ww { (#,,#) ww1 ww2 ww3 ->
                       MusiCompoNator.Composition.Sig
                         @ MusiCompoNator.Composition.PhraseControl
                         @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                         @ MusiCompoNator.Core.Beat
                         (MusiCompoNator.Composition.phrase3 ww3)
                         (MusiCompoNator.Composition.phrase2
                            @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                            @ MusiCompoNator.Composition.PhraseControl
                            (GHC.Base.map
                               @ ([MusiCompoNator.Composition.PhraseControl],
                                  MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch,
                                  MusiCompoNator.Core.Beat)
                               @ (MusiCompoNator.Composition.Phrase
                                    MusiCompoNator.Composition.PhraseControl
                                    (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                                    MusiCompoNator.Core.Beat)
                               (MusiCompoNator.Composition.phrase1
                                  @ MusiCompoNator.Composition.PhraseControl
                                  @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch))
                               (GHC.List.zip3
                                  @ [MusiCompoNator.Composition.PhraseControl]
                                  @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                                  @ MusiCompoNator.Core.Beat
                                  ww1
                                  (letrec {
                                     go :: [MusiCompoNator.Composition.Prim]
                                           -> [MusiCompoNator.Core.Simultanity
                                                 MusiCompoNator.Core.Pitch]
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds4 :: [MusiCompoNator.Composition.Prim]) ->
                                       case ds4 of wild2 {
                                         []
                                         -> GHC.Types.[]
                                              @ (MusiCompoNator.Core.Simultanity
                                                   MusiCompoNator.Core.Pitch)
                                         : y ys
                                         -> GHC.Types.:
                                              @ (MusiCompoNator.Core.Simultanity
                                                   MusiCompoNator.Core.Pitch)
                                              (MusiCompoNator.Composition.derive_f w1 y)
                                              (go ys) }
                                   } in
                                   go ww2)
                                  (MusiCompoNator.Core.$w$cunmeasure
                                     @ MusiCompoNator.Core.Beat
                                     GHC.Real.$fFractionalRatio_$s$fNumRatio
                                     ww3)))) })
                      ds1 } },
                    case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a,
                                MusiCompoNator.Composition.VoiceState)>_R) of wild { (,) a1 vs ->
                    case vs of wild1 { MusiCompoNator.Composition.VS ds1 ds2 ds3 ->
                    ds2 } } #)) -}
99e0df7b4fb3881d039a3138613219ca
  $wsingleV ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.VoiceState
    -> (# (), MusiCompoNator.Composition.VoiceState #)
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U(U,U),U)>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Composition.Phrase1)
                   (w1 :: MusiCompoNator.Composition.VoiceState) ->
                 (# GHC.Tuple.(),
                    case w1 of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                    MusiCompoNator.Composition.VS
                      (GHC.Types.:
                         @ (MusiCompoNator.Composition.Phrase
                              MusiCompoNator.Composition.PhraseControl
                              MusiCompoNator.Composition.Prim
                              MusiCompoNator.Core.Beat)
                         (MusiCompoNator.Composition.:+:
                            @ MusiCompoNator.Composition.PhraseControl
                            @ MusiCompoNator.Composition.Prim
                            @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                            (MusiCompoNator.Composition.:<:
                               @ MusiCompoNator.Composition.PhraseControl
                               @ MusiCompoNator.Composition.Prim
                               @ MusiCompoNator.Core.Beat
                               MusiCompoNator.Composition.silence
                               (MusiCompoNator.Core.Measure
                                  @ MusiCompoNator.Core.Beat
                                  (GHC.Types.:
                                     @ MusiCompoNator.Core.Beat
                                     ds1
                                     (GHC.Types.[] @ MusiCompoNator.Core.Beat))))
                            (case MusiCompoNator.Composition.$w$sunPhrase
                                    @ MusiCompoNator.Composition.PhraseControl
                                    @ MusiCompoNator.Composition.Prim
                                    w of ww { (#,,#) ww1 ww2 ww3 ->
                             MusiCompoNator.Composition.Sig
                               @ MusiCompoNator.Composition.PhraseControl
                               @ MusiCompoNator.Composition.Prim
                               @ MusiCompoNator.Core.Beat
                               (MusiCompoNator.Composition.phrase3 ww3)
                               (MusiCompoNator.Composition.phrase2
                                  @ MusiCompoNator.Composition.Prim
                                  @ MusiCompoNator.Composition.PhraseControl
                                  (GHC.Base.map
                                     @ ([MusiCompoNator.Composition.PhraseControl],
                                        MusiCompoNator.Composition.Prim, MusiCompoNator.Core.Beat)
                                     @ (MusiCompoNator.Composition.Phrase
                                          MusiCompoNator.Composition.PhraseControl
                                          MusiCompoNator.Composition.Prim
                                          MusiCompoNator.Core.Beat)
                                     (MusiCompoNator.Composition.phrase1
                                        @ MusiCompoNator.Composition.PhraseControl
                                        @ MusiCompoNator.Composition.Prim)
                                     (GHC.List.zip3
                                        @ [MusiCompoNator.Composition.PhraseControl]
                                        @ MusiCompoNator.Composition.Prim
                                        @ MusiCompoNator.Core.Beat
                                        ww1
                                        (GHC.Base.map
                                           @ MusiCompoNator.Composition.Prim
                                           @ MusiCompoNator.Composition.Prim
                                           (MusiCompoNator.Composition.Mode
                                              (\ (ds3 :: MusiCompoNator.Core.Scale) -> ds2))
                                           ww2)
                                        (MusiCompoNator.Core.$w$cunmeasure
                                           @ MusiCompoNator.Core.Beat
                                           GHC.Real.$fFractionalRatio_$s$fNumRatio
                                           ww3)))) }))
                         ds)
                      (case ds1 of ww { GHC.Real.:% ww1 ww2 ->
                       case MusiCompoNator.Composition.$w$sunPhrase
                              @ MusiCompoNator.Composition.PhraseControl
                              @ MusiCompoNator.Composition.Prim
                              w of ww4 { (#,,#) ww5 ww6 ww7 ->
                       case MusiCompoNator.Composition.$wgo
                              (MusiCompoNator.Core.$w$cunmeasure
                                 @ MusiCompoNator.Core.Beat
                                 GHC.Real.$fFractionalRatio_$s$fNumRatio
                                 ww7)
                              MusiCompoNator.Core.$fMeasurableRhythm2
                              GHC.Real.$fEnumRatio1 of ww8 { (#,#) ww9 ww10 ->
                       case GHC.Real.$w$s$c+ ww1 ww2 ww9 ww10 of ww11 { (#,#) ww12 ww13 ->
                       GHC.Real.:% @ GHC.Integer.Type.Integer ww12 ww13 } } } })
                      ds2 } #)) -}
6af1fd24128388c335b9d1a7a18ee121
  $wstaccato ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.Composition.Phrase1
    -> (# MusiCompoNator.Core.Signature MusiCompoNator.Core.Beat,
          MusiCompoNator.Composition.Phrase
            MusiCompoNator.Composition.PhraseControl
            MusiCompoNator.Composition.Prim
            MusiCompoNator.Core.Beat #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [2],
     Unfolding: (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: MusiCompoNator.Composition.Phrase1) ->
                 case MusiCompoNator.Composition.$w$sunPhrase
                        @ MusiCompoNator.Composition.PhraseControl
                        @ MusiCompoNator.Composition.Prim
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.Composition.$w$sphrase
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   (GHC.Base.map
                      @ [MusiCompoNator.Composition.PhraseControl]
                      @ [MusiCompoNator.Composition.PhraseControl]
                      (GHC.Types.:
                         @ MusiCompoNator.Composition.PhraseControl
                         (MusiCompoNator.Composition.Staccato w))
                      ww1)
                   ww2
                   ww3 }) -}
9d5247246b1926496dca5bba8e7b1109
  $wunPhrase ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    MusiCompoNator.Composition.Phrase c p b
    -> (# [[c]], MusiCompoNator.Core.Sequence p,
          MusiCompoNator.Core.Rhythm b #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Inline: [2] -}
f4e2a118571053a7c1fe6876e83a5c8b
  $wvolume ::
    GHC.Real.Rational
    -> MusiCompoNator.Composition.Phrase1
    -> (# MusiCompoNator.Core.Signature MusiCompoNator.Core.Beat,
          MusiCompoNator.Composition.Phrase
            MusiCompoNator.Composition.PhraseControl
            MusiCompoNator.Composition.Prim
            MusiCompoNator.Core.Beat #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Real.Rational)
                   (w1 :: MusiCompoNator.Composition.Phrase1) ->
                 case MusiCompoNator.Composition.$w$sunPhrase
                        @ MusiCompoNator.Composition.PhraseControl
                        @ MusiCompoNator.Composition.Prim
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.Composition.$w$sphrase
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   (GHC.Base.map
                      @ [MusiCompoNator.Composition.PhraseControl]
                      @ [MusiCompoNator.Composition.PhraseControl]
                      (GHC.Types.:
                         @ MusiCompoNator.Composition.PhraseControl
                         (MusiCompoNator.Composition.Volume w))
                      ww1)
                   ww2
                   ww3 }) -}
0b25476e481aca083029e48cb133d63e
  type CPhrase p b =
    MusiCompoNator.Composition.Phrase
      MusiCompoNator.Composition.PhraseControl p b
b1d66be8f4a437ffd192934f04370c77
  class ControlPitchBeatTrifunctor (f :: * -> * -> * -> *) where
    lift3 :: (GHC.Num.Num b, GHC.Classes.Ord b, GHC.Num.Num b',
              GHC.Classes.Ord b') =>
             ([c] -> [c'])
             -> (MusiCompoNator.Core.Sequence p
                 -> MusiCompoNator.Core.Sequence p')
             -> (MusiCompoNator.Core.Rhythm b -> MusiCompoNator.Core.Rhythm b')
             -> f c p b
             -> f c' p' b'
    liftC :: (GHC.Num.Num b, GHC.Classes.Ord b) =>
             ([c] -> [c']) -> f c p b -> f c' p b
    liftH :: (GHC.Num.Num b, GHC.Classes.Ord b) =>
             (MusiCompoNator.Core.Sequence p -> MusiCompoNator.Core.Sequence p')
             -> f c p b -> f c p' b
    liftR :: (GHC.Num.Num b, GHC.Classes.Ord b, GHC.Num.Num b',
              GHC.Classes.Ord b') =>
             (MusiCompoNator.Core.Rhythm b -> MusiCompoNator.Core.Rhythm b')
             -> f c p b -> f c p b'
    {-# MINIMAL lift3 #-}
9d5247246b1926496dca5bba8e7b1109
  data Phrase c p b
    = Ctrl [c] (MusiCompoNator.Composition.Phrase c p b)
    | Sig (MusiCompoNator.Core.Signature b)
          (MusiCompoNator.Composition.Phrase c p b)
    | (MusiCompoNator.Composition.Phrase c p b)
      :+:
      (MusiCompoNator.Composition.Phrase c p b)
    | (MusiCompoNator.Core.Sequence p)
      :<:
      (MusiCompoNator.Core.Rhythm b)
80fb9f1e285a1ec56653e596d2e3ef11
  type Phrase1 =
    MusiCompoNator.Composition.CPhrase
      MusiCompoNator.Composition.Prim MusiCompoNator.Core.Beat
5d6f7b050b9b855adf3d14983463b005
  type Phrase2 =
    MusiCompoNator.Composition.CPhrase
      (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
      MusiCompoNator.Core.Beat
cb4d9de434048b8a17a5eae94374cec7
  data PhraseControl
    = BendNext
    | TieNext
    | Volume GHC.Real.Rational
    | Legato
    | Staccato MusiCompoNator.Core.Beat
1c225f982b4a8477b41d11d4b7d295c3
  data Prim
    = Voicing [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]
    | Mode (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale)
           MusiCompoNator.Composition.Prim
2e25dcaa65d0bf72796a58d31a68fca6
  type Voice =
    Control.Monad.Trans.State.Lazy.State
      MusiCompoNator.Composition.VoiceState
    :: * -> *
2e25dcaa65d0bf72796a58d31a68fca6
  data VoiceState
    = VS {phrases :: [MusiCompoNator.Composition.Phrase1],
          cursor :: MusiCompoNator.Core.Beat,
          scale :: MusiCompoNator.Core.Scale}
1fcf42ad54db826e10e2d6fb6f52c7ed
  absPitch ::
    GHC.Real.Rational
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (q :: GHC.Real.Rational) ->
                 GHC.Types.:
                   @ MusiCompoNator.Composition.Prim
                   (MusiCompoNator.Composition.Voicing
                      (GHC.Types.:
                         @ (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch)
                         (\ (ds :: MusiCompoNator.Core.Scale) -> q)
                         (GHC.Types.[]
                            @ (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch))))
                   (GHC.Types.[] @ MusiCompoNator.Composition.Prim)) -}
7c4f5d61c771fde181b4a26754740d97
  appLast ::
    MusiCompoNator.Composition.PhraseControl
    -> MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
  {- Arity: 2, Strictness: <L,U><L,U>m2, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MusiCompoNator.Composition.PhraseControl)
                   (w1 :: MusiCompoNator.Composition.Phrase1) ->
                 case MusiCompoNator.Composition.$wappLast
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Core.Beat
                   ww1
                   ww2 }) -}
f1e5ff85a07a97ad5b83b95c9f2c170f
  appLast1 :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [GHC.Types.Int]) ->
                 GHC.Types.:
                   @ GHC.Types.Int
                   (GHC.List.last @ GHC.Types.Int x)
                   (GHC.Types.[] @ GHC.Types.Int)) -}
d44b73264de2c5d67839468adf4b5a23
  appLast2 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 1# 9223372036854775807#) -}
9809a3cfa0cd44a79c1e1945ff41c282
  appLast3 ::
    ([[MusiCompoNator.Composition.PhraseControl]], [p],
     [MusiCompoNator.Core.Beat])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ p ->
                 (GHC.Types.[] @ [MusiCompoNator.Composition.PhraseControl],
                  GHC.Types.[] @ p, GHC.Types.[] @ MusiCompoNator.Core.Beat)) -}
b141fa7a763c6407b8244c656a7f6383
  applyMode ::
    (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale)
    -> MusiCompoNator.Composition.Voice ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.applyMode1
                  `cast`
                (<MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale>_R
                 ->_R (<MusiCompoNator.Composition.VoiceState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((),
                                       MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <MusiCompoNator.Composition.VoiceState>_N
                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                              <()>_N)) -}
a7f3df3bde6f1284ed983b6f03947bc4
  applyMode1 ::
    (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale)
    -> MusiCompoNator.Composition.VoiceState
    -> ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,1*U(U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (f :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale)
                   (s1 :: MusiCompoNator.Composition.VoiceState) ->
                 (GHC.Tuple.(),
                  case s1 of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  MusiCompoNator.Composition.VS ds ds1 (f ds2) })) -}
ef9b0b6829ddea557db57611fde176ce
  arpeggio ::
    GHC.Types.Int
    -> [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 2, Strictness: <L,U(U)><S,1*U>,
     Unfolding: (\ (i :: GHC.Types.Int)
                   (fs :: [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]) ->
                 GHC.Base.map
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Composition.Prim
                   (MusiCompoNator.Composition.Mode (MusiCompoNator.Core.step i))
                   (MusiCompoNator.Composition.line fs)) -}
34803002535028a6f8ceb9139848fc06
  bendInto ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
  {- Arity: 2, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (2, True, False)
                (\ (ph1 :: MusiCompoNator.Composition.Phrase1)
                   (ph2 :: MusiCompoNator.Composition.Phrase1) ->
                 MusiCompoNator.Composition.:+:
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                   (MusiCompoNator.Composition.appLast
                      MusiCompoNator.Composition.BendNext
                      ph1)
                   ph2) -}
c09453c28f307bbd95f7145dbfc225e1
  chord ::
    GHC.Types.Int
    -> [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 2, Strictness: <L,U(U)><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int)
                   (eta :: [MusiCompoNator.Core.Scale
                            -> MusiCompoNator.Core.Pitch]) ->
                 GHC.Types.:
                   @ MusiCompoNator.Composition.Prim
                   (MusiCompoNator.Composition.Mode
                      (MusiCompoNator.Core.step x)
                      (MusiCompoNator.Composition.Voicing eta))
                   (GHC.Types.[] @ MusiCompoNator.Composition.Prim)) -}
2e25dcaa65d0bf72796a58d31a68fca6
  cursor ::
    MusiCompoNator.Composition.VoiceState -> MusiCompoNator.Core.Beat
  RecSel Left MusiCompoNator.Composition.VoiceState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.Composition.VoiceState) ->
                 case ds of wild { MusiCompoNator.Composition.VS ds1 ds2 ds3 ->
                 ds2 }) -}
314b63712e77ca01f54f145841126ac8
  derive ::
    MusiCompoNator.Core.Scale
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
    -> MusiCompoNator.Core.Sequence
         (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (s :: MusiCompoNator.Core.Scale)
                   (eta :: [MusiCompoNator.Composition.Prim]) ->
                 GHC.Base.build
                   @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                   (\ @ b1
                      (c :: MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch
                            -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ MusiCompoNator.Composition.Prim
                      @ b1
                      (GHC.Base.mapFB
                         @ (MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch)
                         @ b1
                         @ MusiCompoNator.Composition.Prim
                         c
                         (MusiCompoNator.Composition.derive_f s))
                      n
                      eta)) -}
bf35cb4c39cbd0f60bd27735f96dd11d
  derive_f ::
    MusiCompoNator.Core.Scale
    -> MusiCompoNator.Composition.Prim
    -> MusiCompoNator.Core.Simultanity MusiCompoNator.Core.Pitch
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
ce9f1cbadb94111437c1cedd9faa94e1
  emptyVS ::
    MusiCompoNator.Core.Scale -> MusiCompoNator.Composition.VoiceState
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: MusiCompoNator.Core.Scale) ->
                 MusiCompoNator.Composition.VS
                   (GHC.Types.[] @ MusiCompoNator.Composition.Phrase1)
                   MusiCompoNator.Composition.emptyVS1
                   s) -}
45199e358772bdb0340341e12879da2a
  emptyVS1 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   MusiCompoNator.Composition.$fMeasurablePhrase2
                   GHC.Real.$fEnumRatio1) -}
53a0d627f83141b954ff1bda8541a840
  getPhrases ::
    MusiCompoNator.Composition.Voice
      [MusiCompoNator.Composition.Phrase1]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.getPhrases1
                  `cast`
                ((<MusiCompoNator.Composition.VoiceState>_R
                  ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                <([MusiCompoNator.Composition.Phrase1],
                                  MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <MusiCompoNator.Composition.VoiceState>_N
                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                         <[MusiCompoNator.Composition.Phrase1]>_N)) -}
ac1efb1cf157aaf9aa6493b6b17ddcb2
  getPhrases1 ::
    MusiCompoNator.Composition.VoiceState
    -> ([MusiCompoNator.Composition.Phrase1],
        MusiCompoNator.Composition.VoiceState)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: MusiCompoNator.Composition.VoiceState) ->
                 (case s1 of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  ds },
                  s1)) -}
97dfe6fd5e6877319ee0910377905721
  getScale ::
    MusiCompoNator.Composition.Voice MusiCompoNator.Core.Scale
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.getScale1
                  `cast`
                ((<MusiCompoNator.Composition.VoiceState>_R
                  ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                <(MusiCompoNator.Core.Scale,
                                  MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <MusiCompoNator.Composition.VoiceState>_N
                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                         <MusiCompoNator.Core.Scale>_N)) -}
d583b442978571c7c1e775065046f983
  getScale1 ::
    MusiCompoNator.Composition.VoiceState
    -> (MusiCompoNator.Core.Scale,
        MusiCompoNator.Composition.VoiceState)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: MusiCompoNator.Composition.VoiceState) ->
                 (case s1 of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  ds2 },
                  s1)) -}
e26a75908529b95255e330b73f493c43
  getTime ::
    MusiCompoNator.Composition.Voice MusiCompoNator.Core.Beat
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.getTime1
                  `cast`
                ((<MusiCompoNator.Composition.VoiceState>_R
                  ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                <(MusiCompoNator.Core.Beat,
                                  MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <MusiCompoNator.Composition.VoiceState>_N
                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                         <MusiCompoNator.Core.Beat>_N)) -}
23beaef05e1e143e7c8d093aec1a0511
  getTime1 ::
    MusiCompoNator.Composition.VoiceState
    -> (MusiCompoNator.Core.Beat,
        MusiCompoNator.Composition.VoiceState)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: MusiCompoNator.Composition.VoiceState) ->
                 (case s1 of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  ds1 },
                  s1)) -}
e7ba60def026ca8253eeec2d8acbfb88
  inKey ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Core.Scale -> MusiCompoNator.Composition.Voice ()
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U,U(U,U),1*U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.inKey1
                  `cast`
                (<MusiCompoNator.Composition.Phrase1>_R
                 ->_R <MusiCompoNator.Core.Scale>_R
                 ->_R (<MusiCompoNator.Composition.VoiceState>_R
                       ->_R Nth:3
                                (<MusiCompoNator.Composition.VoiceState>_R
                                 ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                               <((),
                                                 MusiCompoNator.Composition.VoiceState)>_R))) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                                         <MusiCompoNator.Composition.VoiceState>_N
                                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                                         <()>_N)) -}
f2da7284eb8ed7b334ce3b903a5244a3
  inKey1 ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Core.Scale
    -> MusiCompoNator.Composition.VoiceState
    -> ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U,U(U,U),1*U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (ph :: MusiCompoNator.Composition.Phrase1)
                   (s :: MusiCompoNator.Core.Scale)
                   (s1 :: MusiCompoNator.Composition.VoiceState) ->
                 (GHC.Tuple.(),
                  case MusiCompoNator.Composition.inKey2
                         ph
                         (case s1 of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                          MusiCompoNator.Composition.VS ds ds1 s }) of wild { (,) a1 s' ->
                  case s' of wild1 { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  MusiCompoNator.Composition.VS
                    ds
                    ds1
                    (case s1 of wild2 { MusiCompoNator.Composition.VS ds3 ds4 ds5 ->
                     ds5 }) } })) -}
5f9c9fc9485e3701c958dca5d3e21cd2
  inKey2 ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.VoiceState
    -> ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U(U,U),U)>m, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MusiCompoNator.Composition.Phrase1)
                   (w1 :: MusiCompoNator.Composition.VoiceState) ->
                 case MusiCompoNator.Composition.$wsingleV
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
3c9e1a52853fd7b7022b744e47f7d5cf
  legato ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
  {- Arity: 1, Strictness: <S,1*U>m2,
     Unfolding: (\ (x :: MusiCompoNator.Composition.Phrase
                           MusiCompoNator.Composition.PhraseControl
                           MusiCompoNator.Composition.Prim
                           MusiCompoNator.Core.Beat) ->
                 case MusiCompoNator.Composition.$w$sunPhrase
                        @ MusiCompoNator.Composition.PhraseControl
                        @ MusiCompoNator.Composition.Prim
                        x of ww { (#,,#) ww1 ww2 ww3 ->
                 MusiCompoNator.Composition.Sig
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Core.Beat
                   (MusiCompoNator.Composition.phrase3 ww3)
                   (MusiCompoNator.Composition.phrase2
                      @ MusiCompoNator.Composition.Prim
                      @ MusiCompoNator.Composition.PhraseControl
                      (GHC.Base.map
                         @ ([MusiCompoNator.Composition.PhraseControl],
                            MusiCompoNator.Composition.Prim, MusiCompoNator.Core.Beat)
                         @ (MusiCompoNator.Composition.Phrase
                              MusiCompoNator.Composition.PhraseControl
                              MusiCompoNator.Composition.Prim
                              MusiCompoNator.Core.Beat)
                         (MusiCompoNator.Composition.phrase1
                            @ MusiCompoNator.Composition.PhraseControl
                            @ MusiCompoNator.Composition.Prim)
                         (GHC.List.zip3
                            @ [MusiCompoNator.Composition.PhraseControl]
                            @ MusiCompoNator.Composition.Prim
                            @ MusiCompoNator.Core.Beat
                            (MusiCompoNator.Composition.legato_go ww1)
                            ww2
                            (MusiCompoNator.Core.$w$cunmeasure
                               @ MusiCompoNator.Core.Beat
                               GHC.Real.$fFractionalRatio_$s$fNumRatio
                               ww3)))) }) -}
0296a1c573255968d8dbe68d960932ff
  legato_go ::
    [[MusiCompoNator.Composition.PhraseControl]]
    -> [[MusiCompoNator.Composition.PhraseControl]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
8d3ae531f6e8343b688a7d63dade5dee
  liftL ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    ([GHC.Types.Int] -> [GHC.Types.Int])
    -> MusiCompoNator.Composition.CPhrase p b
    -> MusiCompoNator.Composition.CPhrase p b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,C(U))><L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,1*C1(U)><L,1*U>m2,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: [GHC.Types.Int] -> [GHC.Types.Int])
                   (w3 :: MusiCompoNator.Composition.CPhrase p b) ->
                 case MusiCompoNator.Composition.$wliftL
                        @ b
                        @ p
                        w
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig
                   @ MusiCompoNator.Composition.PhraseControl
                   @ p
                   @ b
                   ww1
                   ww2 }) -}
b3bfbbc568c66cea0bbbceaa951513cc
  liftL1 :: ([[MusiCompoNator.Composition.PhraseControl]], [p], [b])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ p @ b ->
                 (GHC.Types.[] @ [MusiCompoNator.Composition.PhraseControl],
                  GHC.Types.[] @ p, GHC.Types.[] @ b)) -}
57ec3fd7bdd74637522bb1e9fac616c4
  line ::
    [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c9fd5a2034dde601691681d5d5f819db
  mode ::
    (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale)
    -> [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (f :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Scale)
                   (fs :: [MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch]) ->
                 GHC.Types.:
                   @ MusiCompoNator.Composition.Prim
                   (MusiCompoNator.Composition.Mode
                      f
                      (MusiCompoNator.Composition.Voicing fs))
                   (GHC.Types.[] @ MusiCompoNator.Composition.Prim)) -}
bdae5d1ef472bb84382ac46e052676af
  moreV ::
    [MusiCompoNator.Composition.Phrase1]
    -> MusiCompoNator.Composition.Voice ()
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U(U,U),U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.moreV1
                  `cast`
                (<[MusiCompoNator.Composition.Phrase1]>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <MusiCompoNator.Composition.VoiceState>_N
                               <Data.Functor.Identity.Identity>_R
                               <()>_N)) -}
6140502624ee6a0a00211b378a0dc4eb
  moreV1 ::
    [MusiCompoNator.Composition.Phrase1]
    -> MusiCompoNator.Composition.VoiceState
    -> Data.Functor.Identity.Identity
         ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U(U,U),U)>m, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [MusiCompoNator.Composition.Phrase1])
                   (w1 :: MusiCompoNator.Composition.VoiceState) ->
                 case MusiCompoNator.Composition.$wmoreV
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((), MusiCompoNator.Composition.VoiceState)>_R)) }) -}
d20869f9fca194804f05d901ccd8b7ff
  note ::
    (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch)
    -> MusiCompoNator.Core.Beat
    -> MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim MusiCompoNator.Core.Beat
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m4,
     Unfolding: InlineRule (2, True, False)
                (\ @ c
                   (f :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch)
                   (b :: MusiCompoNator.Core.Beat) ->
                 MusiCompoNator.Composition.:<:
                   @ c
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Core.Beat
                   (MusiCompoNator.Composition.pitch f)
                   (MusiCompoNator.Core.Measure
                      @ MusiCompoNator.Core.Beat
                      (GHC.Types.:
                         @ MusiCompoNator.Core.Beat
                         b
                         (GHC.Types.[] @ MusiCompoNator.Core.Beat)))) -}
8ec52197230449fd383b44a01fd6b07a
  phrase ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    ([[c]], MusiCompoNator.Core.Sequence p,
     MusiCompoNator.Core.Rhythm b)
    -> MusiCompoNator.Composition.Phrase c p b
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><S,1*U(1*U,1*U,U)>m2,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ c
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: ([[c]], MusiCompoNator.Core.Sequence p,
                           MusiCompoNator.Core.Rhythm b)) ->
                 case w2 of ww { (,,) ww1 ww2 ww3 ->
                 MusiCompoNator.Composition.Sig
                   @ c
                   @ p
                   @ b
                   (MusiCompoNator.Core.$fMeasurableRhythm_$csignature @ b w w1 ww3)
                   (MusiCompoNator.Composition.phrase5
                      @ b
                      @ p
                      @ c
                      (GHC.Base.build
                         @ (MusiCompoNator.Composition.Phrase c p b)
                         (\ @ b1
                            (c1 :: MusiCompoNator.Composition.Phrase c p b
                                   -> b1 -> b1)[OneShot]
                            (n :: b1)[OneShot] ->
                          GHC.Base.foldr
                            @ ([c], p, b)
                            @ b1
                            (GHC.Base.mapFB
                               @ (MusiCompoNator.Composition.Phrase c p b)
                               @ b1
                               @ ([c], p, b)
                               c1
                               (MusiCompoNator.Composition.phrase4 @ c @ p @ b))
                            n
                            (GHC.List.zip3
                               @ [c]
                               @ p
                               @ b
                               ww1
                               ww2
                               (MusiCompoNator.Core.$w$cunmeasure @ b w ww3))))) }) -}
7b1386c9344f67529e368c18cc29bb6f
  phrase1 ::
    ([c], p, MusiCompoNator.Core.Beat)
    -> MusiCompoNator.Composition.Phrase c p MusiCompoNator.Core.Beat
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ @ c @ p (ds :: ([c], p, MusiCompoNator.Core.Beat)) ->
                 case ds of wild { (,,) c1 p1 b ->
                 MusiCompoNator.Composition.Ctrl
                   @ c
                   @ p
                   @ MusiCompoNator.Core.Beat
                   c1
                   (MusiCompoNator.Composition.:<:
                      @ c
                      @ p
                      @ MusiCompoNator.Core.Beat
                      (GHC.Base.$fApplicative[]_$cpure @ p p1)
                      (MusiCompoNator.Core.Measure
                         @ MusiCompoNator.Core.Beat
                         (GHC.Types.:
                            @ MusiCompoNator.Core.Beat
                            b
                            (GHC.Types.[] @ MusiCompoNator.Core.Beat)))) }) -}
b46c89881cef6f4f78857710f1615895
  phrase2 ::
    [MusiCompoNator.Composition.Phrase c p MusiCompoNator.Core.Beat]
    -> MusiCompoNator.Composition.Phrase c p MusiCompoNator.Core.Beat
  {- Arity: 1, Strictness: <S,1*U> -}
2bf9766d2462bcaa1d14a5599add20e6
  phrase3 ::
    MusiCompoNator.Core.Rhythm MusiCompoNator.Core.Beat
    -> MusiCompoNator.Core.Signature MusiCompoNator.Core.Beat
  {- Unfolding: (MusiCompoNator.Core.$fMeasurableRhythm_$csignature
                   @ MusiCompoNator.Core.Beat
                   GHC.Real.$fFractionalRatio_$s$fNumRatio
                   GHC.Real.$fOrdRatio_$s$fOrdRatio) -}
011dca07b0825b133c019e77283abcf8
  phrase4 :: ([c], p, b) -> MusiCompoNator.Composition.Phrase c p b
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ @ c @ p @ b (ds :: ([c], p, b)) ->
                 case ds of wild { (,,) c1 p1 b1 ->
                 MusiCompoNator.Composition.Ctrl
                   @ c
                   @ p
                   @ b
                   c1
                   (MusiCompoNator.Composition.:<:
                      @ c
                      @ p
                      @ b
                      (GHC.Base.$fApplicative[]_$cpure @ p p1)
                      (MusiCompoNator.Core.Measure
                         @ b
                         (GHC.Types.: @ b b1 (GHC.Types.[] @ b)))) }) -}
d2daa6a33fedbb8d32a145e65eb5ee74
  phrase5 ::
    [MusiCompoNator.Composition.Phrase c p b]
    -> MusiCompoNator.Composition.Phrase c p b
  {- Arity: 1, Strictness: <S,1*U> -}
2e25dcaa65d0bf72796a58d31a68fca6
  phrases ::
    MusiCompoNator.Composition.VoiceState
    -> [MusiCompoNator.Composition.Phrase1]
  RecSel Left MusiCompoNator.Composition.VoiceState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.Composition.VoiceState) ->
                 case ds of wild { MusiCompoNator.Composition.VS ds1 ds2 ds3 ->
                 ds1 }) -}
451fb44e1ff90f6e9f8c0aaba7c05a60
  pitch ::
    (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch)
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (i :: MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch) ->
                 GHC.Types.:
                   @ MusiCompoNator.Composition.Prim
                   (MusiCompoNator.Composition.Voicing
                      (GHC.Base.$fApplicative[]_$cpure
                         @ (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch)
                         i))
                   (GHC.Types.[] @ MusiCompoNator.Composition.Prim)) -}
aa964fcdb7ee7e408a28f129bfd5bb75
  putPhrases ::
    [MusiCompoNator.Composition.Phrase1]
    -> MusiCompoNator.Composition.Voice ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(A,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.putPhrases1
                  `cast`
                (<[MusiCompoNator.Composition.Phrase1]>_R
                 ->_R (<MusiCompoNator.Composition.VoiceState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((),
                                       MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <MusiCompoNator.Composition.VoiceState>_N
                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                              <()>_N)) -}
021134e786d5fafe605c07e67a67b68b
  putPhrases1 ::
    [MusiCompoNator.Composition.Phrase1]
    -> MusiCompoNator.Composition.VoiceState
    -> ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(A,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (phs :: [MusiCompoNator.Composition.Phrase1])
                   (eta :: MusiCompoNator.Composition.VoiceState) ->
                 (GHC.Tuple.(),
                  case eta of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  MusiCompoNator.Composition.VS phs ds1 ds2 })) -}
fce843d5babc335e2a4bb830a9f24196
  putScale ::
    MusiCompoNator.Core.Scale -> MusiCompoNator.Composition.Voice ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U,U,A)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.putScale1
                  `cast`
                (<MusiCompoNator.Core.Scale>_R
                 ->_R (<MusiCompoNator.Composition.VoiceState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((),
                                       MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <MusiCompoNator.Composition.VoiceState>_N
                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                              <()>_N)) -}
533276e9e2983a4768be593bd3b9b692
  putScale1 ::
    MusiCompoNator.Core.Scale
    -> MusiCompoNator.Composition.VoiceState
    -> ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U,U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (m :: MusiCompoNator.Core.Scale)
                   (eta :: MusiCompoNator.Composition.VoiceState) ->
                 (GHC.Tuple.(),
                  case eta of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  MusiCompoNator.Composition.VS ds ds1 m })) -}
20d1f79e147521404b70a08d6a4ec96d
  putTime ::
    MusiCompoNator.Core.Beat -> MusiCompoNator.Composition.Voice ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U,A,U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.putTime1
                  `cast`
                (<MusiCompoNator.Core.Beat>_R
                 ->_R (<MusiCompoNator.Composition.VoiceState>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <((),
                                       MusiCompoNator.Composition.VoiceState)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <MusiCompoNator.Composition.VoiceState>_N
                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                              <()>_N)) -}
f951b82e3525ccac8cc41a4af40237fc
  putTime1 ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.Composition.VoiceState
    -> ((), MusiCompoNator.Composition.VoiceState)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(U,A,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (b :: MusiCompoNator.Core.Beat)
                   (eta :: MusiCompoNator.Composition.VoiceState) ->
                 (GHC.Tuple.(),
                  case eta of wild { MusiCompoNator.Composition.VS ds ds1 ds2 ->
                  MusiCompoNator.Composition.VS ds b ds2 })) -}
2a91342ecdde996db6ba52fb1357c23a
  rest ::
    (GHC.Num.Num a, GHC.Classes.Ord a) =>
    a
    -> MusiCompoNator.Composition.Phrase
         c MusiCompoNator.Composition.Prim a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>m4,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ c
                   ($dNum :: GHC.Num.Num a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (b :: a) ->
                 MusiCompoNator.Composition.:<:
                   @ c
                   @ MusiCompoNator.Composition.Prim
                   @ a
                   MusiCompoNator.Composition.silence
                   (MusiCompoNator.Core.beat @ a $dNum $dOrd b)) -}
50bb127adef85228d6cde696b0c47d3f
  runVoice ::
    MusiCompoNator.Composition.Voice a
    -> MusiCompoNator.Core.Scale
    -> (a, [MusiCompoNator.Composition.Phrase2],
        MusiCompoNator.Core.Beat)
  {- Arity: 2, Strictness: <L,1*C1(U(1*U,U(1*U,1*U,A)))><L,U>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: MusiCompoNator.Composition.Voice a)
                   (w1 :: MusiCompoNator.Core.Scale) ->
                 case MusiCompoNator.Composition.$wrunVoice
                        @ a
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
2e25dcaa65d0bf72796a58d31a68fca6
  scale ::
    MusiCompoNator.Composition.VoiceState -> MusiCompoNator.Core.Scale
  RecSel Left MusiCompoNator.Composition.VoiceState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MusiCompoNator.Composition.VoiceState) ->
                 case ds of wild { MusiCompoNator.Composition.VS ds1 ds2 ds3 ->
                 ds3 }) -}
67e9377c638345f32f4ce0f8749b94d2
  shift ::
    GHC.Types.Int
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 2, Strictness: <L,U(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (i :: GHC.Types.Int)
                   (eta :: [MusiCompoNator.Composition.Prim]) ->
                 GHC.Base.build
                   @ MusiCompoNator.Composition.Prim
                   (\ @ b1
                      (c :: MusiCompoNator.Composition.Prim -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ MusiCompoNator.Composition.Prim
                      @ b1
                      (GHC.Base.mapFB
                         @ MusiCompoNator.Composition.Prim
                         @ b1
                         @ MusiCompoNator.Composition.Prim
                         c
                         (MusiCompoNator.Composition.Mode (MusiCompoNator.Core.index i)))
                      n
                      eta)) -}
6d069f2f894024e50953935a7eee517f
  silence ::
    MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ MusiCompoNator.Composition.Prim
                   MusiCompoNator.Composition.silence1
                   (GHC.Types.[] @ MusiCompoNator.Composition.Prim)) -}
443a3c2348419b6d2c29f2807f89b717
  silence1 :: MusiCompoNator.Composition.Prim
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (MusiCompoNator.Composition.Voicing
                   (GHC.Types.[]
                      @ (MusiCompoNator.Core.Scale -> MusiCompoNator.Core.Pitch))) -}
09576954f30e516d51e753387a807e7c
  singleV ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Voice ()
  {- Arity: 2, Strictness: <L,U><L,1*U(U,U(U,U),U)>m,
     Unfolding: InlineRule (0, True, True)
                MusiCompoNator.Composition.inKey2
                  `cast`
                (<MusiCompoNator.Composition.Phrase1>_R
                 ->_R (<MusiCompoNator.Composition.VoiceState>_R
                       ->_R Nth:3
                                (<MusiCompoNator.Composition.VoiceState>_R
                                 ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                               <((),
                                                 MusiCompoNator.Composition.VoiceState)>_R))) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                                         <MusiCompoNator.Composition.VoiceState>_N
                                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                                         <()>_N)) -}
25394f09fb9bfffd2f0f2d4db918e798
  staccato ::
    MusiCompoNator.Core.Beat
    -> MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
  {- Arity: 2, Strictness: <L,U><S,1*U>m2, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MusiCompoNator.Core.Beat)
                   (w1 :: MusiCompoNator.Composition.Phrase1) ->
                 case MusiCompoNator.Composition.$wstaccato
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Core.Beat
                   ww1
                   ww2 }) -}
e38a49b938fcffc336dd19207ad79d70
  tie ::
    MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
  {- Arity: 2, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (2, True, False)
                (\ (ph1 :: MusiCompoNator.Composition.Phrase1)
                   (ph2 :: MusiCompoNator.Composition.Phrase1) ->
                 MusiCompoNator.Composition.:+:
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                   (MusiCompoNator.Composition.appLast
                      MusiCompoNator.Composition.TieNext
                      ph1)
                   ph2) -}
b6653d93b774ba07333041b1a7a7b9e2
  transpose ::
    MusiCompoNator.Core.Pitch
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
    -> MusiCompoNator.Core.Sequence MusiCompoNator.Composition.Prim
  {- Arity: 2, Strictness: <L,U(U,U)><S,1*U>,
     Unfolding: (\ (p :: MusiCompoNator.Core.Pitch)
                   (eta :: [MusiCompoNator.Composition.Prim]) ->
                 GHC.Base.map
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Composition.Prim
                   (MusiCompoNator.Composition.Mode
                      (GHC.Base.map
                         @ MusiCompoNator.Core.Pitch
                         @ MusiCompoNator.Core.Pitch
                         (\ (ds :: MusiCompoNator.Core.Pitch) ->
                          GHC.Real.$fEnumRatio_$s$c+ ds p)))
                   eta) -}
9d5247246b1926496dca5bba8e7b1109
  unPhrase ::
    (GHC.Num.Num b, GHC.Classes.Ord b) =>
    MusiCompoNator.Composition.Phrase c p b
    -> ([[c]], MusiCompoNator.Core.Sequence p,
        MusiCompoNator.Core.Rhythm b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ c
                   @ p
                   (w :: GHC.Num.Num b)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: MusiCompoNator.Composition.Phrase c p b) ->
                 case MusiCompoNator.Composition.$wunPhrase
                        @ b
                        @ c
                        @ p
                        w
                        w1
                        w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
0190d423215efb50afef2660a6eaf9b2
  volume ::
    GHC.Real.Rational
    -> MusiCompoNator.Composition.Phrase1
    -> MusiCompoNator.Composition.Phrase1
  {- Arity: 2, Strictness: <L,U><S,1*U>m2, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Real.Rational)
                   (w1 :: MusiCompoNator.Composition.Phrase1) ->
                 case MusiCompoNator.Composition.$wvolume
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 MusiCompoNator.Composition.Sig
                   @ MusiCompoNator.Composition.PhraseControl
                   @ MusiCompoNator.Composition.Prim
                   @ MusiCompoNator.Core.Beat
                   ww1
                   ww2 }) -}
instance [safe] MusiCompoNator.Composition.ControlPitchBeatTrifunctor [MusiCompoNator.Composition.Phrase]
  = MusiCompoNator.Composition.$fControlPitchBeatTrifunctorPhrase
instance [safe] GHC.Classes.Eq [MusiCompoNator.Composition.PhraseControl]
  = MusiCompoNator.Composition.$fEqPhraseControl
instance [safe] MusiCompoNator.Core.Measurable [MusiCompoNator.Composition.Phrase]
  = MusiCompoNator.Composition.$fMeasurablePhrase
instance [safe] MusiCompoNator.Core.Measurable [MusiCompoNator.Composition.Phrase]
  = MusiCompoNator.Composition.$fMeasurablePhrase0
instance [safe] GHC.Base.Semigroup [MusiCompoNator.Composition.Phrase]
  = MusiCompoNator.Composition.$fSemigroupPhrase
instance [safe] GHC.Base.Semigroup [Control.Monad.Trans.State.Lazy.StateT]
  = MusiCompoNator.Composition.$fSemigroupStateT
instance [safe] GHC.Show.Show [MusiCompoNator.Composition.Phrase]
  = MusiCompoNator.Composition.$fShowPhrase
instance [safe] GHC.Show.Show [MusiCompoNator.Composition.PhraseControl]
  = MusiCompoNator.Composition.$fShowPhraseControl
"SPEC/MusiCompoNator.Composition $fMonadStateT_$c>> @ Identity _" [orphan] forall @ s
                                                                                  ($dMonad :: GHC.Base.Monad
                                                                                                Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ Data.Functor.Identity.Identity
                                                    @ s
                                                    $dMonad
  = MusiCompoNator.Composition.$fSemigroupStateT_$s$fMonadStateT_$c>>
      @ s
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

